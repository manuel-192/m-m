#!/bin/bash
#
# Copy built packages from old repo to new repo
# and if changed, transfer to github.

echo1() { echo "$@" ; }        # for "return" values from functions (output to stdout)
echo2() { echo "$@" >&2 ; }    # output to stderr
read2() { read "$@" >&2 ; }    # output to stderr

DIE() {
    echo2 "Error: $1"
    exit 1
}

_date() {
    date -Ru | tr -d ',' | awk '{print $1,$3,$2,$5,"UTC",$4}'
}

StateUpdate() {
    local statefile=state
    local stateval="$(head -n 1 $statefile)"
    #Random ID generator, because the incrementing value is predictable
    local NEW_UUID="$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)"

    echo $((stateval+1))                       > $statefile
    echo "$NEW_UUID"                          >> $statefile
    _date >> $statefile
}

GetRepoName() {
    local xx
    reponame="$(basename "$PWD")"
    case "$reponame" in
        repo | eos-tools)
            reponame="$(/usr/bin/ls -1F | grep "/$" | tr -d '/')" ;;
    esac
    case "$(echo "$reponame" | wc -l)" in
        0) return 1 ;;
        1) echo1 "$reponame" ;;
        *)
            echo2 "Potential repo names:"
            while true ; do
                echo2 "$reponame" | sed 's|^|    |'
                read2 -p "Select reponame: "
                if [ -n "$REPLY" ] && [ -n "$(echo "$reponame" | grep "^$REPLY$")" ]; then
                    echo1 "$REPLY"
                    return
                fi
                echo2 "sorry, '$REPLY' is none of the above!"
            done
            ;;
    esac
}

CreateExcludes() {
    local xx
    local files="$(/usr/bin/ls -1a "$srcdir")"

    for xx in $files ; do
        case "$xx" in
            *.sig | *.xz | *.zst | *.db | *.files) ;;  # these we want to diff
            . | ..) ;;                                 # not directories
            *) excludes+=" -x $xx" ;;                  # not these files/dirs either
        esac
    done
}

CheckDiff() {
    case "$reponame" in
        "")
            DIE "cannot determine reponame!"
            ;;
        endeavouros)
            has_statefile=yes
            statefile="$PWD/state"
            test -r "$statefile" || DIE "file '$statefile' is missing!"
            srcdir="$PWD/../_BUILD_/mirrors.mirror1"
            dstdir="$PWD/$reponame/x86_64"
            git_adds="$reponame state"
            ;;
        endeavouros-testing-dev)                           # was eos-tools
            srcdir="$PWD/../_BUILD_/repo-testing.x86_64"
            dstdir="$PWD/$reponame"                        # was endeavouros-pkgtools
            git_adds="$(basename "$dstdir")"
            ;;
        *)
            srcdir="$PWD/../_BUILD_/$reponame"
            dstdir="$PWD/repo"
            git_adds="$(basename "$dstdir")"
            ;;
    esac

    test -d "$gitdir"/.git          || DIE "folder '$gitdir/.git' not found!"
    test -r "$srcdir"/$reponame.db  || DIE "db file '$srcdir/$reponame.db' not found!"
    test -d "$dstdir"               || DIE "folder '$dstdir' not found!"

    local excludes=""
    CreateExcludes

    diff "$srcdir" "$dstdir" $excludes >/dev/null
    diff_x86_64=$?
    case "$diff_x86_64" in
        2) DIE "'diff $srcdir $dstdir' failed." ;;
    esac

    # ARM news check!
    if [ "$reponame" = "endeavouros" ] ; then
        $ArmPkgCheck check
        diff_arm=$?
        case "$diff_arm" in
            2) DIE "$ArmPkgCheck check failed." ;;
        esac
    fi
}

ReplaceAssets() {
    case "$reponame" in
        endeavouros)
            if [ $diff_arm -eq 1 ] ; then
                $ArmPkgCheck copy || DIE "$ArmPkgCheck copy failed."
            fi
            if [ $diff_x86_64 -eq 1 ] ; then
                rm -f "$dstdir"/*.{db,files,sig,xz,zst}
                cp -p "$srcdir"/*.{db,files,sig,xz,zst} "$dstdir"
            fi
            ;;
        *)
            rm -f "$dstdir"/*.{db,files,sig,xz,zst}
            cp -p "$srcdir"/*.{db,files,sig,xz,zst} "$dstdir"
            ;;
    esac
}

MirrorStateUpdate() {
    cd "$gitdir"
    if [ "$has_statefile" = "yes" ] ; then
        StateUpdate
    fi
}

RunOnlyIfAllowed() {
    local cmd="$1"
    while true ; do
        read2 -p "Run '$cmd' now (y/n)? "
        case "$REPLY" in
            [yY]*)
                $cmd || DIE "'$cmd' failed."
                break
                ;;
            [nN]*)
                break
                ;;
        esac
    done
}

GitUpdate() {
    local commit_msg="$1"

    cd "$gitdir"
    echo2 ""
    echo2 "Adding files to github."
    echo2 ""
    # RunOnlyIfAllowed "git pull"
    git add $git_adds
    #git commit -m "."          # dummy commit message
    git commit -m "$commit_msg"
    echo2 ""
    git push || {
        echo2 "You should run commands 'cd $PWD ; git push'"
    }
}

Main()
{
    local commit_msg="$1"

    if [ -z "$commit_msg" ] ; then
        DIE "give commit message"
    fi

    [ -f .GitUpdate ] || DIE "no .GitUpdate file in folder $PWD"
    [ -d .git ]       || DIE "no .git folder in $PWD"
    [ -L .git ]       && DIE ".git must not be symlink in $PWD"

    local gitdir="$PWD"                     # has .git folder
    local reponame="$(GetRepoName)"
    local has_statefile=no
    local srcdir=""
    local dstdir=""
    local git_adds=""
    local statefile=""
    local diff_x86_64=0                     # 1 = has updates
    local diff_arm=0                        # 1 = has updates
    local ArmPkgCheck=/usr/bin/ArmPkgCheck

    if [ "$reponame" = "endeavouros" ] ; then
        [ -x $ArmPkgCheck ] || DIE "$ArmPkgCheck not found."
    fi

    CheckDiff

    if [ $diff_x86_64 -ne 0 ] || [ $diff_arm -ne 0 ] ; then
        echo2 ""
        echo "Changes detected. Will replace local assets after 'git pull', then sync all to github."

        cd "$gitdir"
        RunOnlyIfAllowed "git pull"
        ReplaceAssets
        MirrorStateUpdate
        GitUpdate "$commit_msg"
    else
        echo2 "No changes."
    fi
}

Main "$@"
