#!/bin/bash

# Show the changelog of the given Arch package-name.

echo2() { echo -e "$@" >&2; }
INFO() { [ $quiet = no ] && echo2 "==> $progname: info: $1"; }
WARN() { echo2 "==> $progname: warning: $1"; }
DIE()  { echo2 "\n==> $progname: error: $1\n"; Usage 1; }

Usage() {
    cat <<EOF >&2
Purpose: Show changelog of a set of Arch and EndeavourOS packages.
Usage:   $progname [options] package-name(s)
Options: --help, -h            This help.
         --github              Uses github for showing the changelog.
         --gitlab              Uses gitlab for showing the changelog.
         --parameters          Show supported package names and options. Implies option -d.
         --clfile=X, -c=X      Replace PKG_CHANGELOGS array with a new one in (bash) file 'X'.
         --detect-clfile, -d   Detects possible changelog file at '$clfile_def'.
         --url, -u             Simply print the changelog URL instead of opening it in a browser.
         --quiet               Don't show purely informational messages (but show errors and warnings).
Notes:
         - Currently only a small number of Arch packages is supported. We are working on it.
         - Bash completion does not display all supported packages.
EOF
    [ "$1" ] && exit $1
}

DumpPkgnames() {
    # Show only pkgnames that have a non-empty URL.
    declare -p PKG_CHANGELOGS | sed -e 's|\[|\n\[|g' -e 's|[ ]*)$||' | grep "^\[" | grep -v '""' | sed -E 's|^\[([^]]*).*|\1|' | sort
}
DumpOptions() {
    local sopts2=${sopts//:/}
    local lopts2=${lopts//:/}
    printf "%s\n" ${sopts2//?/-& }--${lopts2//,/ --}
}
DetectClFile() {
    local mode="$1"
    clfile="$clfile_def"
    if [ -e "$clfile" ] ; then
        [ "$mode" = verbose ] && INFO "reading $clfile..."
        source "$clfile" || DIE "reading $clfile failed"
    else
        case "$REPONAME" in
            core | extra | "") ;;             # $clfile not found
            *) DIE "$clfile not found" ;;
        esac
    fi
}

Parameters() {
    local sopts="c:dhu"
    local lopts="help,github,gitlab,parameters,clfile:,detect-clfile,quiet,url"
    local opts=""

    opts="$(/usr/bin/getopt -o="$sopts" --longoptions "$lopts" --name "$progname" -- "$@")" || Usage 1
    eval set -- "$opts"

    while [ "$1" ] ; do
        case "$1" in
            --clfile | -c)
                clfile="$2"
                shift
                source "$clfile" || DIE "reading $clfile failed"      # get new PKG_CHANGELOGS and REPONAME
                ;;
            --detect-clfile | -d)
                DetectClFile verbose
                ;;
            --parameters)
                DetectClFile
                DumpOptions
                DumpPkgnames
                exit 0
                ;;
            --github | --gitlab) preferred_site=${1:2} ;;
            --url | -u)          return_url=yes ;;
            --quiet)             quiet=yes ;;
            --help | -h)         Usage 0 ;;
            --) shift; break ;;
        esac
        shift
    done
    pkgnames=("$@")
    # [ "$REPONAME" ] || REPONAME=??
}

GetUrl() {
    local pkgname="$1"
    local url=$(expac -Q %u "$pkgname")
    [ "$url" ] || url=$(expac -S %u "$pkgname")
    echo "$url"
}

HandlePkgbuildUrl() {
    local -r pkgname="$1"
    local -n _clurl="$2"
    local -r PKGBUILD_URL=$(GetUrl $pkgname)
    local url=""

    case "$PKGBUILD_URL" in
        https://gitlab.archlinux.org/*)
            url="https://gitlab.archlinux.org/archlinux/packaging/packages/$pkgname/commits" ;;
        https://*.gnu.org/*)
            url="https://git.savannah.gnu.org/cgit/$pkgname.git/log" ;;
        https://*.nongnu.org/*)
            url="https://git.savannah.nongnu.org/cgit/$pkgname.git/log" ;;
        https://gitlab.com/kernel-firmware/linux-firmware)
            url="https://gitlab.com/kernel-firmware/linux-firmware/commits" ;;
        https://*freedesktop.org/*)
            url="https://gitlab.freedesktop.org/$pkgname/$pkgname/commits" ;;
        https://launchpad.net/*)
            url="https://launchpad.net/$pkgname" ;;
    esac
    _clurl="$url"
}

Changelog() {
    local -r progname=${0##*/}
    local -r progpath=${0}
    local pkgnames=()
    local preferred_site=gitlab                 # github or gitlab
    local clfile=""                             # for option -c; if given, the file contains PKG_CHANGELOGS and REPONAME
    local -r clfile_def="./changelogs.conf"     # for option -d
    local REPONAME=""
    local return_url=no                         # no=open URL, yes=return URL
    local quiet=no
    local changelogfile=/etc/$progname.conf
    local clfile_url="https://raw.githubusercontent.com/manuel-192/m-m/refs/heads/master/PKGBUILDs/arch-cl/arch-changelog.conf"

    changelogfile="$HOME/.config/$progname.conf"

    # Known package-names:
    declare -A PKG_CHANGELOGS=()

    #if [ ! -e "$changelogfile" ] ; then
        curl --fail -Lsm 30 -o"$changelogfile" "$clfile_url" || DIE "failed fetching $changelogfile"
    #fi

    source "$changelogfile" || DIE "no changelog file in $changelogfile"
    [ "$PKG_CHANGELOGS[*]" ] || DIE "no changelog definitions in $changelogfile"

    Parameters "$@"

    HandlePkgnames
}

HandlePkgnames() {
    [ "$pkgnames" ] || DIE "please give package-name(s), for example: $progname glances"
    local pkgname
    local changelog_url=""
    local urls_line=""
    local URLS=()
    local tmp=()

    for pkgname in "${pkgnames[@]}" ; do
        changelog_url="${PKG_CHANGELOGS[$pkgname]}"
        if [ -z "$changelog_url" ] ; then
            HandlePkgbuildUrl "$pkgname" changelog_url
            [ "$changelog_url" ] || changelog_url=$(eos-pkg-changelog --url "$pkgname" 2>/dev/null)
            if [ -z "$changelog_url" ] ; then
                [ "$quiet" = no ] && WARN "sorry, package name '$pkgname' is not supported"
                continue
            fi
        fi

        if [ $return_url = yes ] ; then
            [ "$urls_line" ] && urls_line+="|$changelog_url" || urls_line="$changelog_url"
        else
            readarray -t tmp <<< $(echo "${changelog_url//|/$'\n'}")
            URLS+=("${tmp[@]}")
        fi
    done
    if [ "$urls_line" ] ; then
        echo "$urls_line"            # show the URL(s) separated by '|'
    elif [ "$URLS" ] ; then
        OPEN_URLS "${URLS[@]}"       # open the URL(s)
    fi
}

OPEN_URLS() {
    # use mime binding to open the URL(s) with a browser; if needed, fallback to firefox
    local xx
    printf " -> %s\n" "$@" >&2
    if [ -x /bin/exo-open ] ; then
        exo-open "$@"
    elif [ -x /bin/kde-open ] ; then
        for xx in "$@" ; do
            kde-open "$xx"
        done
    elif [ -x /bin/xdg-open ] ; then
        for xx in "$@" ; do
            xdg-open "$xx"
        done
    elif [ -x /bin/firefox ] ; then
        setsid firefox "$@"
    fi
}

Changelog "$@"
