#!/bin/bash

# Add e.g. #!/usr/bin/c-runner <compiler> and parameters to your C/C++ code.
# <compiler>:
#    gcc g++ clang clang++
#
# If you have more than one source file, add the shebang only to the main source file
# and add other source files as parameters. The main source file will be added automatically.
#
# Examples:
#   One source file, which comes automatically. Add only compiler flags:
#      #!/usr/bin/c-runner gcc -O2 -Wall
#   Several source files. Add compiler flags and other needed source files:
#      #!/usr/bin/c-runner clang -O2 other1.c other2.c

DIE() {
    local progname="$(basename "$0")"
    printf "==> %s error: %s\n" "$progname" "$1" >&2
    exit 1
}

Testing() {
    if $testing ; then
        "$@"
    fi
}

Main() {
    local testing=false   # true = for the developer only

    if $testing ; then
        # some testing stuff only
        case "$1" in
            --show-args) echo "$@" ; return ;;
            --cd)        cd ; shift ;;
        esac
    fi

    local compiler_line=""     # compiler line from the shebang
    local compiler_prog=""     # compiler program extracted from shebang
    local src_main=""          # the main source file

    local args=()              # only for developer testing
    local arg                  # holds each parameter
    local nextix=0             # for counting the parameters
    local count=${#@}          # count of the parameters

    # There should be exactly 2 parameters; "compiler parameters" "main-source"

    if $testing ; then
        [ $count -lt 2 ] && DIE "compiler and main source file not specified at '#!' line: '$*'"
    else
        [ $count -ne 2 ] && DIE "shebang problem at '#!' line: '$*'"
    fi

    for arg in "$@" ; do
        ((nextix++))

        if [ -z "$compiler_line" ] ; then
            compiler_line="$arg"            # first argument is the shebang compiler line
            compiler_prog="$(echo "$compiler_line" | awk '{print $1}')"
            continue
        fi
        if [ $nextix -eq $count ] ; then
            src_main="$arg"            # last argument is the main source file
            break
        fi

        args+=("$arg")                 # this meant for testing/debugging only!
    done

    [ -n "$src_main" ] || DIE "no source file as a parameter!"
    [ -r "$src_main" ] || DIE "cannot read file '$src_main'"

    case "$compiler_prog" in
        gcc | g++ | clang | clang++) ;;
        *) DIE "compiler '$compiler_prog' not supported" ;;
    esac

    local a_out=$(mktemp "$HOME/.cache/a.out-XXXXXXXX")
    local src_main_stripped="${a_out}-$(basename "$src_main")"

    tail -n +2 "$src_main" > "$src_main_stripped"  # remove the shebang from the main source file

    $compiler_line "${args[@]}" "$src_main_stripped" -o "$a_out" || DIE "compilation failed"
    "$a_out"
    rm -f "$a_out" "$src_main_stripped"
}

Main "$@"
