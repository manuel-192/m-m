#!/bin/bash

# expac with automatic column support

Main()
{
    local progname=${0##*/}
    local columns=yes
    local fmtix="" ix fmt=""
    local args=() arg
    local separator="|"

    ix=0
    for arg in "$@" ; do
        case "$arg" in
            --columns=*)
                columns="${arg#*=}"
                case "$columns" in
                    yes|no) ;;
                    *) DIE "option value $arg not supported" ;;
                esac
                continue   # don't change ix
                ;;
            --separator=*)
                separator="${arg#*=}"
                continue   # don't change ix
                ;;
            -h | --help)
                /bin/expac -h | head -n -1
                echo "  --columns=*               Columnar output mode toggle. Values: yes (default), no."
                echo "                            Note: the <format> parameter can have only simple formatting like '%n%m%d'."
                echo "  --separator=*             Use given char to separate input items for the columnar output."
                exit 0
                ;;
            %*)
                fmtix=$ix
                args+=("$arg")
                ;;
            *)
                args+=("$arg")
                ;;
        esac
        ((ix++))
    done

    if [ $columns = yes ] && [ "$fmtix" ] ; then
        fmt="${args[$fmtix]}"
        AddColumns
        args[$fmtix]="$fmt"
        /bin/expac "${args[@]}" | column -t -s"$separator"
    else
        /bin/expac "$@"
    fi
}

AddColumns() {
    # Ad hoc add '$separator' to proper places of 'fmt'.
    local -r fmt_orig="$fmt"
    local src="$fmt"
    fmt=""
    while [ "$src" ] ; do
        case "${src::2}" in
            %?) fmt+="${src::2}$separator" ;;
            *) DIE "format '$fmt_orig' not supported" ;;
        esac
        src=${src:2}
    done
    [ "${fmt: -1}" = "$separator" ] && fmt=${fmt:: -1}   # skip trailing $separator
}

DIE() {
    echo "$progname: error: $1" >&2
    exit 1
}

Main "$@"
