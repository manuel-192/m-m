#!/bin/bash

# Create a local repo from certain AUR PKGBUILDs.

Pushd()  { pushd "$@" &>/dev/null || DIE "'$FUNCNAME $*' failed" "${BASH_LINENO[0]}" ; }
Popd()   { popd  "$@" >/dev/null ; }
echo2()  { echo "$@" >&2 ; }
printf2()  { printf "$@" >&2 ; }

echo2v()   { [ $verbose = yes ] && echo2   "$@" ; }
printf2v() { [ $verbose = yes ] && printf2 "$@" ; }

ASSERT() { "$@" || DIE "'$*' failed" ; }
DIE()    {
    case "$2" in
        "") local msg="$progname: error: $1" ;;
        *)  local msg="$progname (L:$2): error: $1" ;;
    esac

    echo2 "$msg"

    local date="$(date +%Y%m%d-%H%M)"
    echo "$date: $msg" > "$errlog"
    exit 1
}
DIELINE() { DIE "$1" "${BASH_LINENO[0]}" ; }
INFO() {
    echo2 "==> $progname: info: $@"
}

AddPackagesToRepo() {
    local pkg pkgs=() sigs=()
    echo2 "==> Adding built packages to repo db"
    if [ -z "$SIGNER" ] ; then
        if [ $dryrun = no ] || [ $force_rebuild = yes ] ; then
            INFO "packages will not be signed"
        fi
    fi
    for pkg in "$@" ; do
        echo2 "    -> $pkg"
        pkgs+=("$pkg")
        if [ -n "$SIGNER" ] ; then
            ASSERT gpg --local-user "$SIGNER" --output="$pkg.sig" --detach-sign "$pkg"
            sigs+=("$pkg".sig)
        fi
    done
    ASSERT repo-add "$REPONAME.db.tar.xz" "${pkgs[@]}" >/dev/null

    rm -f $REPONAME.{db,files}.tar.xz.old

    if [ $add_cache = yes ] ; then
        if [ -n "$SIGNER" ] ; then
            echo2 "==> add built packages to package cache: "
            sudo cp "${pkgs[@]}" "${sigs[@]}" /var/cache/pacman/pkg/
        else
            INFO "no signed packages, will not add to local cache"
        fi
    fi
    echo2 "==> done."
}

GetPkgbuildPkgname() {
    local PKGBUILD="$1"
    source "$PKGBUILD"
    echo "${pkgname}-${pkgver}-${pkgrel}-${arch[0]}.pkg.tar.zst"
}

BuildPackages() {
    local files file pkgs=() onepkgs=()
    local built=no
    local pkgname                 # pkgname = name in PKGNAMES array (a folder)
    local destructor
    local depsfile

    Pushd "$pkgbuilddir"
    
    for pkgname in "${build_needed[@]}" ; do
        [ -r "$pkgname/PKGBUILD" ] || DIELINE "no PKGBUILD for '$pkgname'"
        ASSERT Pushd "$pkgname"

        depsfile=/tmp/$pkgname.tmp.deps
        InstallMissingDeps $pkgname $depsfile

        printf2 "==> %-40s: Building..." "$pkgname"
        ASSERT makepkg -cf ${MAKEPKG_EXTRA_OPTS[$pkgname]} &> "$buildlog"
        echo2 "done."

        if [ $remove_deps = yes ] ; then
            RemoveInstalledDeps $pkgname $depsfile
        fi
        rm -f $depsfile

        destructor="${PKG_BEFORE_AFTER[$pkgname]}"                 # destructor should clean up
        if [ -n "$destructor" ] ; then
            case "$VERSION_COMPAT" in
                0) ASSERT "$destructor" --op=destruct ;;
                *) ASSERT "$destructor" after ;;
            esac
        fi
        onepkgs=()
        readarray -t files <<< $(ls -1 *.pkg.tar.zst 2>/dev/null)
        for file in "${files[@]}" ; do
            if [ ! -e "$repodir/$file" ] || [ "$force_rebuild" = "yes" ] ; then
                rm -f "$repodir/$file"{,.sig}
                onepkgs+=("$file")                        # these are new repo files
            fi
        done
        if [ ${#onepkgs[@]} -gt 0 ] ; then
            ASSERT cp "${onepkgs[@]}" "$repodir"          # copy built package files to the repo
            rm -f "${onepkgs[@]}"                         # cleanup
            built=yes
            pkgs+=("${onepkgs[@]}")
        fi

        ASSERT Popd
    done
    Popd   # "$pkgbuilddir"

    if [ "$built" = "yes" ] ; then
        AddPackagesToRepo "${pkgs[@]}"
    else
        echo2 "Nothing to do."
    fi
}

BuildNeeded() {
    # TODO: handle multipackage PKGBUILDs

    local pkgname="$1"     # extracted real pkgname
    local pkgname1="$2"    # pkgname in PKGNAMES[]
    if [ "$VERSION_COMPAT" -ge 2 ] ; then
        local archive="$PKG_ARCHIVE"
    else
        local archive="$repodir/PKG_ARCHIVE"
    fi

    old_version=$(ls -1 "$repodir/$pkgname"-*.pkg.tar.zst 2>/dev/null)
    old_version=$(echo "$old_version" | tail -n1 | pkg-name-components --real EVR)
    [ "$old_version" = "-" ] && old_version=""

    case "$pkgname1" in
        */local)
            new_version=$(GetPkgVersion "$localroot/$pkgname/PKGBUILD")
            [ -n "$new_version" ] || DIELINE "cannot find the latest available version of package '$pkgname1'"
            ;;
        *)
            new_version=$(LANG=C $helper_Sia "$pkgname" | grep -E "^Version[ ]+: " | awk '{print $NF}')
            [ -n "$new_version" ] || DIELINE "'$helper_Sia' cannot find the latest available version of package '$pkgname1'"
            ;;
    esac

    case "$(vercmp "$new_version" "$old_version")" in
        1)
            if [ -n "$old_version" ] ; then
                mkdir -p "$archive"
                chmod u+w "$archive"
                mv "$pkgname"-*.pkg.tar.* "$archive" 2>/dev/null
                chmod -w "$archive"                                  # prevent accidental removal
            fi
            return 0
            ;;
        *)  return 1
            ;;
    esac
}

GetPkgVersion() {
    local PKGBUILD="$1"
    source "$PKGBUILD"
    echo "$pkgver"-"$pkgrel"   # assume pkgver() does not exist !!!
}
RealName() {
    case "$1" in
        */local) echo "${1%/local}" ;;
        *)       echo "$1" ;;
    esac
}

FetchPkgbuilds() {
    FetchAurPackage() {
        printf2v "...fetching"
        ASSERT $helper_Ga "$1"
        echo2v "...done."
    }

    local pkgname pkgname1
    local constructor
    local old_version new_version

    Pushd "$pkgbuilddir"

    for pkgname1 in "${PKGNAMES[@]}" ; do
        pkgname=$(RealName $pkgname1)
        printf2v "==> %-40s: " "$pkgname1"
        case "$pkgname1" in
            */local) [ -r "$localroot/$pkgname/PKGBUILD" ] || DIELINE "no PKGBUILD for $pkgname1" ;;
        esac
        if [ "$force_rebuild" = "no" ] ; then
            if ! BuildNeeded "$pkgname" "$pkgname1" ; then
                echo2v "OK ($old_version)"
                continue
            fi
            printf2v "update ($old_version --> $new_version)"
        else
            printf2v "forced ($old_version --> $new_version)"
        fi
        if [ $dryrun = no ] ; then
            build_needed+=("$pkgname")
            if [ $show_changelog = yes ] && [ ${#PKG_CHANGELOG[@]} -gt 0 ] ; then
                changelog_pkgs+=("$pkgname")
            fi
            rm -rf "$pkgname"                        # remove possible old pkg folder
            case "$pkgname1" in
                */local)
                    cp -a "$localroot/$pkgname" ./
                    echo2v ""
                    ;;
                *) FetchAurPackage "$pkgname" >/dev/null ;;
            esac
            constructor="${PKG_BEFORE_AFTER[$pkgname]}"
            if [ -n "$constructor" ] ; then
                ASSERT Pushd "$pkgname"
                case "$VERSION_COMPAT" in
                    0) ASSERT "$constructor" --op=construct ;;
                    *) ASSERT "$constructor" before ;;
                esac
                Popd
            fi
        else
            echo2v ""
        fi
    done

    Popd  # "$pkgbuilddir"
}

FuncnameToPkgname() {     # convert "_name_" to "name"
    local name="$1"       # funcname
    name=${name:1}        # remove first char
    name=${name:: -1}     # remove last char
    echo "$name"
}

IsInPkgnames() {
    local -r pkgname="$1"
    printf "%s\n" "${PKGNAMES[@]}" | grep "^$pkgname$" >/dev/null
}

Add_BeforeAfter_func() {
    local -r funcname="$1"
    local -r pkgname="$(FuncnameToPkgname "$funcname")"
    IsInPkgnames "$pkgname" && PKG_BEFORE_AFTER[$pkgname]="$funcname"

    true  # do not fail sourceing the config file
}

GetPkgbuildValue() {
    local -r varname="$1"
    local -n retvar="$2"

    source PKGBUILD || return 1
    case "$varname" in
        depends)     retvar=("${depends[@]}") ;;
        makedepends) retvar=("${makedepends[@]}") ;;
        pkgrel)      retval="$pkgrel" ;;
        pkgver)      retval="$pkgver" ;;
        epoch)       retval="$eopch" ;;
        *) return 1 ;;
    esac
}
PutPkgbuildValue() {
    local -r varname="$1"
    local -r value="$2"
    sed -i PKGBUILD -e "s|^$varname=.*|$varname='$value'|"
}

MissingDeps() {
    local -r pkgname_dir="$1"
    local -r varname="$2"
    local DEPS=()
    local pkgs=()

    GetPkgbuildValue $varname DEPS || return 1

    for pkg in "${DEPS[@]}" ; do
        case "$pkg" in
            *">"*) pkg=${pkg%%>*} ;;
            *"="*) pkg=${pkg%%=*} ;;
            *"<"*) pkg=${pkg%%<*} ;;
        esac
        expac -Q %n $pkg &>/dev/null || pkgs+=($pkg)
    done

    printf "%s\n" "${pkgs[@]}"
}

InstallMissingDeps() {
    local -r pkgname_dir="$1"
    local depsfile="$2"
    local install=()

    install+=($(MissingDeps "$pkgname_dir" depends))     || return 1
    install+=($(MissingDeps "$pkgname_dir" makedepends)) || return 1

    if [ ${#install[@]} -gt 0 ] ; then
        local list=$(printf "   %s\n" "${install[@]}")
        printf "Package %s, installing dependencies:\n%s\n" "$pkgname_dir" "$list" >&2
        echo "${install[*]}" > $depsfile
        sudo pacman -S "${install[@]}"
    fi
}

RemoveInstalledDeps() {
    local -r pkgname_dir="$1"
    local depsfile="$2"
    local remove=$( test -r $depsfile && cat $depsfile )

    if [ -n "$remove" ]  ; then
        local list=$(printf "   %s\n" $remove)
        printf "Package %s, removing dependencies:\n%s\n" "$pkgname_dir" "$list" >&2
        echo "Removing dependencies $remove:" >&2
        sudo pacman -R $remove
    fi
}

ShowChangelogs() {
    if [ $show_changelog = yes ] ; then
        local urls=() pkg
        local pkgs=()
        if [ $show_changelog_all = yes ] ; then
            pkgs=("${PKGNAMES[@]}")               # show all supported packages
        else
            pkgs=("${changelog_pkgs[@]}")         # show only changed packages
        fi
        for pkg in "${pkgs[@]}" ; do
            [ -n "${PKG_CHANGELOG[$pkg]}" ] && urls+=("${PKG_CHANGELOG[$pkg]}")
        done
        if [ ${#urls[@]} -gt 0 ] ; then
            firefox "${urls[@]}"
        fi
    fi
}

tar-name-components() {
    # show components of names as of the output of:
    sed -E 's/([a-zA-Z0-9@_+][a-zA-Z0-9@._+-]+)-([0-9:]*[^:/\-\ \t]+)-([0-9\.]+)/\1|\2-\3/'
}

#### Backwards compatibility stuff:
# VERSION_COMPAT == 0:
Add_before-after_func()  { Add_BeforeAfter_func "$@" ; }
PutPkgbuildValueSimple() { PutPkgbuildValue "$@" ; }

Main() {
    local progname="local-repo-manager"
    local conf="/etc/$progname.conf"

    # to be filled by the config file
    local REPONAME=""             # the reponame for /etc/pacman.conf
    local SIGNER=""               # the package signer, for option --local-user in gpg
    local WORKDIR=""              # where the package building occurs
    local PACKAGED_BY=""          # who built the packages (gpg)
    local PKGNAMES=()             # AUR package names for the local repo
    local VERSION_COMPAT=0        # compatibility of the config file, 0=first
    declare -A PKG_BEFORE_AFTER   # package specific functions before and after 'makepkg' (like constructor and destructor in C++)
    declare -A MAKEPKG_EXTRA_OPTS
    declare -A PKG_CHANGELOG

    source "$conf" || return 1    # $conf file must fill the required variables above

    local repodir="$WORKDIR"                              # usually the same as $PWD
    local pkgbuilddir="$repodir/PKGBUILDS"                # contains temporary AUR dirs
    local localroot="$repodir/LOCAL"                      # contains permanent local dirs, don't delete any!
    local buildlog="$HOME/.cache/$progname.buildlog"
    local errlog="$HOME/.cache/$progname.errlog"
    local build_needed=()
    local changelog_pkgs=()
    local show_changelog=no
    local show_changelog_all=no
    local force_rebuild=no
    local verbose=no
    local add_cache=no
    local dryrun=no
    local remove_deps=no
    local pkgdb=local-repo.db.tar.xz

    cd "$repodir" || DIE "'cd $repodir' failed."

    [ -r "$pkgdb" ] || DIE "$pkgdb not found."

    while [ -n "$1" ] ; do
        case "$1" in
            -h | --help)
                cat <<EOF
Usage:    $progname [options]
Options:
          -h, --help                This help.
          -b, --build               Build updated packages. Default.
          -f, --build-force         Re-build all packages.
          -c, --add-cache           Add built packages to system's package cache.
          -n, --dryrun              Show what would be done, but change nothing. Implies --verbose.
          -v, --verbose             More verbose output.
          -c, --changelog-included  Show changelogs of changed packages.
          --changelog-all           Show changelogs of all supported packages.
          --rmdeps                  Remove dependencies installed during build.
          --rm-pkg                  Remove a package from the repo database.
EOF
                exit 0
                ;;
            --dump-options)
                local options=(
                    --add-cache
                    --build
                    --build-force
                    --changelog-all
                    --changelog-included
                    --dryrun
                    --help
                    --rm-pkg
                    --rmdeps
                    --verbose
                )
                echo "${options[*]}"
                exit 0
                ;;
            -c | --changelog-included | --changelog-all)
                [ "$1" = "--changelog-all" ] && show_changelog_all=yes
                if [ ${#PKG_CHANGELOG[@]} -gt 0 ] ; then
                    show_changelog=yes
                    if [ $show_changelog_all = yes ] ; then
                        ShowChangelogs
                    fi
                else
                    INFO "sorry, PKG_CHANGELOG array is not available"
                fi
                [ $show_changelog_all = yes ] && exit 0
                ;;
            -f | --build-force)
                force_rebuild=yes
                ;;
            -v | --verbose)
                verbose=yes
                ;;
            -c | --add-cache)
                add_cache=yes
                ;;
            -n | --dryrun | --dryrun-local)
                dryrun=yes
                verbose=yes
                ;;
            -b | --build)
                [ $dryrun = yes ] && INFO "you had option --dryrun, setting it to 'no'."
                dryrun=no
                ;;
            --rmdeps)
                remove_deps=yes
                ;;
            --rm-pkg)
                local pkgname="$2"
                [ -n "$pkgname" ] || DIE "no package name for option $1"
                shift
                local pkgs=$($FUNCNAME --dump-db-pkgs)
                if echo "$pkgs" | grep "$pkgname" >/dev/null; then
                    repo-remove "$pkgdb" "$pkgname"
                    exit
                else
                    DIE "package '$pkgname' is not in the database '$pkgdb'"
                fi
                ;;
            --dump-db-pkgs)
                tar -tf "$pkgdb" | grep -v /desc$ | sed 's|/$||' | tar-name-components | column -t -s"|" | awk '{print $1}'
                exit 0
                ;;
        esac
        shift
    done

    local helper_Sia="yay -Sia"   # because yay does this faster than paru
    local helper_Ga="paru -Ga"    # because yay does not detect failure as it should

    [ -n "$REPONAME" ]        || DIELINE "REPONAME in the config file is empty or not set"
    [ -n "$WORKDIR" ]         || DIELINE "WORKDIR is missing, cannot build packages"
    [ ${#PKGNAMES[@]} -gt 0 ] || DIELINE "PKGNAMES array in the config file is empty or not set"

    [ -n "$PACKAGED_BY" ]     && export PACKAGER="$PACKAGED_BY"

    FetchPkgbuilds
    echo2v ""

    ShowChangelogs

    BuildPackages
}

Main "$@"
