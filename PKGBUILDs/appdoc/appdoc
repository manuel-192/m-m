#!/bin/bash
#
# Retuns a URL for an app.
# The URL contains information about the app.
#
# Examples:
#    appinfourl                         # shows supported apps and URLs
#    appinfourl virtualbox              # shows the URL where virtualbox info is found
#    firefox $(appinfourl virtualbox)   # shows virtualbox manual
#



DIE() {
    echo "$progname: error: $1"
    exit 1
}

ShowAllItems() {
    local app url
    echo "Supported apps and related URLs"
    while true ; do
        echo "name URL URL2"
        echo "~~~~ ~~~ ~~~~"
        for app in "${Items[@]}" ; do
            local -n urls=$app
            printf "%s" "$app"
            for url in "${urls[@]}" ; do
                printf " %s" "$url"
            done
            printf "\n"
        done
        break
    done | column -t | sed 's|^|    |' | /usr/bin/less -RF
}

ShowAppUrl() {
    local app2="$1"
    local app url
    for app in "${Items[@]}" ; do
        if [ "$app" = "$app2" ] ; then
            local -n urls=$app
            if [ "$local_first" = "yes" ] ; then
                url="${urls[1]}"
                if [ ! -r "$url" ] ; then
                    url="${urls[0]}"
                fi
            else
                url="${urls[0]}"
            fi
            if [ -n "$url" ] ; then
                echo "$url"
            fi
            return
        fi
    done
}

Fetch() {
    local tmpfile="$1"
    local url="$2"
    local result=0

    wget -q -O "$tmpfile" "$url"
    result=$?
    if [ $result -ne 0 ] ; then
        DIE "wget $tmpfile failed, code $result."
    fi
}

UpdateLocalDocs() {
    source /usr/share/endeavouros/scripts/eos-script-lib-yad || exit 1  # for EOS_ROOTER
    local app url
    local tmpdir=$(/usr/bin/mktemp -d)
    local tmpfile
    local cmds=""

    echo "Updating local docs..." >&2

    /usr/bin/mkdir -p $tmpdir

    for app in "${Items[@]}" ; do
        local -n urls=$app
        if [ -n "${urls[1]}" ] && [[ "${urls[1]}" =~ \.html$ ]] ; then
            echo "$app"
            tmpfile="$tmpdir/$(basename "${urls[1]}")"
            Fetch "$tmpfile" "${urls[0]}"
            [ -n "$cmds" ] && cmds+="; "
            cmds+="mkdir -p /usr/share/doc/$app; cp $tmpfile /usr/share/doc/$app/"
        fi
    done
    [ -n "$cmds" ] && $EOS_ROOTER "$cmds"

    /usr/bin/rm -rf $tmpdir
}

Variables() {
    # adjust variables if they are not OK

    local xx

    xx=$(echo "$browser" | /usr/bin/awk '{print $1}')
    if [ -n "$(/usr/bin/which "$xx" 2>/dev/null)" ] ; then
        return
    fi

    for xx in /usr/bin/exo-open /usr/bin/xdg-open ; do
        /usr/bin/which "$xx" >& /dev/null && {
            browser="$xx"
            return
        }
    done
    DIE "no browser found."
}

Options() {
    local opts
    local optnames_long=apps,browser:,help,options,remote-first,update
    local optnames_short=hru

    opts="$(/usr/bin/getopt -o=$optnames_short --longoptions $optnames_long --name "$progname" -- "$@")" || {
        Options --help
        exit 1
    }

    eval set -- "$opts"

    while true ; do
        case "$1" in
            --apps)                      # useful for bash completion!
                printf "%s\n" "${Items[@]}"
                exit 0
                ;;
            --browser)
                browser="$2"
                shift
                ;;
            --options)                    # useful for bash completion!
                printf "%s " "$optnames_long"  | /usr/bin/sed -e 's|,| --|g' -e 's|^|--|' -e 's|:||g'
                echo "$optnames_short" | /usr/bin/sed -e 's|\([a-z]\)| -\1|g' -e 's|:||g'
                exit 0
                ;;
            --remote-first | -r)
                local_first=no
                ;;
            --update | -u)
                UpdateLocalDocs
                exit 0
                ;;

            --help | -h)
                cat <<EOF >&2
Usage: $progname [options] [appname]
Options:
  --apps           Show supported app names. Helps bash completion.
  --options        Show all options. Helps bash completion.
  --update         Update local docs from the internet.
  -u               -"-
  --remote-first   Show Internet docs instead of local docs.
  -r               -"-
  --help           Show this help.
  -h               -"-
Params:
  appname          Name of the application whose info URL shows.
                   Without appname all supported apps and URLs will be shown.
EOF
                exit 0
                ;;
            
            --) shift ; break ;;
        esac
        shift
    done

    application="$1"
}

Main() {
    local progname="$(/usr/bin/basename "$0")"
    local application=""
    local local_first=yes
    local browser=xdg-open
    local db=appdoc.data
    local databases=(
        "$HOME/.config/$db"
        "/etc/$db"
    )
    local url

    for db in "${databases[@]}" ; do
        if [ -r "$db" ] ; then
            source "$db" || DIE "reading database file '$db' failed."
            break
        fi
    done

    Options "$@"
    Variables

    if [ -n "$application" ] ; then
        url="$(ShowAppUrl "$application")"
        $browser $url 2>/dev/null &
    else
        ShowAllItems
    fi
}

Main "$@"
