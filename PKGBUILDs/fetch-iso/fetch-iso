#!/bin/bash

echo2() { echo "$@" >&2 ; }
DIE() {
    echo2 "$progname: error: $1"
    [ "$2" ] && exit "$2" || exit 1
}

GetInfoPage() {
    # Make sure the download data is stored in a local file.
    if [ ! -e $datafile ] ; then
        case "$getter" in
            curl) /bin/curl --fail -Lsm 30 -o$datafile -u "$HELLO" $URLBASE                      || DIE "failed fetching the info page '$URLBASE'." ;;
            wget) /bin/wget -qO $datafile --user "${HELLO%:*}" --password "${HELLO#*:}" $URLBASE || DIE "failed fetching the info page '$URLBASE'." ;;
        esac
        [ "$1" != "-q" ] && echo2 "==> Info about available downloads refreshed."
    fi
}

RefreshInfo() {
    rm -f $datafile
    GetInfoPage "$@"
}

ShowFiles() {
    # Show downloadable files from the fetched download page.
    RefreshInfo "$@"
    grep EndeavourOS[-_] $datafile | sed -E 's|.*">(En.*)</a.*|\1|'                                  # all downloads

    # grep 'x86_64\.iso<' $datafile | sed -E 's|.*">(.*x86_64\.iso)<.*|\1|'                          # .iso
    # grep 'x86_64\.iso\.sha512sum<' $datafile | sed -E 's|.*">(.*x86_64\.iso\.sha512sum)<.*|\1|'    # .iso.sha512sum
    # grep "\-iso\.tar\.gz" $datafile | sed -E 's|.*">(.*-iso\.tar\.gz)<.*|\1|'                      # -iso.tar.gz
}

FetchIsoFile() {
    # Fetch the given ISO file.
    echo2 "==> Downloading..."
    local file="$1"
    case "$getter" in
        curl) /bin/curl --fail -m 300 --remote-name-all -u "$HELLO" "$URLBASE/$file" || exitcode=$?
              [ $exitcode = 0 ] || DIE "downloading $URLBASE/$file failed, exit code $exitcode from 'curl'" "$exitcode"
              ;;
        wget) /bin/wget -q --show-progress --user "${HELLO%:*}" --password "${HELLO#*:}" "$URLBASE/$file" || exitcode=$?
              [ $exitcode = 0 ] || DIE "downloading $URLBASE/$file failed, exit code $exitcode from 'wget'" "$exitcode"
              ;;
    esac
}

Usage() {
    cat <<EOF

Usage: $progname [options] [filename]

Options:
    -h, --help           This help.

Tip1: Without parameters a selection of downloadable files is presented (using fzf).
Tip2: Use bash completion (by pressing the TAB key on the command line) to get the file to download.

EOF
}

Main() {
    local -r progname=${0##*/}
    local -r config="$HOME/.config/$progname.conf"
    local URLBASE=""
    local HELLO=""
    local APP=""
    local exitcode=0
    local file
    local datafile=/tmp/$progname.tmp   # remove this if new files should be available
    local getter=wget                   # curl or wget

    # config file sets important values
    source "$config" || DIE "file $config has a problem"

    [ "$URLBASE" ]   || DIE "URLBASE has no value in $config"
    [ "$HELLO" ]     || DIE "HELLO has no value in $config"
    [ "$APP" ]       && getter="$APP"

    case "$getter" in
        curl | wget) [ -x /bin/$getter ] || DIE "$getter not installed" ;;
        *) DIE "value '$getter' for APP in $config is not supported. Use either 'wget' or 'curl'." ;;
    esac

    if [ "$1" ] ; then
        while [ "$1" ] ; do
            case "$1" in
                --dump-options)   echo "--help --show-files" ;;      # for bash completion
                --show-files)     printf "%s\n" $(ShowFiles -q) ;;   # for bash completion
                --help)           Usage; exit 0 ;;
                -*)               DIE "option '$1' not supported." ;;
                *.iso.tar.gz | *.iso | *.iso.sha512sum)
                                  FetchIsoFile "$1"
                                  ;;
                *)                DIE "sorry, only *.iso.tar.gz files are supported."
            esac
            shift
        done
    else
        local fzf=(
            fzf --exact +i --tac
            --header="Navigation: Up, Down, PgUp, PgDn; ENTER=accept, ESC=quit"
        )
        if true ; then
            local selected=$(${progname}-show-all-info | "${fzf[@]}" )
            selected=${selected%% *}
        else
            local selected=$(ShowFiles -q | "${fzf[@]}" )
        fi
        if [ "$selected" ] ; then
            read -p "Download $selected now (Y/n)? "
            case "$REPLY" in
                "" | [Yy]*) FetchIsoFile $selected ;;
                *) return 1 ;;
            esac
        else
            DIE "nothing selected"
        fi
    fi

    # Exit code:
    #    0       download OK
    #    else    failure, nothing downloaded
}

Main "$@"
