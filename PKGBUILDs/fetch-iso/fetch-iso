#!/bin/bash

echo2() { echo "$@" >&2 ; }
DIE() {
    echo2 "$progname: error: $1"
    [ "$2" ] && exit "$2" || exit 1
}

GetInfoPage() {
    # Make sure the download data is stored in a local file.
    if [ ! -e $datafile ] ; then
        case "$getter" in
            curl) /bin/curl --fail -Lsm 30 -o$datafile -u "$HELLO" $URLBASE                 || DIE "failed fetching the info page '$URLBASE'." ;;
            wget) /bin/wget -qO $datafile --user "$ACCOUNT" --password "$PASSWORD" $URLBASE || DIE "failed fetching the info page '$URLBASE'." ;;
        esac
        [ "$1" != "-q" ] && echo2 "==> Info about available downloads refreshed."
    fi
}

RefreshInfo() {
    rm -f $datafile
    GetInfoPage "$@"
}

ShowFiles() {
    # Show downloadable files from the fetched download page.
    RefreshInfo "$@"
    grep EndeavourOS[-_] $datafile | sed -E 's|.*">(En.*)</a.*|\1|'             # all downloads
}

FetchIsoFile() {
    # Fetch the given ISO file.
    echo2 "==> Downloading..."
    local targetopt=""
    local file="$1"
    case "$getter" in
        curl)
            [ "$TARGETDIR" ] && targetopt="-o$TARGETDIR/$file"
            /bin/curl --fail -m 300 --remote-name-all "$targetopt" -u "$HELLO" "$URLBASE/$file" || exitcode=$?
            [ $exitcode = 0 ] || DIE "downloading $URLBASE/$file failed, exit code $exitcode from 'curl'" "$exitcode"
            ;;
        wget)
            [ "$TARGETDIR" ] && targetopt="-O$TARGETDIR/$file"
            /bin/wget -q "$targetopt" --show-progress --user "$ACCOUNT" --password "$PASSWORD" "$URLBASE/$file" || exitcode=$?
            [ $exitcode = 0 ] || DIE "downloading $URLBASE/$file failed, exit code $exitcode from 'wget'" "$exitcode"
            ;;
    esac
}

Usage() {
    cat <<EOF

Usage: $progname [options] [filename]

Options:
    -h, --help           This help.

Tip1: Write a config file at ~/.config/$progname.conf. It must contain variables
      URLBASE, ACCOUNT, PASSWORD, and optionally TARGETDIR with their proper values.
      Alternatively, variable HELLO can replace values "\$ACCOUNT:\$PASSWORD".
Tip2: Without parameters a selection of downloadable files is presented (using fzf).
Tip3: Use bash completion (by pressing the TAB key on the command line)
      to get the file to download.

EOF
}

AskValue() {
    local -r prompt="$1"
    local -r varname="$2"
    local -r defaultval="$3"
    local value=""

    read -p "$prompt : " value >&2
    case "$value" in
        "") value="$defaultval" ;;
        [qQ]) exit 0 ;;
    esac
    [ "$value" ] || DIE "$varname needs a value!"
    values+=("$varname=\"$value\"")
}

AskConfigValues() {
    cat <<EOF >&2
Config file $configfile not found,
creating it by asking the required values.

EOF
    local values=()
    local dldir="$HOME/Downloads" dl=""
    [ -d "$dldir" ] && dl=" ($dldir)"

    AskValue "Remote base dir URL"            URLBASE   ""
    AskValue "Remote account"                 ACCOUNT   ""
    AskValue "Local download folder$dl"       TARGETDIR "$dldir"
    AskValue "Downloader app (wget)"          APP       "wget"

    printf "%s\n" "${values[@]}" > "$configfile"
}

Main() {
    local -r progname=${0##*/}
    local -r configfile="$HOME/.config/$progname.conf"
    local URLBASE=""
    local HELLO=""
    local ACCOUNT="" PASSWORD=""
    local APP=""
    local TARGETDIR=""
    local exitcode=0
    local file
    local datafile=/tmp/$progname.tmp   # remove this if new files should be available
    local getter=wget                   # curl or wget

    # config file sets important values
    [ -e "$configfile" ] || AskConfigValues
    echo2 "Reading file $configfile ..."
    source "$configfile" || DIE "file $configfile has a problem"
    [ "$URLBASE" ]       || DIE "URLBASE has no value in $configfile"
    if [ "$HELLO" ] ; then
        ACCOUNT="${HELLO%:*}"
        PASSWORD="${HELLO#*:}"
    elif [ "$ACCOUNT$PASSWORD" ] ; then
        HELLO="$ACCOUNT:$PASSWORD"
    else
        DIE "HELLO or ACCOUNT/PASSWORD have no proper value in $configfile"
    fi
    [ "$APP" ] && getter="$APP"
    [ "$TARGETDIR" ] || TARGETDIR="."
    [ -d "$TARGETDIR" ] || DIE "$TARGETDIR is not a folder"
    [ -w "$TARGETDIR" ] || DIE "cannot write to TARGETDIR ($TARGETDIR)"

    case "$getter" in
        curl | wget) [ -x /bin/$getter ] || DIE "$getter not installed" ;;
        *) DIE "value '$getter' for APP in $configfile is not supported. Use either 'wget' or 'curl'." ;;
    esac

    echo2 "Download folder: $TARGETDIR"

    if [ "$1" ] ; then
        while [ "$1" ] ; do
            case "$1" in
                --dump-options)   echo "--help --show-files" ;;      # for bash completion
                --show-files)     printf "%s\n" $(ShowFiles -q) ;;   # for bash completion
                -h | --help)      Usage; exit 0 ;;
                -*)               DIE "option '$1' not supported." ;;
                *.iso.tar.gz | *.iso | *.iso.sha512sum)
                                  FetchIsoFile "$1"
                                  ;;
                *)                DIE "sorry, only *.iso.tar.gz files are supported."
            esac
            shift
        done
    else
        local fzf=(
            fzf --exact +i --tac
            --header="Navigation: Up, Down, PgUp, PgDn; ENTER=accept, ESC=quit"
        )
        if true ; then
            local selected=$(${progname}-show-all-info | "${fzf[@]}" )
            selected=${selected%% *}
        else
            local selected=$(ShowFiles -q | "${fzf[@]}" )
        fi
        if [ "$selected" ] ; then
            read -p "Download $selected now (Y/n)? "
            case "$REPLY" in
                "" | [Yy]*) FetchIsoFile $selected ;;
                *) return 1 ;;
            esac
        else
            DIE "nothing selected"
        fi
    fi

    # Exit code:
    #    0       download OK
    #    else    failure, nothing downloaded
}

Main "$@"
