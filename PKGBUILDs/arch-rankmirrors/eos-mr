#!/bin/bash

echo2()       { echo "$@" >&2; }
DIE()         { echo2 -e "==> $progname: error:\n    $1"; Usage; exit 1; }
WARN()        { echo2 -e "==> $progname: warning: $1"; }

GetCurrentCountry() { cc="$(show-location-info country)"; [ "$cc" ] ; }

GetContinentOfCountry() {
    local countrycode="${1^^}"   # uppercase
    GetContinents
    echo "$countries_continents" | grep -w "$countrycode" | awk '{print $2}'
}
GetContinents() {
    [ "$countries_continents" ] || countries_continents=$(location list-countries --show-continent)
}
ShowContinentCountries() {
    local continent="$1"
    local show="$2"       # name or code
    if [ -x /bin/location ] ; then
        [ "$cc" ] || GetCurrentCountry
        GetContinents
        local cont_country_codes=$(echo "$countries_continents" | grep "$continent" | awk '{print $1}')
        local code
        GetCountries
        case "$show" in
            code)
                # echo "$cont_country_codes"
                for code in $cont_country_codes ; do
                    echo "$reflector_list_countries" | grep "$code" | awk '{print $(NF-1)}'
                done
                ;;
            name)
                local name
                for code in $cont_country_codes ; do
                    name=$(echo "$reflector_list_countries" | grep "$code" | sed -E 's|([A-Z].+[a-z]) .*|"\1"|')
                    [ "$name" ] && echo "$name"
                done
                ;;
        esac
        return 0
    else
        WARN "package 'python-location' is required for this operation"
        return 1
    fi
}
ListCountryCodes() {
    GetCountries
    echo "$reflector_list_countries" | awk '{print $(NF-1)}'
    exit 0
}
ListCountryNames() {
    GetCountries
    echo "$reflector_list_countries" | sed -E 's|([A-Z].+[a-z]) .*|"\1"|'
    exit 0
}
GetCountries() {
    local timeinfo="$HOME/.cache/$progname/timeinfo.txt"
    local now=$(date +%j)
    
    if [ -z "$reflector_list_countries" ] || [ "$(< "$timeinfo")" != "$now" ] ; then
        reflector_list_countries=$(reflector --list-countries) || DIE "cannot get list of countries"
        reflector_list_countries=$(echo "$reflector_list_countries" | tail -n +3)
    fi
}

TraverseMirrors-parallel() {
    echo2 "==> $progname: ranking mirrors in parallel"
    local timeout_rank=10
    local mirrors_with_statefiles=$(echo "$mirrors" | sed "s|/\$repo/os/\$arch|/$syncfile|")
    echo "$mirrors_with_statefiles" | parallel "eos-mr-rank-mirror {} $timeout_rank $distro $time_as_datetime"
}

TraverseMirrors-sequential() {
    echo2 "==> $progname: ranking mirrors in sequence"
    local timeout_rank=10
    local mirror
    local ix=1
    local count=$(echo "$mirrors" | wc -l)

    for mirror in $mirrors ; do
        mirror="${mirror%%/\$repo/os/\$arch}/$syncfile"
        printf "\r==> ranking %s/$count" $((ix++)) >&2
        eos-mr-rank-mirror "$mirror" $timeout_rank $distro $time_as_datetime
    done
    echo2 ""
}

DumpOptions() {
    if [ "$lopts" ] ; then
        lopts=${lopts//:/}          # remove all : chars
        lopts="--${lopts//,/ --}"   # make all words as options with prefix "--"
    fi
    if [ "$sopts" ] ; then
        sopts=${sopts//:/}          # remove all : chars
        sopts=${sopts//?/ -&}       # make all letters as options with prefix "-"
        sopts=${sopts:1}            # remove the first space
    fi

    [ "$lopts$sopts" ] && echo $lopts $sopts
}

Usage() {
    cat <<EOF
Rank Arch mirrors.

Usage: $progname [options] [URLs]

Options:
    --help                     This help.
    --country <country-list>   A comma separated list of country code(s) for ranking their mirrors.
                               Case insensitive. Example: "--country de,gb".
    --country-current          Add current country code for mirrors to rank.
    --list-country-codes       Show available country codes. See also: 'reflector --list-countries'.
    --ranking-data             Show ranking data too.
    --show-continent-countries Show the country codes of a continent based on given country code.

URLs:                          URL(s) of mirrors to rank.
EOF
}

Options() {
    local opts
    local lopts="country:,country-current,distro:,dump-options,help,list-country-codes,list-country-names,ranking-data"
    lopts+=",show-continent-countrycodes:,show-continent-countrynames:"
    lopts+=",show-current-continent-countrycodes,show-current-continent-countrynames,current-continent"
    local sopts="c:d:hlr"

    opts="$(/usr/bin/getopt -o=$sopts --longoptions $lopts --name "$progname" -- "$@")" || DIE "getopt error"
    eval set -- "$opts"

    while true ; do
        case "$1" in
            --) shift; break ;;
            -h | --help)            Usage; exit 0 ;;
            -c | --country)         tmp="${2^^}"; countries+=( ${tmp//,/ } ); shift ;;   # must be country codes!
            -l | --country-current) GetCurrentCountry && countries+=($cc) ;;
            --current-continent)    # rank all countries in the current continent
                Options -c $(echo $(Options --show-current-continent-countrycodes) | tr ' ' ',')
                ;;
            -d | --distro)          distro="$2"; shift ;;
            -r | --ranking-data)    ranking_data=yes ;;
            --dump-options)         DumpOptions; exit 0 ;;
            --list-country-codes)   ListCountryCodes; exit 0 ;;
            --list-country-names)   ListCountryNames; exit 0 ;;
            --show-continent-countrycodes) ShowContinentCountries "$2" code; exit ;;
            --show-continent-countrynames) ShowContinentCountries "$2" name; exit ;;
            --show-current-continent-countrycodes)
                GetCurrentCountry && ShowContinentCountries "$(GetContinentOfCountry $cc)" code
                exit
                ;;
            --show-current-continent-countrynames)
                GetCurrentCountry && ShowContinentCountries "$(GetContinentOfCountry $cc)" name
                exit
                ;;
        esac
        shift
    done
    urls+=("$@")
}

Main() {
    local progname=${0##*/}
    local distro=""             # arch or endeavouros
    local urls=() url
    local timeout=10
    local syncfile=""
    local mirrors
    local mirrorlist=""
    local time_as_datetime=no
    local ranking_data=no
    local countries=()          # contains only uppercase country codes
    local cc=""                 # current country
    local countries_continents=""
    local tmp
    local suffix=""
    local reflector_list_countries=""
    local has_parallel=yes

    [ -x /bin/parallel ] || has_parallel=no # DIE "package 'parallel' is required"

    Options "$@"

    case "$distro" in
        "" | arch)
            distro=arch
            if [ ${#countries[@]} -eq 0 ] ; then
                echo2 "==> option --country not used -> automatically adding the current country for ranking, if possible"
                GetCurrentCountry && countries+=($cc) && echo2 "==> added: $cc" || DIE "no countries given for ranking."
            fi
            mirrorlist=/etc/pacman.d/mirrorlist
            syncfile=lastupdate
            time_as_datetime=yes
            suffix='/$repo/os/$arch'
            url="https://archlinux.org/mirrorlist/?protocol=https&ip_version=4&use_mirror_status=on"
            for tmp in "${countries[@]}" ; do
                url+="&country=$tmp"
            done
            mirrors=$(curl -Lsm $timeout "$url" | grep "^#Server = " | awk '{print $NF}')
            ;;
        endeavouros)
            DIE "sorry, waiting for implementation!"
            mirrorlist=/etc/pacman.d/endeavouros-mirrorlist
            syncfile=state
            suffix='/$repo/$arch'
            # TODO: fetch endeavouros-mirrorlist !!
            mirrors=$(grep "^Server[ \t]*=[ \t]*" "$mirrorlist" | awk '{print $NF}')
            ;;
        *)  DIE "distro $distro not supported." ;;
    esac

    case "$has_parallel" in
        yes) result=$(TraverseMirrors-parallel) ;;
        no)  result=$(TraverseMirrors-sequential) ;;
    esac

    local ranked=$(echo "$result" | column -t -s'|' | LC_ALL=C sort -k2rb,2 -k3b,3)   # sort: age

    ShowMirrorlist    "\n### ${distro^} mirror list, ranked by command:\n### $progname $*\n"
    ShowRankingResult "\n### Ranking data:"
}

ShowMirrorlist()    { echo -e "$1"; echo "$ranked" | awk '{print $1}' | sed -E "s|(.*)|Server = \1$suffix|"; }
ShowRankingResult() { [ $ranking_data = yes ] && { echo -e "$1"; echo "$ranked" | sed -E "s|^([^ ]+)|### \1$suffix|"; } ; }

Main "$@"
