#!/bin/bash

DIE() {
    local progname="$(basename "$0")"
    echo "$progname: error:" "$@" >&2
    exit 1
}

_Build_pkgname-pkgver-pkgrel() {
    source PKGBUILD
    echo "$pkgname"-"$pkgver"-"$pkgrel"
}

Build() {
    [ -r PKGBUILD ] || DIE "PKGBUILD not found."

    local makepkg_opts=""
    local pacman_opts=""                               # "--asdeps"  # ???
    local pkgname="$(_Build_pkgname-pkgver-pkgrel)"
    local old_pkgs=(${pkgname}-*.pkg.tar.zst)

    # manage options for makepkg and pacman
    while true ; do
        case "$1" in
            --makepkg=* | -m=*) makepkg_opts="${1#*=}"   ;;
            --pacman=*  | -p=*) pacman_opts="${1#*=}"    ;;
            *)                  makepkg_opts="$*"; break ;;   # backwards compatibility!
        esac
        shift
    done

    [ "${old_pkgs[*]}" != "${pkgname}-*.pkg.tar.zst" ] && rm -i "${old_pkgs[@]}"

    case "$pkgname" in
        eos-apps-info-*) ./eos-apps-info-collect ;;  # update actual html pages before build
    esac

    local updatesums=yes

    if [ -z "$(grep "[ ]*sha[0-9]*sums" PKGBUILD)" ] ; then
        read -p "No checksums in PKGBUILD. Run 'updpkgsums' anyway (y/N)? "
        case "$REPLY" in
            "" | [nN]*) updatesums=no ;;
        esac
    fi
    if [ "$updatesums" = "yes" ] ; then
        updpkgsums || DIE "updpkgsums failed."
    fi
    makepkg -cf $makepkg_opts || DIE "makepkg failed."

    local files=(${pkgname}-*.pkg.tar.zst)

    [ "${files[*]}" = "${pkgname}-*.pkg.tar.zst" ] && DIE "nothing was built for '$pkgname'"

    echo "Install ${file[*]}:"
    sudo pacman $pacman_opts -U "${files[@]}"
    read -p "Delete ${files[*]} (Y/n)? "
    case "$REPLY" in
        "" | [yY]*) rm -f "${files[@]}" ;;
    esac

    # user file './.destructor' can do post-build stuff, e.g. cleanup
    [ -x ./.destructor ] && ./.destructor
}

Build "$@"
