#!/bin/bash

# Arch and EndeavourOS update checks using only lastupdate and state files.
# Assumption: the lastupdate file is NOT abused by making it equal to lastsync.
# Exit code is similar to 'checkupdates'.

Main()
{
    local progname=${0##*/}
    local os
    local ml
    local file
    local verbose=no
    local save=no
    local ret_arch=2
    local ret_eos=2
    local ret_aur=2

    [ "$1" ] || { Usage; exit 1; }

    for arg in "$@" ; do
        case "$arg" in
            -s | --save) save=yes ;;
            --verbose)   verbose=yes ;;
        esac
    done

    while [ "$1" ] ; do
        case "$1" in
            -a | --arch)
                os=Arch
                ml=mirrorlist
                file=lastupdate
                Main2 -a
                ret_arch=$?
                ;;
            -e | --endeavouros)
                os=EndeavourOS
                ml=endeavouros-mirrorlist
                file=state
                Main2 -e
                ret_eos=$?
                ;;
            -y | --aur)
                yay -Qua && ret_aur=0
                ;;
            -s | --save) ;;           # already handled above
            --verbose) ;;             # already handled above
            *)
                Usage
                exit 1
                ;;
        esac
        shift
    done
    if [ $ret_arch -eq 0 ] || [ $ret_eos -eq 0 ] || [ $ret_aur -eq 0 ] ; then
        return 0
    fi
    return 2
}

Usage() {
    cat <<EOF
Usage: $progname [option] {operations}
Options:
    --verbose            More verbose output.
    -s, --save           Save lastupdate, do nothing more.
Operations:
    -a, --arch           Check Arch package updates.
    -e, --endeavouros    Check EndeavourOS package updates.
    -y, --aur            Check AUR package updates.

EOF
}

Main2() {
    declare -A renamedos=(
        [EndeavourOS]=x
        [Arch]=y
    )
    declare -A renamedfile=(
        [state]=X
        [lastupdate]=X
    )
    local lastupdate_prev="/tmp/.uc-${renamedos[$os]}-${renamedfile[$file]}"
    local lastupdate="${lastupdate_prev}.new"

    if [ $save = yes ] ; then
        if [ -f "$lastupdate" ]  ; then
            rm -f "$lastupdate_prev"            || DIE "save: removing old db failed."
            mv "$lastupdate" "$lastupdate_prev" || DIE "save: saving new db failed."
        fi
        return 2
    fi

    local url
    url=$(grep "^Server = " /etc/pacman.d/$ml | head -n1)
    url=${url#*= }
    case "$os" in
        EndeavourOS) url=${url%\$repo/\$arch}$file ;;
        Arch)        url=${url%\$repo/os/\$arch}$file ;;
    esac

    [ $verbose = yes ] && echo "Check using $url:"
    curl --fail -Lsm 10 -o- "$url" | head -n1 > "$lastupdate" || return 1

    local updates ret=2

    if [ -f "$lastupdate_prev" ] ; then
        if diff "$lastupdate" "$lastupdate_prev" >/dev/null ; then
            [ $verbose = yes ] && echo "No ${os} updates." >&2
        else
            # Make sure we really have native updates!
            # Note that now we do not separate Arch and EndeavourOS packages...
            updates=$(checkupdates)
            ret=$?

            if [ $verbose = yes ] && [ $ret -eq 0 ] ; then
                echo "Native updates are available." >&2
            fi
            if [ $save = yes ] || [ $ret -ne 0 ] ; then
                rm -f "$lastupdate_prev"            || DIE "removing old db failed."
                mv "$lastupdate" "$lastupdate_prev" || DIE "saving new db failed."
            fi
        fi
    else
        mv "$lastupdate" "$lastupdate_prev" || DIE "saving first new db failed."
        updates=$(checkupdates)
        ret=$?

        if [ $verbose = yes ] && [ $ret -eq 0 ] ; then
            echo "Native updates are available." >&2
        fi
    fi
    rm -f "$lastupdate" || DIE "removing temporary db failed."
    return $ret
}

DIE() {
    echo "$progname: error: $1" >&2
    exit 1
}

Main "$@"
