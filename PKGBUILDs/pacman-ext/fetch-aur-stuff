#!/bin/bash

# Usage: $progname <names-of-repos>

echo2()   { echo -e "$@" >&2; }
printf2() { printf "$@" >&2; }
DIE()   { echo2 "$progname: error: $1" ; exit 1; }
WARN()  { echo2 "$progname: warning: $1" ; }

ListPkgs() {
    local -r assetsfile="$1"
    source "$assetsfile" 2>/dev/null || DIE "$FUNCNAME: 'source $assetsfile' failed"
    printf "%s\n" "${PKGNAMES[@]}" | grep /aur | sed 's|/aur.*||' | sort -u
}

CD() { cd "$@" >/dev/null || DIE "'cd $*' failed" ; }

Fetch() {
    local -r reponame="$1"
    [ "$reponame" ] || DIE "$FUNCNAME: reponame is empty"
    shift
    [ "$1" ]        || { WARN "$FUNCNAME: no packages listed"; return; }

    echo2 "$reponame:"
    mkdir -p "$reponame"
    CD "$reponame"
    aur-pkgs-fetch --verbose "$@"
    CD -
}

PkgsLocalRepo() {
    local conf=/etc/local-repo-manager.conf
    source $conf 2>/dev/null
    local item
    for item in "${PKGNAMES[@]}" ; do
        case "$item" in
            */aur) echo "${item%/aur}" ;;
        esac
    done
}

Main() {
    local progname=${0##*/}
    local packages=()
    local reponame

    [ "$1" ]              || DIE "no reponames listed"
    [ "$AURSRCDIR" ]      || DIE "variable AURSRCDIR is empty"
    mkdir -p "$AURSRCDIR" || DIE "cannot create '$AURSRCDIR'"
    cd "$AURSRCDIR"       || DIE "'cd $AURSRCDIR' failed"

    for reponame in "$@" ; do
        case "$reponame" in
            local-repo)
                echo2 "$reponame"
                mkdir -p "$reponame" || DIE "cannot create '$AURSRCDIR/$reponame'"
                local pkgs=($(PkgsLocalRepo))
                local dir
                for dir in "${pkgs[@]}" ; do
                    if [ -d "$reponame/$dir" ] ; then
                        CD "$reponame/$dir"
                        printf2 "    %-25s git pull: " "$dir"
                        git pull
                    else
                        CD "$reponame"
                        printf2 "    %-25s git clone\n" "$dir"
                        aur-pkgs-fetch "$dir"
                    fi
                    CD -
                done
                ;;
            *)
                packages=( $(ListPkgs /etc/assets.conf.$reponame) )
                Fetch "$reponame" "${packages[@]}"
                ;;
        esac
    done
}

Main "$@"
