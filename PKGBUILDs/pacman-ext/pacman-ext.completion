# bash completion for pacman-ext        -*- shell-script -*-

_pacman-ext_complete() {
    COMPREPLY=($(compgen -W "$1" -- "$cur"))
    [[ $COMPREPLY == *= ]] && compopt -o nospace
    compopt -o nosort
}

_pacman_ext_options() {
    _pacman-ext_complete "$native_options"
    local all=("${COMPREPLY[@]}")
    _pacman "$@"
    COMPREPLY+=("${all[@]}")
    compopt -o nosort
}

_pacman_ext_all() {
    _pacman-ext_complete "$native_options"
    local all=("${COMPREPLY[@]}")

    _pacman "$@"
    COMPREPLY+=("${all[@]}")

#    _pacman_ext_pkgs
#    all=("${COMPREPLY[@]}")
#    COMPREPLY+=("${all[@]}")

    compopt -o nosort
}

_pacman_ext_pkgs() {
    local pkgs="$(expac -S %n)"
    if [ -z "$pkgs" ] ; then
        pkgs="$(yay -Pc | awk '{print $1}' | sort)"
    fi
    _pacman-ext_complete "$pkgs"
}

_pacman-ext_() 
{
    source /usr/share/bash-completion/completions/pacman || return 1

    local cur prev words #cword split
    _init_completion -s || return

    #local native_options="--paru --yay --aur --dg --downgrade --no-banner --show-cmd --wait-enter --build"
    local native_options="$(pacman-ext --show-native-options)"

    # Handle options that need sub-options.
    # Each option "case" should return immediately.

    case "$prev" in
        "") _pacman_ext_options "${words[*]}" ;;
        -*) _pacman_ext_all "${words[*]}" ;;
        *)
            # Handle all top-level parameters.
            case "$cur" in
                "" | -*) _pacman_ext_options "${words[*]}" ;;
                *)
                    # Non-option parameters.
                    _pacman_ext_pkgs
                    ;;
            esac
            ;;
    esac
} &&
complete -F _pacman-ext_ pacman-ext
