#!/bin/bash

# Limited expac for AUR.

DIE() {
    echo "$progname: error: $1" >&2
    exit 1
}

GetSimpleField() {
    line+="$(echo "$data" | grep "^$1[ ]*:" | sed -E "s|^$1[ ]*: (.*)|\1|")"
    format=${format:2}
}

GetListField() {
    out="$(echo "$data" | sed -n "/$1/,/^[A-Z]/p" | head -n -1 | sed -e "s|^$1[ ]*:||" | sed 's|^[ ]*||')"
    format=${format:2}
}

OptionalDeps() {
    local out=""
    GetListField "Optional Deps"
    case "$1" in
        full) ;;
        *)    out=$(echo "$out" | sed 's|:[^:]*$||') ;;  # remove descriptions
    esac
    line+="$(echo $out)"
}

SkipVersionStrings() {
    local out=""
    GetListField "$2"
    case "$1" in
        full) ;;
        *)    out=$(echo "$out" | sed 's|[>=<][^ ]*||') ;;  # remove version strings
    esac
    line+="$(echo $out)"
}

DependsOn()     { SkipVersionStrings "$1" "Depends On" ; }
ConflictsWith() { SkipVersionStrings "$1" "Conflicts With" ; }
Filename()      { line+="${pkg}-$(handle_formats %v-%a)".pkg.tar.zst ; }

handle_formats() {
    local format="$1"
    local line=""
    while [ -n "$format" ] ; do

        # Some formats have not been tested and may fail.

        case "$format" in
            %a*) GetSimpleField "Architecture" ;;      # works
            %B*) GetSimpleField "Backup Files" ;;      # unknown
            %b*) GetSimpleField "Build Date" ;;        # works
            %C*) ConflictsWith ;;                      # works
            %D*) DependsOn full ;;                     # works
            %d*) GetSimpleField "Description" ;;       # works
            %E*) DependsOn ;;                          # works
            %e*) GetSimpleField "Package Base" ;;      # only natives?
            %f*) Filename ;;                           # 
            %F*) GetSimpleField "Files" ;;
            %g*) GetSimpleField "PGP Signature" ;;
            %G*) GetSimpleField "Groups" ;;
            %H*) ConflictsWith full ;;                 # works
            %h*) GetSimpleField "Sha256sum" ;;
            %i*) GetSimpleField "Install Script" ;;
            %k*) GetSimpleField "Download Size" ;;
            %l*) GetSimpleField "Install Date" ;;
            %L*) GetSimpleField "Licenses" ;;
            %m*) GetSimpleField "Installed Size" ;;
            %M*) GetSimpleField "Modified Backup Files" ;;
            %N*) GetSimpleField "Required By" ;;
            %O*) OptionalDeps full ;;
            %o*) OptionalDeps ;;
            %p*) GetSimpleField "Packager" ;;
            %P*) GetSimpleField "Provides" ;;
            %R*) GetSimpleField "Replaces" ;;
            %r*) GetSimpleField "Repository" ;;
            %s*) GetSimpleField "Md5sum" ;;
            %S*) GetSimpleField "Provides" ;;        # no version string ??
            %T*) GetSimpleField "Replaces" ;;
            %u*) GetSimpleField "URL" ;;
            %V*) GetSimpleField "Validation Method" ;;
            %v*) GetSimpleField "Version" ;;
            %w*) GetSimpleField "Install Reason" ;;
            "%!"*) GetSimpleField "Result Number" ;;
            %n*) line+="$pkg";          format=${format:2} ;;
            %%*) line+="%";             format=${format:2} ;;
            *)   line+="${format%%%*}"; format="%${format#*%}" ;;
        esac
    done
    [ "$line" ] && echo "$line"
}

Options() {
    while true ; do
        case "$1" in
            --help|-h)
                cat <<EOF
Usage: $progname [options] <format> targets...
Options:
   -Q, --query    Search the local database for provided targets. This is the default behavior.
   -S, --sync     Search the sync databases for provided targets.
   -v, --verbose  Output more. â€˜Package not found' errors will be shown, and empty field values will display as 'None'.
   -h, --help     Display this help message and quit.

$progname is similar to 'expac' with these exceptions:
- It additionally supports AUR too.
- It supports fewer options.
- Not all planned features are functional just yet.
EOF
                exit
                ;;
            -Q|--query)              op="-Q" ;;
            -S|--sync)               op="-S" ;;
            --verbose|-v)            show_errors=yes ;;
            "%"*)                    format="$1" ;;
            -*)                      DIE "sorry, option '$1' not supported" ;;
            *)                       break ;;
        esac
        shift
    done
    [ "$1" ]         || DIE "no targets"
    [ "$format" ]    || DIE "no format"

    local repo
    for pkg in "$@" ; do
        repo=$(expac -Q "%r" "$pkg")
        case "$repo" in
            "")
                targets_notinstalled+=("$pkg")
                ;;
            local)
                targets_installed+=("$pkg")
                info_found=yes
                repo=$(expac -S "%r" "$pkg")
                [ -z "$repo" ] && repo=aur
                ;;
        esac
    done
}

Main()
{
    local progname=${0##*/}
    local format=""
    local op="-Q"
    local data=""
    local data_all=""
    local show_errors=no
    # local errlog="/tmp/$progname.errlog"
    local errors=()
    local targets_installed=() targets_notinstalled=()
    local pkg
    local info_found=no

    # rm -f "$errlog"

    Options "$@"

    [ ${#targets_installed[@]} -gt 0 ] && expac ${op} "$format" "${targets_installed[@]}"

    if [ ${#targets_notinstalled[@]} -gt 0 ] ; then
        case "$op" in
            -Q)
                [ "$show_errors" = "yes" ] && errors+=("==> using -Q but not installed: ${targets_notinstalled[*]}")
                ;;
            -S)
                data_all="$(LANG=C yay -Si "${targets_notinstalled[@]}" 2>/dev/null)"
                for pkg in "${targets_notinstalled[@]}" ; do
                    data=$(
                        {
                            echo "$data_all" | grep -B1 "^Name[ ]*:[ ]*$pkg$" | head -n1
                            echo "$data_all" | sed  -n "/^Name[ ]*:[ ]*$pkg$/,/^$/{p;/^$/q}"
                        }
                        )
                    if [ "$data" ] ; then
                        info_found=yes
                        handle_formats "$format"
                    else
                        [ "$show_errors" = "yes" ] && errors+=("package '$pkg' does not exist")
                        continue
                    fi
                done
                ;;
        esac
        if [ "$show_errors" = "yes" ] && [ ${#errors[@]} -ne 0 ] ; then
            echo "==> Problems:" >&2
            printf "%s\n" "${errors[@]}" >&2
        fi
    fi
    [ $info_found = yes ] && return 0 || return 1
}

Main "$@"
