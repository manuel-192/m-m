#!/bin/bash

# System update with additional features.

Breakpoint()   {           # useful for debugging
    # echo "Breakpoint at line ${BASH_LINENO[0]}" >&2
    Debug
}
Debug() { : ; }

InstantCheck() {
    if [ $instant = yes ] ; then
        local uc_options="-ae"
        [ $aur = yes ] && uc_options+="y"
        [ $verbose = yes ] && uc_options+=" --verbose"
        uc-fast $uc_options
        case $? in
            0) ;;            # echo "Updates are available." >&2
            2) exit 2 ;;     # echo "No updates." >&2
            *) exit 1 ;;     # echo Error >&2
        esac
    fi
}

Main() {
    Breakpoint
    # Program wide variable definitions.

    local -r progname="${0##*/}"

    local -r RED=$'\e[0;91m'         # starts this foreground text color
    local -r GREEN=$'\e[0;92m'
    local -r YELLOW=$'\e[0;93m'
    local -r BLUE=$'\e[0;94m'
    local -r MAGENTA=$'\e[0;95m'
    local -r RESET=$'\e[0m'          # back to normal colors

    local -r DEFAULT_aur=no
    local -r DEFAULT_connection=no
    local -r DEFAULT_descriptions=no
    local -r DEFAULT_foreign=no
    local -r DEFAULT_instant=no
    local -r DEFAULT_keyrings=yes
    local -r DEFAULT_lock_check=yes
    local -r DEFAULT_nvidia=no
    local -r DEFAULT_optimize_checks=no
    local -r DEFAULT_pacdiff=no
    local -r DEFAULT_quiet=no
    local -r DEFAULT_sync=no
    local -r DEFAULT_virtualbox=no

    local aur=$DEFAULT_aur connection=$DEFAULT_connection descriptions=$DEFAULT_descriptions foreign=$DEFAULT_foreign
    local keyrings=$DEFAULT_keyrings lock_check=$DEFAULT_lock_check nvidia=$DEFAULT_nvidia
    local optimize_checks=$DEFAULT_optimize_checks instant=$DEFAULT_instant
    local pacdiff=$DEFAULT_pacdiff quiet=$DEFAULT_quiet sync=$DEFAULT_sync virtualbox=$DEFAULT_virtualbox

    local verbose=no   # for uc-fast only !?
    local debug=no
    local pagerlines=20

    local SOPTS="acdfhil:nopqsv"
    local LOPTS="aur,begin:,clear-databases,clear-keyrings,connection,debug,descriptions,dump-options,end:,instant,instant-no-aur"
    LOPTS+=",foreign,help,middle:,no-keyrings,no-lock,nvidia,optimize-checks,pacdiff,pager-lines:,paru,quiet,sync,verbose,virtualbox"

    local args=("$@")

    source /etc/eos-script-lib-yad.conf

    OptionsBeforeSudo "${args[@]}"

    if [ "$EUID" != "0" ] ; then
        InstantCheck
        sudo "/bin/$progname" "${args[@]}"
        Exit $?
    fi
    local updates_pacman=""
    local updates_aur=""
    local AUR_install=()
    local helper=""
    local begin=":" end=":" middle=":"   # make there arrays !

    Options "${args[@]}"

    SetHelper

    EMPHASIZED_COLOR "COMMAND: ${RED}$progname $*"

    CheckPrivileges
    CheckConnection
    CheckDbLock
    Xadditions begin "$begin"

    UpdateDatabase               # pacman -Sy
    FindAllUpdates
    ShowDescriptions

    UpdateKeyrings               # install keyring packages if needed
    CheckNvidia
    CheckVirtualbox
    Xadditions middle "$middle"

    UpdatePackages               # pacman -Su and yay (repo and AUR)
    Foreign
    Pacdiff
    Xadditions end "$end"
    Sync
}

Usage() {
    local tmpdoc=/tmp/upd-doc-tmp.html
    if true && [ -x /bin/pandoc ] ; then
        local -r has_pandoc=yes
    else
        local -r has_pandoc=no
    fi

    if [ $has_pandoc = yes ] ; then
        local -r h1="# "
        local -r h2="## "
        local -r i1="<i>"
        local -r i2="</i>"
        local -r b1="**"
        local -r b2="**"
        local -r pre1="<pre>"
        local -r pre2="</pre>"
        local -r br="<br>"
        local -r cmd="pandoc -f gfm -o $tmpdoc"
    else
        local -r h1=""
        local -r h2=""
        local -r i1=""
        local -r i2=""
        local -r b1=""
        local -r b2=""
        local -r pre1=""
        local -r pre2=""
        local -r br=""
        local -r cmd="cat -"
    fi
    cat <<EOF | $cmd 2>/dev/null
${h1}upd

${h2}Overview

Updater using ${b1}pacman${b2} and ${i1}AUR helper${i2}, with additional features.$br
Runs sudo when needed.

${h2}Usage

$pre1
   $progname [options] [advanced-options]
$pre2

By default, the only additional features over ${i1}pacman/AUR helper${i2} are:
- check pacman database lock and remove it if possible
- update keyrings before other updates

All options below will change the default behavior.

$pre1
    -a, --aur              Updates AUR packages too.
        --clear-keyrings   If update fails with keyring issues, try this option.
        --clear-databases  If update fails with e.g. database signature issues, try this option.
    -c, --connection       Checks internet connection first.
        --debug            Show debugging output.
    -d, --descriptions     Shows descriptions of the packages to update.
    -f, --foreign          Shows foreign packages in the end.
    -h, --help             This help.
        --no-keyrings      Does not update keyrings before other packages.
        --no-lock          Does not check pacman database lock.
    -i, --instant          Fast and simple check for updates. Experimental!
        --instant-no-aur   Same as --instant but AUR will not be checked.
    -l, --pager-lines      Number of pager lines for the descriptions (see option --descriptions).
    -n, --nvidia           Checks validity of nvidia & linux updates.
    -o, --optimize-checks  Reduce redundancy in checks.
    -p, --pacdiff          Runs 'pacdiff & meld' in the end.
        --paru             Uses 'paru' instead of 'yay'. Implies --aur.
    -q, --quiet            Be more quiet.
    -s, --sync             Run 'sync' as the last command.
    -v, --virtualbox       Checks validity of virtualbox updates in host.
$pre2

${h2}Advanced options
$pre1
    --begin                Adds a user-given command before 'pacman -Sy'.
    --middle               Adds a user-given command between 'pacman -Sy' and 'pacman -Su'.
    --end                  Adds a user-given command after 'pacman -Su'.
$pre2

${h2}Examples

$pre1
    upd -acdp --end "pwd && echo 'All done' "
    upd -docsa -i
$pre2

EOF
#                           Note that this may <i>postpone</i> the detection of updates for
#                           previously downgraded packages.
    [ $has_pandoc = yes ] && /bin/firefox $tmpdoc &
}

Options() {
    GetOptions() {
        opts="$(/usr/bin/getopt -o="$SOPTS" --longoptions "$LOPTS" --name "$progname" -- "$@")" || {
            Usage
            Exit 1
        }
    }
    local opts
    GetOptions "$@"
    eval set -- "$opts"

    case "${FUNCNAME[1]}" in             # check the caller
        OptionsBeforeSudo)               # handle a subset of given options before possible sudo
            while true ; do
                case "$1" in
                    --) break ;;
                    -a|--aur | --help | --dump-options | -i|--instant|--instant-no-aur | --verbose | --debug)
                        Options $1       # handle these options here
                        ;;
                    --*) ;;              # these will be handle elsewhere
                    -*h*) Options -h ;;  # handle -h here too
                esac
                shift
            done
            ;;
        *)
            while true ; do
                case "$1" in
                    -h | --help)             Usage; Exit 0 ;;
                    -a | --aur)              Assign aur yes ;;
                    --clear-keyrings)        ClearKeyrings; Exit 0 ;;
                    --clear-databases)       ClearDatabases; Exit 0 ;;
                    -c | --connection)       Assign connection yes ;;
                    --debug)                 Assign debug yes ;;
                    -d | --descriptions)     Assign descriptions yes ;;
                    --dump-options)          DumpOptions; Exit 0 ;;
                    -i | --instant)          Assign instant yes ;;
                    --instant-no-aur)        Assign instant yes; Assign aur no ;;
                    -l | --pager-lines)      Assign pagerlines "$2"; shift ;;
                    -f | --foreign)          Assign foreign yes ;;
                    --no-keyrings)           Assign keyrings no ;;
                    --no-lock)               Assign lock_check no ;;
                    -n | --nvidia)           Assign nvidia yes ;;
                    -o | --optimize-checks)  Assign optimize_checks yes ;;
                    -p | --pacdiff)          Assign pacdiff yes ;;
                    --paru)                  SetHelper paru; Assign aur yes ;;
                    -q | --quiet)            Assign quiet yes ;;
                    -s | --sync)             Assign sync yes ;;
                    --verbose)               Assign verbose yes ;;
                    -v | --virtualbox)       Assign virtualbox yes ;;
                    --begin)                 AppendCmd begin  "$2" ; shift ;;
                    --middle)                AppendCmd middle "$2" ; shift ;;
                    --end)                   AppendCmd end    "$2" ; shift ;;
                    --)                      shift; break ;;
                    -*)                      DIE "unsupported option '$1'" ;;
                esac
                shift
            done
            ;;
    esac
}

OptionsBeforeSudo() { Options "$@" ; }

echo2()   { echo   "$@" >&2 ; }
printf2() {
    # shellcheck disable=SC2059
    printf "$@" >&2
}
Exit()    { Breakpoint; exit "$@"; }

CMSG()    { echo2 -n "$1"; printf2 "$progname: %s: %s\n\n" "$2" "$3" ; echo2 "$RESET"; }
DIE()     { CMSG "$RED"     error   "$1"; Exit 1 ; }
WARN()    { CMSG "$BLUE"    warning "$1"; }
INFO()    { CMSG "$MAGENTA" info    "$1"; }
RESULT()  {
    # shellcheck disable=SC2001
    echo "$1" | sed 's|^| |' >&2   # bash parameter expansion is inadequate for multiple lines
}
DebugShow() { [ "$debug" = "yes" ] && echo2 -e "${YELLOW}==> DEBUG:" "$@" "$RESET" ; }

EMPHASIZED_COLOR() {
    local lastopt=""
    case "$1" in
        --no-newline-at-end) lastopt="-n"; shift ;;
    esac
    echo2 -n "${GREEN}==> "
    echo2 -n "$@"
    echo2 $lastopt "${RESET}"
}

Cmd()   { [ "$quiet" = no ] && EMPHASIZED_COLOR "$@" ":" ;             "$@" || DIE "'$* failed.'" ; }
Cmd1()  { [ "$quiet" = no ] && EMPHASIZED_COLOR "$1:" ;                "$@" || DIE "'$* failed.'" ; }
Cmd2()  { [ "$quiet" = no ] && EMPHASIZED_COLOR "COMMAND: ${RED}bash -c '$*'" ; bash -c "$*" || DIE "'$* failed.'" ; }
Cmd3()  { [ "$quiet" = no ] && EMPHASIZED_COLOR --no-newline-at-end "$RED" "$@" ":" ;  "$@" ; }

AsPlainUser() {
    local prompt=""
    local passopt=""
    local PLAIN_USER="$SUDO_USER"
    [ "$SUDO_USER" ] || PLAIN_USER="$LOGNAME"
    while true ; do
        case "$1" in
            --quiet) local quiet=yes ;;
            --prompt) prompt="$2" ; shift ;;
            --prompt=*) prompt="${1#*=}" ;;
            --no-newline-at-end) passopt+=" $1" ;;
            --) shift; break ;;
            -*) DIE "${FUNCNAME[0]}: unsupported option '$1'" ;;
            *) break ;;
        esac
        shift
    done
    local cmd=""
    case "$SUDO_USER" in
        "") cmd="/bin/runuser -u $PLAIN_USER -- $*" ;;
        *)  cmd="/bin/sudo -u $PLAIN_USER $*" ;;
    esac
    if [ "$quiet" = "no" ] ; then
        if [ -n "$prompt" ] ; then
            # shellcheck disable=SC2086
            EMPHASIZED_COLOR $passopt "$prompt (${RED}$cmd):"
        else
            # shellcheck disable=SC2086
            EMPHASIZED_COLOR $passopt "${RED}$cmd:"
        fi
    fi
    $cmd
}

IsInstalled() { expac -Q %n "$1" >/dev/null ; }

Xadditions() {
    local phase="$1"
    local cmd="$2"
    if [ "$cmd" = ":" ] ; then
        # EMPHASIZED_COLOR "User command at $phase: empty"
        return
    fi
    EMPHASIZED_COLOR "User command at: $phase"
    cmd="${cmd#: && }"
    Cmd2 "$cmd"
}

PkgInUpdates() {
    # shellcheck disable=SC2086
    printf "%s\n" $updates_pacman $updates_aur | grep "^$1$" >/dev/null
}

UpdateKeyrings() {
    [ "$keyrings" = "yes" ] || return
    [ "$optimize_checks$updates_pacman" = "yes" ] && return

    EMPHASIZED_COLOR --no-newline-at-end "Check keyrings:"
    local keyr updated=()
    for keyr in archlinux-keyring endeavouros-keyring ; do
        PkgInUpdates "$keyr" && updated+=("$keyr")
    done
    if [ ${#updated[@]} -gt 0 ] ; then
        RESULT "keyring update"
        Cmd pacman -S --noconfirm "${updated[@]}"
    else
        RESULT "OK"
    fi
}

ClearKeyrings() {
    Cmd mv /etc/pacman.d/gnupg /root/pacman-key.bak
    Cmd pacman-key --init
    Cmd pacman-key --populate archlinux endeavouros
    Cmd pacman -Syy --noconfirm archlinux-keyring endeavouros-keyring
    Cmd pacman -Su
}

ClearDatabases() {
    Cmd rm /var/lib/pacman/sync/*
}

CheckNvidia() {
    [ "$nvidia" = "yes" ] || return
    [ "$optimize_checks$updates_pacman" = "yes" ] && return

    EMPHASIZED_COLOR --no-newline-at-end "Check Nvidia & kernel:"
    if PkgInUpdates nvidia && ! PkgInUpdates linux  ; then
        DIE "packages 'nvidia' and 'linux' must be updated together"
    fi
    if PkgInUpdates nvidia-lts && ! PkgInUpdates linux-lts  ; then
        DIE "packages 'nvidia-lts' and 'linux-lts' must be updated together"
    fi
    RESULT "OK"
}

CheckVirtualbox() {
    [ "$virtualbox" = "yes" ] || return
    [ "$optimize_checks$updates_pacman" = "yes" ] && return

    # when 'virtualbox' updates, temporarily uninstall 'virtualbox-ext-oracle'
    if PkgInUpdates virtualbox && IsInstalled virtualbox-ext-oracle ; then
        EMPHASIZED_COLOR --no-newline-at-end "Check virtualbox:"
        local version_vb version_vbext
        version_vb=$(   expac     -S %v virtualbox)
        version_vbext=$(expac-aur -S %v virtualbox-ext-oracle)
        if [ "${version_vb%-*}" != "${version_vbext%-*}" ] ; then
            echo2 ""
            Cmd pacman -R  --noconfirm virtualbox-ext-oracle
            AUR_install+=(virtualbox-ext-oracle)
            RESULT "OK (uninstalled virtualbox-ext-oracle temporarily)"
        else
            RESULT "OK"
        fi
    fi        
}

CheckPrivileges() {
    EMPHASIZED_COLOR --no-newline-at-end "Check privileges:"
    [ "$EUID" = "0" ] || DIE "sorry, must run with elevated privileges."
    RESULT "OK"
}

CheckDbLock() {
    [ "$lock_check" = "yes" ] || return
    EMPHASIZED_COLOR --no-newline-at-end "Check database lock:"
    local lck=/var/lib/pacman/db.lck
    if [ -e $lck ] ; then
        if fuser $lck &>/dev/null ; then
            DIE "sorry, $lck is in use"
        fi
        rm -f $lck
        RESULT "OK (lock removed)"
    else
        RESULT "OK"
    fi
}

SetHelper() {
    for helper in "$@" $EOS_AUR_HELPER $EOS_AUR_HELPER_OTHER yay paru ; do
        if [ -x /bin/"${helper%% *}" ] ; then
            DebugShow "helper = $helper"
            return 0
        fi
    done
    DIE "AUR helper not found"
}

Pacdiff() {
    [ "$pacdiff" = "yes" ] || return
    [ "$optimize_checks$updates_pacman$updates_aur" = "yes" ] && return   # test AUR too?

    Cmd3 eos-pacdiff --quiet
    case $? in
        1) RESULT "error" ;;
        2|3) RESULT "nothing to do." ;;
        *) echo2 ""; RESULT "$out" ;;
    esac
}

Foreign() {
    [ "$foreign" = "yes" ] || return
    local out
    out=$(Cmd3 pacman -Qm)
    case $? in
        0) echo2 ""; RESULT "$out" ;;
        *) RESULT "no foreign packages" ;;
    esac
}

PagerOut() {
    local updates="$1"
    local title="$2"

    Cmd1 hook-update-description --include-repo --title="$title" $updates | less -F
}

ShowDescriptions() {
    [ "$descriptions" = "yes" ] || return

    # shellcheck disable=SC2086
    [ "$updates_pacman" ] && PagerOut "$updates_pacman" "native updates"

    # shellcheck disable=SC2086
    [ "$updates_aur" ]    && PagerOut "$updates_aur"    "AUR updates"
}


CheckConnection() {
    [ "$connection" = "yes" ] || return
    if AsPlainUser --no-newline-at-end --prompt="Check internet connection" eos-connection-checker ; then
        RESULT "OK"
    else
        DIE "no connection."
    fi
}

FindAllUpdates() {
    EMPHASIZED_COLOR --no-newline-at-end "Listing updates:"
    local pu=0 au=0
    updates_pacman=$(pacman -Quq)
    [ -n "$updates_pacman" ] && pu=$(printf "%s\n" "$updates_pacman" | wc -l)
    case "$aur" in
        yes)
            updates_aur=$(AsPlainUser --quiet $helper -Quqa)
            [ -n "$updates_aur" ] && au=$(printf "%s\n" "$updates_aur" | wc -l)
            RESULT "$pu native, $au AUR"
            ;;
        *)
            RESULT "$pu native"
            ;;
    esac
}

Sync() {
    [ "$sync" = "yes" ] || return
    [ "$optimize_checks$updates_pacman$updates_aur" = "yes" ] && return

    #EMPHASIZED_COLOR "Running sync."
    Cmd3 sync
    RESULT "OK"
}

Pacman-Su() {
    if [ "$optimize_checks$updates_pacman" = "yes" ] ; then
        pacman -Su >/dev/null   # to give potential warnings!
    else
        Cmd3 pacman -Su
    fi
}

CheckAUR() {
    [ "$aur" = "yes" ] || return
    [ "$optimize_checks$updates_aur" = "yes" ] && return

    if [ -x /bin/$helper ] ; then
        AsPlainUser --prompt="Check AUR updates" $helper -Sua "${AUR_install[@]}" || RESULT "no updates"
    else
        WARN "'$helper' not installed, cannot check AUR updates."
    fi
}

UpdatePackages() {
    Pacman-Su
    CheckAUR
}

UpdateDatabase() {
    Cmd3 pacman -Sy               # update package database
}

AppendCmd() { local -n _var="$1" ; _var+=" && $2" ; }

DumpOptions() {
    ## - $LOPTS may *not* be empty
    ## - $SOPTS handling requires 'shopt -s patsub_replacement'

    local cmd
    cmd="$(shopt -p patsub_replacement)" && cmd="" || shopt -s patsub_replacement

    local sopts="${SOPTS//:/}"
    local lopts="${LOPTS//:/}"
    echo "${sopts//?/-& }--${lopts//,/ --}"

    $cmd
}

Assign() {
    local -n _var="$1"
    local val="$2"
    _var="$val"
}

Main "$@"
