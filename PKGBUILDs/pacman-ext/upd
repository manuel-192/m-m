#!/bin/bash

# System update - run using sudo.

echo2()   { echo   "$@" >&2 ; }
printf2() { printf "$@" >&2 ; }

# bright colors
RED=$'\e[0;91m'
GREEN=$'\e[0;92m'
BLUE=$'\e[0;94m'
MAGENTA=$'\e[0;95m'
CYAN=$'\e[0;96m'
RESET=$'\e[0m'       # back to normal

CMSG()    { echo2 -n "$1"; printf2 "$progname: %s: %s\n\n" "$2" "$3" ; echo2 "$RESET"; }
DIE()     { CMSG "$RED"     error   "$1";  Options -h ; exit 1 ; }
WARN()    { CMSG "$BLUE"    warning "$1"; }
INFO()    { CMSG "$MAGENTA" info    "$1"; }
RESULT()  { echo "$1" | sed 's|^| |' >&2 ; }

EMPHASIZED_COLOR() {
    echo2 -n "${GREEN}==> "
    echo2 -n "$@"
    echo2 "${RESET}"
}
EMPHASIZED_COLOR_non-root() { EMPHASIZED_COLOR "$@" "(as non-root user)." ; }

Cmd()   { [ $verbose = yes ] && EMPHASIZED_COLOR "$@:" ;  "$@" || DIE "'$* failed.'" ; }
Cmd1()  { [ $verbose = yes ] && EMPHASIZED_COLOR "$1:" ;  "$@" || DIE "'$* failed.'" ; }
Cmd1a() { [ $verbose = yes ] && EMPHASIZED_COLOR "$1:" ;  "$@" ; }
Cmd2()  { [ $verbose = yes ] && EMPHASIZED_COLOR "COMMAND: bash -c '$*'" ; bash -c "$*" || DIE "'$* failed.'" ; }

AsPlainUser() {
    case "$1" in
        -q | --quiet) local verbose=no; shift ;;
    esac
    local cmd=""
    case "$SUDO_USER" in
        "") cmd="/bin/runuser -u $PLAIN_USER -- $*" ;;
        *)  cmd="/bin/sudo -u $PLAIN_USER $*" ;;
    esac
    [ $verbose = yes ] && EMPHASIZED_COLOR "$cmd:"
    $cmd
}

Xadditions() {
    local cmd="$1"
    if [ "$cmd" != ":" ] ; then
        cmd="${cmd#: && }"
        Cmd2 "$cmd"
    fi
}

PkgInUpdates() { printf "%s\n" $updates_pacman $updates_aur | grep "^$1$" >/dev/null ; }

UpdateKeyrings() {
    [ "$keyrings" = "yes" ] || return
    [ "$updates_pacman" ] || return
    EMPHASIZED_COLOR "Check keyrings."
    local keyr updated=()
    for keyr in archlinux-keyring endeavouros-keyring ; do
        PkgInUpdates "$keyr" && updated+=("$keyr")
    done
    [ ${#updated[@]} -gt 0 ] && Cmd pacman -S --noconfirm ${updated[*]} || RESULT "no keyring update"
}

CheckNvidia() {
    [ "$nvidia" = "yes" ] || return
    [ "$updates_pacman" ] || return
    EMPHASIZED_COLOR "Check Nvidia & kernel."
    if PkgInUpdates nvidia && ! PkgInUpdates linux  ; then
        DIE "packages 'nvidia' and 'linux' must be updated together"
    fi
    if PkgInUpdates nvidia-lts && ! PkgInUpdates linux-lts  ; then
        DIE "packages 'nvidia-lts' and 'linux-lts' must be updated together"
    fi
    RESULT "no problems detected"
}

CheckVirtualbox() {
    # [ "$aur" = "yes" ] || return            # check virtualbox-ext-oracle even if not updating AUR packages
    [ "$virtualbox" = "yes" ] || return
    [ "$updates_pacman" ] || return
    EMPHASIZED_COLOR "Check virtualbox."
    if PkgInUpdates virtualbox ; then
        local version_vb=$(expac -S %v virtualbox)
        local version_vbext=$(LANG=C $helper -Si virtualbox-ext-oracle | grep "^Version")
        version_vbext=${version_vbext##* }
        [ "${version_vb%-*}" = "${version_vbext%-*}" ] || WARN "latest versions of virtualbox and virtualbox-ext-oracle do not match"
    else
        RESULT "no virtualbox update"
    fi        
}

CheckPrivileges() { [ "$EUID" = "0" ] || DIE "sorry, must run with elevated privileges." ; }

CheckDbLock() {
    [ "$lock_check" = "yes" ] || return
    EMPHASIZED_COLOR "Check database lock."
    local lck=/var/lib/pacman/db.lck
    if [ -e $lck ] ; then
        if fuser $lck &>/dev/null ; then
            DIE "sorry, $lck is in use."
        fi
        Cmd rm -f $lck
    else
        RESULT "no lock"
    fi
}

CheckAUR() {
    [ "$aur" = "yes" ] || return
    if [ -x /bin/$helper ] ; then
        EMPHASIZED_COLOR_non-root "Check AUR updates"
        AsPlainUser --quiet $helper -Sua
    else
        WARN "'$helper' not installed, cannot check AUR updates."
    fi
}

Pacdiff() {
    [ "$pacdiff" = "yes" ] || return
    local out
    out=$(Cmd1a eos-pacdiff --indent=' ')
    case $? in
        1) RESULT "error" ;;
        2|3) ;;                      # eos-pacdiff writes the msg to stderr
        *) RESULT "$out" ;;
    esac
}

Foreign() {
    [ "$foreign" = "yes" ] || return
    local out
    out=$(Cmd pacman -Qm)
    case $? in
        0) RESULT "$out" ;;
        *) RESULT "no foreign packages" ;;
    esac
}

Descriptions() {
    [ "$descriptions" = "yes" ] || return
    [ "$updates_pacman" ] && Cmd1 hook-update-description $updates_pacman
}

DescriptionsAUR() {
    [ "$descriptions" = "yes" ] || return
    [ "$updates_aur" ] && Cmd1 hook-update-description $updates_aur
}

CheckConnection() {
    [ "$connection" = "yes" ] || return
    if true ; then
        EMPHASIZED_COLOR_non-root "Check connection"
        AsPlainUser --quiet eos-connection-checker && RESULT "internet connection OK" || DIE "no internet connection."
    else
        AsPlainUser eos-connection-checker && RESULT "internet connection OK" || DIE "no internet connection."
    fi
}

GetAllUpdates() {
    updates_pacman=$(pacman -Quq)
    [ "$aur" = "yes" ] && updates_aur=$(AsPlainUser --quiet $helper -Quqa)
}

AppendCmd() { local -n _var="$1" ; _var+=" && $2" ; }

Defaults() {
    defaults=(
        aur          no
        connection   no
        descriptions no
        foreign      no
        keyrings     yes
        nvidia       no
        pacdiff      no
        verbose      yes
        virtualbox   no
    )
    aur="${defaults[aur]}"
    connection="${defaults[connection]}"
    descriptions="${defaults[descriptions]}"
    foreign="${defaults[foreign]}"
    keyrings="${defaults[keyrings]}"
    nvidia="${defaults[nvidia]}"
    pacdiff="${defaults[pacdiff]}"
    verbose="${defaults[verbose]}"
    virtualbox="${defaults[virtualbox]}"
}

DumpOptions() {
    local l=" ${lopts//,/ }"
    l="${l//:/}"
    l="${l// / --}"
    l="${l:1}"
    local s=$(echo "$sopts" | sed -E 's|(.)[:]*| -\1|g')
    echo "$l$s"
    exit 0
}

Columnizer2() { column -t -s'|' -o'  ' >&2 ; }

Options() {
    local repo quiet
    Defaults
    [ "$aur"     = "yes" ] && repo=no  || repo=yes
    [ "$verbose" = "yes" ] && quiet=no || quiet=yes

    local lopts="aur,begin:,connection,descriptions,dump-options,end:,foreign,help,loud,middle:,no-keyrings"
    lopts+=",no-lock,nvidia,pacdiff,paru,quiet,repo,verbose,vb,virtualbox"
    local sopts="achqrv"
    local opts
    opts="$(/usr/bin/getopt -o="$sopts" --longoptions "$lopts" --name "$progname" -- "$@")" || {
        Options -h
        return 1
    }
    eval set -- "$opts"

    while [ "$1" ] ; do
        case "$1" in
            -h | --help)
                cat <<EOF | Columnizer2
Purpose:|Updater using pacman & AUR helper + more.

EOF
                cat <<EOF | Columnizer2
Usage:|$progname [options] [advanced-options]
Note:|sudo/root required.
Options:
|option|default|description
|~~~~~~|~~~~~~~|~~~~~~~~~~~
|-a, --aur|${defaults[aur]}|Updates AUR packages too.
|-c, --connection|${defaults[connection]}|Checks internet connection first.
|    --descriptions|${defaults[descriptions]}|Shows descriptions of the packages to update.
|    --foreign|${defaults[foreign]}|Shows foreign packages in the end.
|-h, --help||This help.
|    --nvidia|${defaults[nvidia]}|Checks validity of nvidia & linux updates.
|    --no-keyrings|${defaults[keyrings]}|Does not update keyrings before other packages.
|    --no-lock||Does not check pacman database lock.
|    --pacdiff|${defaults[pacdiff]}|Runs pacdiff in the end.
|    --paru||Uses 'paru' instead of 'yay'. Implies --aur.
|-q, --quiet|$quiet|Be more quiet.
|-r, --repo|$repo|Updates only native packages, not foreign (e.g. AUR).
|-v, --verbose, --loud|${defaults[verbose]}|Shows what is being done.
|    --vb, --virtualbox|${defaults[virtualbox]}|Checks validity of virtualbox updates in host.
EOF
                cat <<EOF | Columnizer2
Advanced
options:
|option|default|description
|~~~~~~|~~~~~~~|~~~~~~~~~~~
|--begin|nothing|Adds a user-given command before 'pacman -Sy'.
|--middle|nothing|Adds a user-given command between 'pacman -Sy' and 'pacman -Su'.
|--end|nothing|Adds a user-given command after 'pacman -Su'.
EOF
                exit 0
                ;;
            --dump-options)          DumpOptions ;;
            -a | --aur)              aur=yes ;;
            -c | --connection)       connection=yes ;;
            --descriptions)          descriptions=yes ;;
            --foreign)               foreign=yes ;;
            --no-keyrings)           keyrings=no ;;
            --no-lock)               lock_check=no ;;
            --nvidia)                nvidia=yes ;;
            --pacdiff)               pacdiff=yes ;;
            --paru)                  helper=paru; aur=yes ;;
            -q | --quiet)            verbose=no ;;
            -r | --repo)             aur=no ;;
            -v | --verbose | --loud) verbose=yes ;;
            --vb | --virtualbox)     virtualbox=yes ;;
            --begin)                 AppendCmd begin  "$2" ; shift ;;
            --middle)                AppendCmd middle "$2" ; shift ;;
            --end)                   AppendCmd end    "$2" ; shift ;;
        esac
        shift
    done
}

Main() {
    local -r progname="${0##*/}"
    local updates_pacman=""
    local updates_aur=""
    local aur connection descriptions foreign keyrings nvidia pacdiff quiet verbose virtualbox
    local helper=yay lock_check=yes
    local begin=":" end=":" middle=":"   # make there arrays !
    declare -A defaults=()
    local PLAIN_USER="$SUDO_USER"
    [ "$SUDO_USER" ] || PLAIN_USER="$LOGNAME"

    EMPHASIZED_COLOR "COMMAND: $progname $*"

    Options "$@"

    CheckConnection
    CheckPrivileges
    CheckDbLock
    Xadditions "$begin"
    Cmd pacman -Sy               # update package database
    GetAllUpdates

    UpdateKeyrings
    CheckNvidia
    CheckVirtualbox
    Xadditions "$middle"
    Descriptions

    Cmd pacman -Su               # updates repo packages

    DescriptionsAUR
    CheckAUR                     # update AUR packages
    Xadditions "$end"
    Foreign
    Pacdiff
}

Main "$@"
