#!/bin/bash

# A pacman with additionalfeatures for update, and downgrade support.

echo2()   { echo "$@" >&2 ; }
printf2() { printf "$@" >&2 ; }
DIE()     { echo2 "$progname: error: $1" ; Usage 1 ; }
WARN()    { echo2 "$progname: warning: $1" ; MayExit "$2" ; }
MayExit() { [ -n "$1" ] && exit $1 ; }
verbose2() {
    if [ "$verbose" = "yes" ] ; then
        case "$1" in
            -n) echo2 "$1" "==>" "$@" ;;  # support echo option -n
            *)  echo2 "==>" "$@" ;;
        esac
    fi
}

Usage() {
    cat <<EOF
$banner
Usage:       $progname
             $progname <option1>
             $progname <option2> [other-parameters]
             $progname <pacman-options>
<option1>:   -Syu                Updates packages with additional features.
             -Syyu               Like -Syu, with extra --refresh (see 'man pacman').
             --paru              Like -Syu, also updates AUR packages using paru.
             --yay               Like -Syu, also updates AUR packages using yay.
             --aur               Like --paru or --yay (tried in this order).
<option2>:   --wait-enter        Waits for user to press the Enter key to continue in the end.
             --dg, --downgrade   (Experimental) Downgrades given Arch or EndeavourOS packages.
             --no-banner         Do not show the intial banner that tells about $progname.
             --show-cmd          Shows the actual commands to be executed.
             --build             Builds and installs a package using a local PKGBUILD.
             -c, --checkupdates  Only check if updates are available.

If no parameter is provided, only check if updates are available.
The <option1> must be used as the *only* parameter on the command line.
Option --wait-enter can be used with other parameters, e.g. <pacman-options>.
Options --downgrade and --dg require one or more package names.
Option --build can be followed by makepkg options.
Otherwise $progname works like 'pacman <pacman-options>' *without* any additional features.

EOF
    MayExit "$1"
}

_Build_pkgname() {
    source PKGBUILD
    echo "$pkgname"
}

_Build_pkgver-pkgrel() {
    source PKGBUILD
    echo "$pkgver"-"$pkgrel"
}

_Build() {
    [ -r PKGBUILD ] || DIE "PKGBUILD not found."

    local -r makepkg_opts="$*"
    local pkgname="$(_Build_pkgname)"

    ls ${pkgname}-*.pkg.tar.zst >& /dev/null && rm -i ${pkgname}-*.pkg.tar.zst

    case "$pkgname" in
        eos-apps-info) ./eos-apps-info-collect ;;  # update actual html pages before build
    esac

    updpkgsums || DIE "updpkgsums failed."
    makepkg -cf $makepkg_opts || DIE "makepkg failed."

    local -r pkgverrel="$(_Build_pkgver-pkgrel)"
    local -r file=$(ls ${pkgname}-${pkgverrel}-*.pkg.tar.zst)

    if [ -r "$file" ] ; then
        echo "Install $file:"
        sudo pacman -U "$file"
        read -p "Delete $file (Y/n)? "
        case "$REPLY" in
            "" | [yY]*) rm -f $file ;;
        esac
    fi
    [ -x ./.destructor ] && ./.destructor      # user file .destructor can do post-build stuff, e.g. cleanup
}


special_update_helper()  {
    verbose2 "will run also $(basename $helper) ..."
    helper="/usr/bin/sudo -u $LOGNAME $helper"
    special_update
}

eos-virtualbox-check() {
    # if installed, check versions of virtualbox-ext-oracle vs. virtualbox
    if [ -x /usr/bin/virtualbox ] && [ -r /usr/share/virtualbox/extensions/Oracle_VM_VirtualBox_Extension_Pack-*.vbox-extpack ] ; then
        verbose2 "will check virtualbox update ..."
        local versions ver_app ver_ext
        case "$helper" in
            /usr/bin/paru) readarray -t versions <<< $(LANG=C paru -Si virtualbox virtualbox-ext-oracle | grep "^Version" | awk '{print $NF}') ;;
            *)             # bug: yay does not find virtualbox-ext-oracle together with virtualbox!
                           readarray -t versions <<< $( { LANG=C /usr/bin/pacman -Si virtualbox; LANG=C yay -Si virtualbox-ext-oracle; } | grep "^Version" | awk '{print $NF}') ;;
        esac
        if [ ${#versions[@]} -eq 2 ] ; then
            ver_app=${versions[0]%-*}
            ver_ext=${versions[1]%-*}
            if [ "$ver_app" != "$ver_ext" ] ; then
                ignore_aur_pkgs="--ignore virtualbox-ext-oracle"
                # printf2 "warning: ignoring virtualbox-ext-oracle update due to incompatible versions.\n"
            fi
        fi
    fi
}

special_update() {
    if [ "$banner_initial" = "yes" ] ; then
        cat <<EOF
$banner

Additional features:
   - require password only when needed
   - db lock file check
   - nvidia & kernel update check
   - check virtualbox vs. virtualbox-ext-oracle version compatibility
   - update keyrings first if archlinux-keyring-wkd-sync.timer is not active
   - 'sync' at end

EOF
    fi
    local ignore_aur_pkgs=""
    local -r lockfile=/var/lib/pacman/db.lck
    local -r logfile="$HOME/.cache/$progname.log"

    verbose2 "will check $lockfile ..."
    if [ -e $lockfile ] && fuser $lockfile &>/dev/null ; then
        WARN "$lockfile is in use." 1
    fi

    # Build the command for sudo

    local sudo_cmd=()
    [ -e $lockfile ] && sudo_cmd=("rm -f $lockfile")
    if [ "$keyrings_first" = "yes" ] ; then
        verbose2 "will check all keyrings first ..."
        sudo_cmd+=("/usr/bin/pacman $db_opt && pacman-ext-checks archlinux-keyring endeavouros-keyring && /usr/bin/pacman -Su")
    else
        if false ; then
            sudo_cmd+=("/usr/bin/pacman ${db_opt}u")
        else
            verbose2 "will check EndeavourOS keyrings first ..."
            sudo_cmd+=("/usr/bin/pacman $db_opt && pacman-ext-checks endeavouros-keyring && /usr/bin/pacman -Su")
        fi
    fi
    if [ "$helper" != "/usr/bin/pacman" ] ; then
        eos-virtualbox-check
        sudo_cmd+=("$helper -Sua $ignore_aur_pkgs")
    fi
    verbose2 "will add 'sync' ..."
    sudo_cmd+=("sync")

    # Handle the sudo command

    local -r last_cmd="${sudo_cmd[@]: -1}"
    sudo_cmd=($(printf "%s\n" "${sudo_cmd[@]}" | sed "/^$last_cmd$/!s/$/ \&\&/" ))  # see 'info sed', chapter 6.4 for details!
    echo "$(date +%Y%m%d-%H%M): ${sudo_cmd[@]}" >> "$logfile"
    [ "$show_cmd" = "yes" ] && echo "sudo bash -c \"${sudo_cmd[*]}\""
    sudo bash -c "${sudo_cmd[*]}"
    return $?
}

pacman_ext() {
    if [ -z "$1" ] ; then
        CheckUpdates
        return $retval
    fi
    local db_opt="-Sy"                     # $db_opt used by special_update()

    case "$helper" in
        /usr/bin/pacman) ;;
        *) special_update_helper ; return $? ;;
    esac

    # Handle additional features.
    case "$2" in
        "")
            case "$1" in
                -Syu|-Suy|-ySu|-yuS|-uSy|-uyS|"")
                    special_update
                    return $?
                    ;;
                -Syyu)
                    db_opt="-Syy"
                    special_update
                    return $?
                    ;;
            esac
            ;;
        *)
            case "$1" in
                --dg | --downgrade) shift ; eos-downgrade "$@" ; return $? ;;
            esac
            ;;
    esac

    verbose2 "will check need for sudo with pacman ..."
    /usr/bin/pacman-sudo-internal "$@"
}

CheckUpdates() {
    checkupdatesext
    retval=$?
    case "$retval" in
        0) ;;  # has official updates
        1) DIE "checkupdates failed" ;;
        2) echo "No official updates avaiable." ;;
    esac

    [ -x $aur_helper ] || DIE "AUR helpers 'paru' or 'yay' not found."
    local updates=$($aur_helper -Qua)
    if [ -z "$updates" ] ; then
        echo "No AUR updates avaiable."
    else
        retval=0
    fi
    #return $retval    # has the exit code of checkupdates
}

Main() {
    local -r progname="$(basename "$0")"   # $progname used by various functions here
    local -r banner="$progname: A pacman wrapper with additional features for package update."
    local wait_enter=no
    local show_cmd=no
    local retval
    local args=() arg
    local keyrings_first=no   # if yes, update keyring packages first; if no, rely on systemd archlinux-keyring-wkd-sync.timer
    local verbose=no
    local show_help_now=no
    local banner_initial=yes

    local helper=/usr/bin/pacman           # $helper used by special_update()
    local aur_helper=/usr/bin/paru
    [ -x $aur_helper ] || aur_helper=/usr/bin/yay

    if [ "$keyrings_first" = "no" ] ; then
        if [ -z "$(systemctl show archlinux-keyring-wkd-sync.timer | grep ^NextElapseUSecRealtime=)" ] ; then
            keyrings_first=yes
        fi
    fi

    # Handle new options and changed pacman options here.
    # Gather all pacman options for the pacman call.

    while true ; do
        arg="$1"
        case "$arg" in
            -h | --help)
                show_help_now=yes
                args+=("$arg")
                ;;
            -v | --verbose)
                verbose=yes
                args+=("$arg")
                ;;
            --wait-enter)
                wait_enter=yes                                # useful for pacseek
                ;;
            --show-cmd)
                show_cmd=yes
                ;;
            --aur)
                helper=$aur_helper
                [ -x $helper ] || DIE "AUR helpers 'paru' or 'yay' not found."
                verbose2 "$(basename $helper) selected."
                ;;
            --paru | --yay)
                helper=/usr/bin/${arg#*--}
                [ -x $helper ] || DIE "AUR helper '$helper' not found."
                ;;
            --no-banner)
                banner_initial=no
                ;;
            --show-native-options)
                echo "--aur --paru --yay --downgrade --dg --no-banner --wait-enter --show-cmd --build --show-native-options $arg"
                exit
                ;;
            --build)
                shift
                _Build "$@"
                exit
                ;;
            *)
                args+=("$arg")
                ;;
        esac
        shift
        [ -z "$1" ] && break
    done

    if [ "$show_help_now" = "yes" ] ; then
        Usage
        echo "pacman: $(LANG=C /usr/bin/pacman -Qi pacman | grep ^Description | sed 's|^Description[ ]*: ||')"
        LANG=C /usr/bin/pacman "${args[@]}"
        return $?
    fi

    pacman_ext "${args[@]}"
    retval=$?

    [ "$wait_enter" = "yes" ] && read -p "Press ENTER to continue: " >&2

    return $retval
}
Main "$@"
