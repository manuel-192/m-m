#!/bin/bash

# A pacman with additionalfeatures for update, and downgrade support.

echo2()   { echo "$@" >&2 ; }
printf2() { printf "$@" >&2 ; }
DIE()     { echo2 "$progname: error: $1" ; Usage 1 ; }
WARN()    { echo2 "$progname: warning: $1" ; MayExit "$2" ; }
MayExit() { [ -n "$1" ] && exit $1 ; }
verbose2() {
    if [ "$VERBOSE" = "yes" ] ; then
        case "$1" in
            -n) echo2 "$1" "==>" "$@" ;;  # support echo option -n
            *)  echo2 "==>" "$@" ;;
        esac
    fi
}

_Build_pkgname() {
    source PKGBUILD
    echo "$pkgname"
}

_Build_pkgver-pkgrel() {
    source PKGBUILD
    echo "$pkgver"-"$pkgrel"
}

_Build() {
    [ -r PKGBUILD ] || DIE "PKGBUILD not found."

    local -r makepkg_opts="$*"
    local pkgname="$(_Build_pkgname)"

    ls ${pkgname}-*.pkg.tar.zst >& /dev/null && rm -i ${pkgname}-*.pkg.tar.zst

    case "$pkgname" in
        eos-apps-info) ./eos-apps-info-collect ;;  # update actual html pages before build
    esac

    updpkgsums || DIE "updpkgsums failed."
    makepkg -cf $makepkg_opts || DIE "makepkg failed."

    local -r pkgverrel="$(_Build_pkgver-pkgrel)"
    local -r file=$(ls ${pkgname}-${pkgverrel}-*.pkg.tar.zst)

    if [ -r "$file" ] ; then
        echo "Install $file:"
        sudo pacman -U "$file"
        read -p "Delete $file (Y/n)? "
        case "$REPLY" in
            "" | [yY]*) rm -f $file ;;
        esac
    fi
    [ -x ./.destructor ] && ./.destructor      # user file .destructor can do post-build stuff, e.g. cleanup
}


special_update_helper()  {
    verbose2 "will run also $(basename $helper) ..."
    helper="/usr/bin/sudo -u $LOGNAME $helper"
    special_update
}

eos-virtualbox-check() {
    # if installed, check versions of virtualbox-ext-oracle vs. virtualbox
    if [ -x /usr/bin/virtualbox ] && [ -r /usr/share/virtualbox/extensions/Oracle_VM_VirtualBox_Extension_Pack-*.vbox-extpack ] ; then
        verbose2 "will check virtualbox update ..."
        local versions ver_app ver_ext
        case "$helper" in
            /usr/bin/paru) readarray -t versions <<< $(LANG=C paru -Si virtualbox virtualbox-ext-oracle | grep "^Version" | awk '{print $NF}') ;;
            *)             # bug: yay does not find virtualbox-ext-oracle together with virtualbox!
                           readarray -t versions <<< $( { LANG=C /usr/bin/pacman -Si virtualbox; LANG=C yay -Si virtualbox-ext-oracle; } | grep "^Version" | awk '{print $NF}') ;;
        esac
        if [ ${#versions[@]} -eq 2 ] ; then
            ver_app=${versions[0]%-*}
            ver_ext=${versions[1]%-*}
            if [ "$ver_app" != "$ver_ext" ] ; then
                ignore_aur_pkgs="--ignore virtualbox-ext-oracle"
                # printf2 "warning: ignoring virtualbox-ext-oracle update due to incompatible versions.\n"
            fi
        fi
    fi
}

special_update() {
    local ignore_aur_pkgs=""
    local -r lockfile=/var/lib/pacman/db.lck
    local -r logfile="$HOME/.cache/$progname.log"
    local sudo_cmd=()
    local keyrings=""
    local nvidia=""

    # Build the command for sudo

    if [ "$EXTRAS_PACMAN_LOCK_CHECK" = "yes" ] ; then
        verbose2 "will check $lockfile ..."
        if [ -e $lockfile ] && fuser $lockfile &>/dev/null ; then
            WARN "$lockfile is in use." 1
        fi
        [ -e $lockfile ] && sudo_cmd=("rm -f $lockfile")
    fi

    # nvidia and keyring checks

    if [ "$EXTRAS_NVIDIA_CHECK" = "yes" ] && [ -n "$(device-info --graphics | grep -w NVIDIA)" ] ; then
       nvidia="--nvidia"
    fi

    if [ "$EXTRAS_KEYRINGS_FIRST" = "yes" ] ; then
        verbose2 "will check all keyrings first ..."
        [ "$EXTRAS_KEYRINGS_FIRST" = "yes" ] && keyrings="archlinux-keyring endeavouros-keyring"
        sudo_cmd+=("/usr/bin/pacman $db_opt && pacman-ext-checks $nvidia $keyrings && /usr/bin/pacman -Su")
    else
        if false ; then
            sudo_cmd+=("/usr/bin/pacman ${db_opt}u")
        else
            verbose2 "will check EndeavourOS keyrings first ..."
            [ "$EXTRAS_KEYRINGS_FIRST" = "yes" ] && keyrings="endeavouros-keyring"
            sudo_cmd+=("/usr/bin/pacman $db_opt && pacman-ext-checks $nvidia $keyrings && /usr/bin/pacman -Su")
        fi
    fi
    if [ "$EXTRAS_VIRTUALBOX_CHECK" = "yes" ] ; then
        if [ "$helper" != "/usr/bin/pacman" ] ; then
            eos-virtualbox-check
            sudo_cmd+=("$helper -Sua $ignore_aur_pkgs")
        fi
    fi
    if [ "$EXTRAS_SYNC_AT_END" = "yes" ] ; then
        verbose2 "will add 'sync' ..."
        sudo_cmd+=("sync")
    fi

    # Handle the sudo command

    local -r last_cmd="${sudo_cmd[@]: -1}"
    sudo_cmd=($(printf "%s\n" "${sudo_cmd[@]}" | sed "/^$last_cmd$/!s/$/ \&\&/" ))  # see 'info sed', chapter 6.4 for details!
    echo "$(date +%Y%m%d-%H%M): ${sudo_cmd[@]}" >> "$logfile"
    [ "$SHOW_CMD" = "yes" ] && echo "sudo bash -c \"${sudo_cmd[*]}\""
    sudo bash -c "${sudo_cmd[*]}"
    return $?
}

CheckUpdatesFunc() {
    HeaderOfUpdates() {
        local header="$1"
        echo "$header"
        echo "$header" | sed 's/[^|]/~/g'
    }
    echo "Checking available updates..." >&2

    if [ "$checkupdates" = "checkupdatesext" ] ; then
        checkupdatesext
        retval=$?
    else
        local retval
        local updates

        if [ "$given_checkupdates" != "" ] ; then
            updates="$given_checkupdates"
            retval=0
        else
            updates=$(checkupdates)
            retval=$?
        fi

        if [ -n "$updates" ] ; then
            {
                case "$checkupdates" in
                    expac)
                        # deprecated... use checkupdates instead!
                        HeaderOfUpdates "Package name|New version|Description"
                        if false ; then
                            expac -S "%n|%v|%d" $(echo "$updates" | awk '{print $1}')   # 'new version' may not be correct...
                        else
                            local pkgnames new_versions descriptions
                            readarray -t pkgnames     <<< $(echo "$updates" | awk '{print $1}')
                            readarray -t new_versions <<< $(echo "$updates" | awk '{print $NF}')
                            readarray -t descriptions <<< $(expac -Q %d "${pkgnames[@]}")
                            for ((ix=0; ix < ${#pkgnames[@]}; ix++)) ; do
                                echo "${pkgnames[$ix]}|${new_versions[$ix]}|${descriptions[$ix]}"
                            done
                        fi
                        ;;
                    checkupdates)
                        #HeaderOfUpdates "Package name|Current version|New version"
                        #echo "$updates" | sed -e 's/ -> / /' -e 's/ /|/g'          # remove "->"
                        HeaderOfUpdates "Package name|Current version|New version|Description"
                        local pkgnames old_versions new_versions descriptions
                        readarray -t pkgnames     <<< $(echo "$updates" | awk '{print $1}')
                        readarray -t old_versions <<< $(echo "$updates" | awk '{print $2}')
                        readarray -t new_versions <<< $(echo "$updates" | awk '{print $NF}')
                        readarray -t descriptions <<< $(expac -Q %d "${pkgnames[@]}")
                        for ((ix=0; ix < ${#pkgnames[@]}; ix++)) ; do
                            echo "${pkgnames[$ix]}|${old_versions[$ix]}|${new_versions[$ix]}|${descriptions[$ix]}"
                        done
                        ;;
                esac
            } | column -t -s'|'
        fi
    fi

    return $retval
}

CheckUpdates() {
    CheckUpdatesFunc "$checkupdates"
    retval=$?

    case "$retval" in
        1) DIE "checkupdates failed" ;;
        2) retval=0 ; echo2 "No updates from EndeavourOS & Arch repos." ;;
        0) retval=1 ;;
    esac

    if [ -x $aur_helper ] ; then
        local updates=$($aur_helper -Qua)
        if [ -n "$updates" ] ; then
            echo "$updates"
            ((retval+=2))
        else
            echo2 "No updates from AUR."
        fi
    fi

    return $retval

    # retval:
    #  0 = no updates
    #  1 = official updates
    #  2 = AUR updates
    #  3 = official and AUR updates
}

Indent() {
    local levels="$1"    # how many levels of indent (positive integer)
    local indent="$2"    # contents of one indent string, e.g. "    "
    local ix
    local str=""

    [ -n "$levels" ] || levels=1
    [ -n "$indent" ] || indent="    "
    
    for ((ix=0; ix < levels; ix++)) ; do
        str+="$indent"
    done
    sed "s|^|${str}-> |"
}

ExtraChecks() {
    if [ "$RUN_MORE_EXTRAS" = "yes" ] ; then
        case "$EXTRAS_PACMAN_QM $EXTRAS_PACDIFF" in
            "no yes" | "yes no" | "yes yes")
                printf2 "\nAdditional commands:\n" ;;
        esac
        if [ "$EXTRAS_PACMAN_QM" = "yes" ] ; then
            echo2 "==> pacman -Qm"
            pacman -Qm |& Indent 1
        fi
        if [ "$EXTRAS_PACDIFF" = "yes" ] ; then
            echo2 "==> eos-pacdiff"
            eos-pacdiff --indent="    -> "
        fi
    fi
}

SpecialUpdateAndExtras() {
    local ret=0
    special_update
    ret=$?
    ExtraChecks
    return $ret
}

pacman_ext() {
    if [ -z "$1" ] ; then
        CheckUpdates
        [ "$just_checkupdates" = "yes" ] && return 0
        if [ $retval -eq 0 ] ; then
            ExtraChecks
            return 0
        fi
    fi

    local db_opt="-Sy"                     # $db_opt used by special_update()

    case "$helper" in
        /usr/bin/pacman) ;;
        *) special_update_helper
           return $?
           ;;
    esac

    # Handle additional features.
    case "$2" in
        "")
            case "$1" in
                -Syu|-Suy|-ySu|-yuS|-uSy|-uyS|"")
                    SpecialUpdateAndExtras
                    return $?
                    ;;
                -Syyu)
                    db_opt="-Syy"
                    SpecialUpdateAndExtras
                    return $?
                    ;;
            esac
            ;;
        *)
            case "$1" in
                --dg | --downgrade) shift ; eos-downgrade "$@" ; return $? ;;
            esac
            ;;
    esac

    if [ "$EXTRAS_PW_WHEN_NEEDED" = "yes" ] ; then
        verbose2 "will check need for sudo with pacman ..."
        /usr/bin/pacman-sudo-internal "$@"
    else
        /usr/bin/pacman "$@"     # normal pacman, so user must take care of needed privileges
    fi
}

InitialBanner() {
    _DefVal() { printf "%-5s" "[$1]" ; }
    if [ "$BANNER_INITIAL" = "yes" ] ; then
        cat <<EOF
$progname: A pacman wrapper with additional features.

Additional features and their defaults (see file /etc/$progname.conf):
   - $(_DefVal $EXTRAS_PW_WHEN_NEEDED) require password only when needed
   - $(_DefVal $EXTRAS_PACMAN_LOCK_CHECK) db lock file check
   - $(_DefVal $EXTRAS_NVIDIA_CHECK) nvidia & kernel update check
   - $(_DefVal $EXTRAS_VIRTUALBOX_CHECK) check virtualbox vs. virtualbox-ext-oracle version compatibility
   - $(_DefVal $EXTRAS_KEYRINGS_FIRST) update keyrings first
   - $(_DefVal $EXTRAS_SYNC_AT_END) 'sync' at end

EOF
    fi
}

Usage() {
    InitialBanner
    cat <<EOF
Usage:       $progname
             $progname <option1>
             $progname <option2> [other-parameters]
             $progname <pure-pacman-options>

<option1>:   -Syu                     Updates packages with additional features.
             -Syyu                    Like -Syu, with extra --refresh (see 'man pacman').
             --paru                   Like -Syu, also updates AUR packages using paru.
             --yay                    Like -Syu, also updates AUR packages using yay.
             --aur                    Like --paru or --yay (tried in this order).

<option2>:   --wait-enter             Waits for user to press the Enter key to continue in the end.
             --dg, --downgrade        (Experimental) Downgrades given Arch or EndeavourOS packages.
             --banner                 Show the intial banner that tells about $progname.
             --no-banner              Do not show the intial banner that tells about $progname.
             --show-cmd               Shows the actual commands to be executed.
             --build                  Builds and installs a package using a local PKGBUILD (advanced).
             --extras                 Still extra checks like 'pacman -Qm' and 'eos-pacdiff'.
             --mirror-swap-eos        (Advanced) Swap the order of given two mirrors in /etc/pacman.d/endeavouros-mirrorlist.
             -j, --just-checkupdates  Only check whether updates are available.
             --checkupdates           Use 'checkupdates' for checking updates from the repos.
             --checkupdatesext        Use 'checkupdatesext' for checking updates from the repos.
             --expac                  Use 'checkupdates' and 'expac' for checking updates from the repos.
             --updates="Updates"      'Updates' is the output of 'checkupdates'. Useful in scripts.
             -v, --verbose            Be more verbose, show commands etc.
             -c, --connection-check   Check internet connection first.

If no parameter is provided, install updates only if available.
The <option1> must be used as the *only* parameter on the command line.
Option --wait-enter can be used with other parameters, e.g. <pure-pacman-options>.
Options --downgrade and --dg require one or more package names.
Option --build can be followed by makepkg options.
Otherwise $progname works like 'pacman <pure-pacman-options>' *without* any additional features.

EOF
    MayExit "$1"
}

Main() {
    local -r progname="$(basename "$0")"   # $progname used by various functions here

    # "basic" fetures
    local   EXTRAS_PW_WHEN_NEEDED=yes          # yes=ask password only when needed, no=user handles privileges
    local   EXTRAS_KEYRINGS_FIRST=yes          # if yes, update Arch keyring packages first; if no, rely on systemd archlinux-keyring-wkd-sync.timer
    local   EXTRAS_NVIDIA_CHECK=yes            # check nvidia driver and kernel "update compatibility" (runs only if nvidia gpu is detected)
    local   EXTRAS_VIRTUALBOX_CHECK=yes        # check virtualbox and virtualbox-ext-oracle version compatibility
    local   EXTRAS_PACMAN_LOCK_CHECK=yes       # check and manage file /var/lib/pacman/db.lck
    local   EXTRAS_SYNC_AT_END=yes             # may add the 'sync' command as last

    # additional features
    local RUN_MORE_EXTRAS=no
    local   EXTRAS_PACMAN_QM=yes
    local   EXTRAS_PACDIFF=yes

    local CHECKUPDATES=checkupdates
    local SHOW_CMD=no
    local VERBOSE=no
    local BANNER_INITIAL=yes
    local AUR_HELPER=/usr/bin/yay

    source /etc/$progname.conf || WARN "/etc/$progname.conf not found, using defaults"

    local wait_enter="no"
    local retval
    local args=() arg
    local show_help_now=no
    local just_checkupdates=no
    #local extra_checks="$RUN_MORE_EXTRAS"
    local checkupdates="$CHECKUPDATES"
    local aur_helper="/usr/bin/${AUR_HELPER##*/}"
    local helper=/usr/bin/pacman           # $helper used by special_update()
    local given_checkupdates=""

    if false && [ "$EXTRAS_KEYRINGS_FIRST" = "no" ] ; then
        if [ -z "$(systemctl status archlinux-keyring-wkd-sync.timer | grep " Active: active ")" ] ; then
            EXTRAS_KEYRINGS_FIRST=yes
        fi
    fi

    # Handle new options and changed pacman options here.
    # Gather all pacman options for the pacman call.

    while true ; do
        arg="$1"
        case "$arg" in
            "")
                break
                ;;
            -h | --help)
                show_help_now=yes
                args+=("$arg")
                ;;
            -v | --verbose)
                VERBOSE=yes
                args+=("$arg")
                ;;
            --wait-enter)
                wait_enter=yes                                # useful for pacseek
                ;;
            --show-cmd)
                SHOW_CMD=yes
                ;;
            --aur)
                helper=$aur_helper
                [ -x $helper ] || DIE "AUR helpers 'paru' or 'yay' not found."
                verbose2 "$(basename $helper) selected."
                ;;
            --paru | --yay)
                helper=/usr/bin/${arg#*--}
                [ -x $helper ] || DIE "AUR helper '$helper' not found."
                ;;
            --banner)
                BANNER_INITIAL=yes
                ;;
            --no-banner)
                BANNER_INITIAL=no
                ;;
            --show-native-options)
                echo "--aur --paru --yay --downgrade --dg --no-banner --wait-enter --show-cmd --build --show-native-options --connection-check $arg"
                exit
                ;;
            --build)
                shift
                _Build "$@"
                exit
                ;;
            -j | --just-checkupdates)
                just_checkupdates=yes
                ;;
            --checkupdates | --checkupdatesext | --expac)
                checkupdates=${arg:2}
                ;;
            --updates=*)
                given_checkupdates="${arg#*=}"
                ;;
            --extras)
                RUN_MORE_EXTRAS=yes
                ;;
            --mirror-swap-eos)
                shift
                mirror-swap-eos "$1" "$2"
                exit $?
                ;;
            -c | --connection-check)
                echo2 "Checking internet connection..."
                eos-connection-checker || DIE "no internet connection!"
                ;;
            *)
                args+=("$arg")
                ;;
        esac
        shift
    done

    InitialBanner

    if [ "$show_help_now" = "yes" ] ; then
        Usage
        echo "pacman: $(LANG=C /usr/bin/pacman -Qi pacman | grep ^Description | sed 's|^Description[ ]*: ||')"
        LANG=C /usr/bin/pacman "${args[@]}"
        return $?
    fi

    pacman_ext "${args[@]}"
    retval=$?

    [ "$wait_enter" = "yes" ] && read -p "Press ENTER to continue: " >&2

    return $retval
}
Main "$@"
