#!/bin/bash

# A pacman with additionalfeatures for update, and downgrade support.

echo2()   { echo "$@" >&2 ; }
printf2() { printf "$@" >&2 ; }
DIE()     { echo2 "$progname: error: $1" ; Usage 1 ; }
WARN()    { echo2 "$progname: warning: $1" ; MayExit "$2" ; }
MayExit() { [ -n "$1" ] && exit $1 ; }

Usage() {
    cat <<EOF
$banner
Usage:       $progname
             $progname <option1>
             $progname <option2> [other-parameters]
             $progname <pacman-options>
<option1>:   -Syu                Updates packages with additional features.
             -Syyu               Like -Syu, with extra --refresh (see 'man pacman').
             --paru              Like -Syu, also updates AUR packages using paru.
             --yay               Like -Syu, also updates AUR packages using yay.
             --aur               Like --paru or --yay (tried in this order).
<option2>:   --wait-enter        Waits for user to press the Enter key to continue in the end.
             --dg, --downgrade   (Experimental) Downgrades given Arch or EndeavourOS packages.

If no parameter is provided, -Syu is assumed.
The <option1> $msgtail
Option --wait-enter can be used with other parameters, e.g. <pacman-options>.
Options --downgrade and --dg require one or more package names.
Otherwise $progname works like 'pacman <pacman-options>' *without* any additional features.

EOF
    MayExit "$1"
}

normal_pacman_cmd()      { /usr/bin/pacman-sudo-internal "$@" ; }
special_update_helper()  { helper="/usr/bin/sudo -u $LOGNAME $helper" ; special_update ; }

eos-virtualbox-check() {
    # if installed, check versions of virtualbox-ext-oracle vs. virtualbox
    if [ -x /usr/bin/virtualbox ] && [ -r /usr/share/virtualbox/extensions/Oracle_VM_VirtualBox_Extension_Pack-*.vbox-extpack ] ; then
        local versions ver_app ver_ext
        case "$helper" in
            /usr/bin/paru) readarray -t versions <<< $(LANG=C paru -Si virtualbox virtualbox-ext-oracle | grep "^Version" | awk '{print $NF}') ;;
            *)             # bug: yay does not find virtualbox-ext-oracle together with virtualbox!
                           readarray -t versions <<< $( { LANG=C /usr/bin/pacman -Si virtualbox; LANG=C yay -Si virtualbox-ext-oracle; } | grep "^Version" | awk '{print $NF}') ;;
        esac
        if [ ${#versions[@]} -eq 2 ] ; then
            ver_app=${versions[0]%-*}
            ver_ext=${versions[1]%-*}
            if [ "$ver_app" != "$ver_ext" ] ; then
                ignore_aur_pkgs="--ignore virtualbox-ext-oracle"
                # printf2 "warning: ignoring virtualbox-ext-oracle update due to incompatible versions.\n"
            fi
        fi
    fi
}

special_update() {
    cat <<EOF
$banner

Additional features:
   - require password only when needed
   - db lock file check
   - nvidia & kernel update check
   - check virtualbox vs. virtualbox-ext-oracle version compatibility
   - update keyrings first if archlinux-keyring-wkd-sync.timer is not active
   - 'sync' at end

EOF
    local ignore_aur_pkgs=""
    local -r lockfile=/var/lib/pacman/db.lck logfile="$HOME/.cache/$progname.log"
    if [ -e $lockfile ] && fuser $lockfile &>/dev/null ; then
        WARN "$lockfile is in use." 1
    fi
    # Build the command for sudo:
    local sudo_cmd
    [ -e $lockfile ] && sudo_cmd=("rm -f $lockfile")
    eos-kernel-nvidia-update-check --needed
    [ $? -eq 2 ] && sudo_cmd=("eos-kernel-nvidia-update-check")
    if [ "$keyrings_first" = "yes" ] ; then
        sudo_cmd+=("/usr/bin/pacman $db_opt --needed archlinux-keyring endeavouros-keyring && /usr/bin/pacman -Su")
    else
        sudo_cmd+=("/usr/bin/pacman ${db_opt}u")
    fi
    if [ "$helper" != "/usr/bin/pacman" ] ; then
        eos-virtualbox-check
        sudo_cmd+=("$helper -Sua $ignore_aur_pkgs")
    fi
    sudo_cmd+=("sync")
    # Handle the sudo command:
    local -r last_cmd="${sudo_cmd[@]: -1}"
    sudo_cmd=($(printf "%s\n" "${sudo_cmd[@]}" | sed "/^$last_cmd$/!s/$/ \&\&/" ))  # see 'info sed', chapter 6.4 for details!
    echo "$(date +%Y%m%d-%H%M): ${sudo_cmd[@]}" >> "$logfile"
    [ "$show_cmd" = "yes" ] && echo "sudo bash -c \"${sudo_cmd[*]}\""
    sudo bash -c "${sudo_cmd[*]}"
    return $?
}

pacman_ext() {
    local -r progname="$(basename "$0")"   # $progname used by various functions here
    local helper=/usr/bin/pacman           # $helper used by special_update()
    local db_opt="-Sy"                     # $db_opt used by special_update()
    local opt
    local -r banner="$progname: A pacman wrapper with additional features for package update."
    local -r msgtail="must be used as the *only* parameter on the command line."
    case "$2" in
        "") case "$1" in    # additional features
                --aur)                            helper=/usr/bin/paru
                                                  [ -x $helper ] || helper=/usr/bin/yay
                                                  [ -x $helper ] || DIE "AUR helpers 'paru' or 'yay' not found."
                                                  special_update_helper
                                                  return $?
                                                  ;;
                --paru | --yay)                   helper=/usr/bin/${1#*--}
                                                  [ -x $helper ] || DIE "AUR helper '$helper' not found."
                                                  special_update_helper
                                                  return $?
                                                  ;;
                -Syu|-Suy|-ySu|-yuS|-uSy|-uyS|"") special_update
                                                  return $?
                                                  ;;
                -Syyu)                            db_opt="-Syy"
                                                  special_update
                                                  return $?
                                                  ;;
            esac
            ;;
        *)  case "$1" in
                --dg | --downgrade) shift ; eos-downgrade "$@" ; return $? ;;
            esac
            ;;
    esac
    for opt in "$@" ; do
        case "$opt" in
            --aur | --paru | --yay) DIE "special option '$opt' $msgtail" ;;  # should have been handled above!
            -h | --help) Usage ; return ;;
        esac
    done
    normal_pacman_cmd "$@"
}

Main() {
    local wait_enter=no
    local show_cmd=no
    local retval
    local args=() arg
    local keyrings_first=no   # if yes, update keyring packages first; if no, rely on systemd archlinux-keyring-wkd-sync.timer

    if [ "$keyrings_first" = "no" ] ; then
        if [ -z "$(systemctl show archlinux-keyring-wkd-sync.timer | grep ^NextElapseUSecRealtime=)" ] ; then
            keyrings_first=yes
        fi
    fi

    for arg in "$@" ; do
        case "$arg" in
            -h | --help)
                if [ $# -eq 1 ] ; then
                    pacman_ext $arg
                    echo "pacman: $(LANG=C /usr/bin/pacman -Qi pacman | grep ^Description | sed 's|^Description[ ]*: ||')"
                fi
                LANG=C /usr/bin/pacman "$@"
                return
                ;;
            --wait-enter) wait_enter=yes ;;  # e.g. for pacseek
            --show-cmd)  show_cmd=yes ;;
            *) args+=("$arg") ;;
        esac
    done

    pacman_ext "${args[@]}"

    retval=$?

    [ "$wait_enter" = "yes" ] && read -p "Press ENTER: " >&2

    return $retval
}
Main "$@"
