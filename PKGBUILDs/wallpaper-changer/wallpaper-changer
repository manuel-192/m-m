#!/bin/bash

DIE() {
    echo "$progname: error: $1" >&2
    Usage 1
    # exit 1
}

FindFiles() {
    local opt_depth="$1"
    local opt_name="$2"
    local suffix="$3"
    local folder="$4"

    fd $opt_depth $opt_name ".*$suffix" "$folder"
}

CheckHour() {
    if [ -z "$1" ] || [ "$1" -gt 23 ] || [ "$1" -lt 0 ] ; then
        DIE "value for hour ($1) must be 0..23"
    fi
}
CheckMinSec() {
    if [ -z "$1" ] || [ "$1" -gt 59 ] || [ "$1" -lt 0 ] ; then
        DIE "value for $2 ($1) must be 0..59"
    fi
}

SetTimePeriod() {
    # $val = XY, where X=integer Y=unit (s=sec,m=min,h=hour)
    local val="$1"            # e.g. 23s
    local int="${val:: -1}"   # e.g. 23

    # [ "${int//[0-9]/}" ] && DIE "the number part in '$val' is broken"

    case "${val: -1}" in
        [Hh]) val="00/$int:00:00"; CheckHour "$int" ;;
        [Mm]) val="*:00/$int:00";  CheckMinSec "$int" minute ;;
        [Ss]) val="*:*:00/$int";   CheckMinSec "$int" second ;;
        *)
            # DIE "the unit part in '$val' is broken"
            ;;
    esac
    sed -i ~/.config/systemd/user/wallpaper-changer.timer \
        -e "s|^OnCalendar=.*|OnCalendar=$val|"
    ReloadTimer
}

ReloadTimer() {
    # echo "$progname: reloading the timer."
    systemctl --user daemon-reload
}

EditTimer() {
    local timerfile="$HOME/.config/systemd/user/$progname.timer"
    while true ; do
        /bin/emacs --reverse-video "$timerfile"
        TimerIsValid && break
    done
    ReloadTimer
}

TimerIsValid() {
    local oncal=$(grep "OnCalendar=" $HOME/.config/systemd/user/$progname.timer)
    local oncal_orig="$oncal"
    oncal="${oncal##*=}"
    local h="${oncal%%:*}"
    oncal="${oncal#*:}"
    local m="${oncal%%:*}"
    oncal="${oncal#*:}"
    local s="${oncal%%:*}"
    local msg="changed from $omcal_orig to "
    local changed=no

    case "$h" in
        */* | "*" | [0-1][0-9] | 2[0-3]) ;;
        *) h="00"; changed=yes ;;
    esac
    case "$m" in
        */* | "*" | [0-5][0-9]) ;;
        *) m="00"; changed=yes ;;
    esac
    case "$s" in
        */* | "*" | [0-5][0-9]) ;;
        *) s="00"; changed=yes ;;
    esac

    if [ $changed = yes ] ; then
        oncal="OnCalendar=$h:$m:$s"
        echo "==> Info: changed from $oncal_orig to $oncal" >&2
        sed -i "$timerfile" -e "s|^OnCalendar=.*|$oncal|"
    fi

    # case "$h" in
    #     */*)
    #         case "$m$s" in
    #             [0-5][0-9][0-5][0-9]) ;;
    #             *) DIE "'$msg" ;;
    #         esac
    #         ;;
    #     "*")
    #         case "$m" in
    #             */*)
    #                 case "$s" in
    #                     [0-5][0-9]) ;;
    #                     *) DIE "'$msg" ;;
    #                 esac
    #                 ;;
    #             "*")
    #                 case "$s" in
    #                     */*) ;;
    #                     [0-5][0-9]) ;;
    #                     *) DIE "'$msg" ;;
    #                 esac
    #                 ;;
    #             *)
    #                 DIE "'$msg"
    #                 ;;
    #         esac
    #         ;;
    #     *)
    #         DIE "'$msg"
    #         ;;
    # esac
}

ShowTimer() {
    local oncal=$(grep "OnCalendar=" $HOME/.config/systemd/user/$progname.timer)
    oncal=${oncal##*=}
    local h=${oncal%%:*}
    oncal=${oncal#*:}
    local m=${oncal%%:*}
    oncal=${oncal#*:}
    local s=${oncal%%:*}

    if [[ "$h" =~ / ]] ; then
        echo "every ${h#*/} hours"
    elif [[ "$m" =~ / ]] ; then
        echo "every ${m#*/} mimutes"
    elif [[ "$s" =~ / ]] ; then
        echo "every ${s#*/} seconds"
    else
        echo "$h:$m:$s"
    fi
}

Usage() {
    cat <<EOF >&2
Usage:     $progname [options]
Options:
           -h, --help            This help.
           -t, --timer           Configures the time to wait before showing the next picture.
                                 The value is an integer with one of suffixes
                                     h  (hours)
                                     m  (minutes)
                                     s  (seconds)
                                 or an 'OnCalendar' value described in 'man systemd.time'.
           -s, --show-interval   Show the currently configured value of the time interval
                                 between wallpaper changes.
           -r, --reload          Reload the services, including this timer.
           -e, --edit            (Advanced) Edit the timer service definition file.
                                 See also: 'man systemd.time'.
Configuration
           If file $myconf2 exists, it will be read.
           Otherwise file $commonconf will be read.

           They are bash files, and the supported settings are:
           SUPPORTED_FOLDERS       An array of absolute folder paths.
                                   Default: (${SUPPORTED_FOLDERS[*]})
           SUPPORTED_SUFFIXES      An array of file name endings as strings.
                                   Default: (${SUPPORTED_SUFFIXES[*]})
                                   Note: a string can be longer than just e.g. "jpg".
           RECURSE_SUFFIXES        "yes" or "no". Default: "$RECURSE_SUBFOLDERS"
           SEARCH_CASE_SENSITIVE   "yes" or "no". Default: "$SEARCH_CASE_SENSITIVE"
Examples:
           \$ $progname -t 10m           # sets the interval to 10 minutes
           \$ $progname -s
                every 10 minutes
           \$ $progname -t '*:00/15:00'  # sets the interval to 15 minutes
EOF
    
    [ "$1" ] && exit $1
}

Main() {
    local progname="wallpaper-changer"    # don't use: local progname="$(basename "$0")"
    local -r myconf="$HOME/.config/$progname.conf"
    local -r myconf2='~'/.config/"$progname".conf
    local -r commonconf="/etc/$progname.conf"

    local SUPPORTED_FOLDERS=(/usr/share/endeavouros/backgrounds)
    local SUPPORTED_SUFFIXES=(jpg png)
    local RECURSE_SUBFOLDERS="no"
    local SEARCH_CASE_SENSITIVE="no"

    while [ "$1" ] ; do
        case "$1" in
            -h | --help)       Usage 0 ;;
            -t=* | --timer=*)  SetTimePeriod "${1#*=}"; exit 0 ;;
            -t | --timer)      SetTimePeriod "$2";      exit 0 ;;
            -t*)               SetTimePeriod "${1:2}";  exit 0 ;;
            -s | --show-timer) ShowTimer;               exit 0 ;;
            -r | --reload)     ReloadTimer;             exit 0 ;;
            -e | --edit)       EditTimer;               exit 0 ;;
            --status)          RunInTerminal "systemctl --user status $progname.timer"; exit 0 ;;
            *)                 DIE "unsupported parameter '$1'" ;;
        esac
    done
    local log="/tmp/$progname.log"

    if [ -e "$myconf" ] ; then
        source "$myconf" || return 1
    else
        source "$commonconf" || return 1
    fi

    local opt_name=""
    local opt_depth="--maxdepth 1"
    [ "$SEARCH_CASE_SENSITIVE" = "yes" ] && opt_name="--case-sensitive"
    [ "$RECURSE_SUBFOLDERS"    = "yes" ] && opt_depth=""

    local folder suffix
    local filelist=() tmp=()

    for folder in "${SUPPORTED_FOLDERS[@]}" ; do
        for suffix in "${SUPPORTED_SUFFIXES[@]}" ; do
            readarray -t tmp <<< $(FindFiles "$opt_depth" "$opt_name" "$suffix" "$folder")
            [ ${#tmp[@]} -gt 0 ] && filelist+=("${tmp[@]}")
        done
    done

    local count=${#filelist[@]}

    if [ $count -gt 0 ] ; then
        local nr=$(shuf -i 0-$((count-1)) -n1)
        local file="${filelist[$nr]}"            # $(echo "$filelist" | sed -n "${nr}p")
        if [ -r "$file" ] ; then
            echo "$(date +%Y%m%d-%H%M): $file" >> $log
            eos-wallpaper-set "$file"
        else
            DIE "wallpaper file '$file' not readable"
        fi
    else
        DIE "no wallpapers found."
    fi
}

Main "$@"
