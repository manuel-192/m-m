#!/bin/bash

# Manager for manual interventions.

echo2() { echo -e "$@" >&2; }
WARN()  { echo2 "==> $progname: warning: $1"; }
DIE()   { echo2 "==> $progname: error: $1"; exit 1; }

RUN() {
    echo2 "   ->" "$@"
    if "$@" ; then
        return 0
    else
        DIE "'$*' failed."
        exit 1
    fi
}

MarkOk() {
    echo2 "  ==> marking '$1' as handled"
    echo "$1" | sudo tee -a "$handled_fixes" >/dev/null
}
IsOk() { grep "^$1$" "$handled_fixes" &>/dev/null; }

FetchHotfixFile() {
    local testing=yes

    local -r pname=eos-manual-intervention
    local -r fname=$pname.interventions
    local -r github="https://github.com/endeavouros-team/PKGBUILDS/raw/master/$pname/$fname"
    local -r gitlab="https://gitlab.com/endeavouros-filemirror/PKGBUILDS/raw/master/$pname/$fname"
    local -r githubm="https://github.com/manuel-192/m-m/raw/master/PKGBUILDs/$pname/$fname"

    if [ ! -e "$mifile" ] ; then
        if [ $testing = yes ] ; then
            sudo mkdir -p "$dir"
            wget -qO "$HOME/.$fname" "$githubm"
        else
            wget -qO "$HOME/.$fname" "$github" || wget -O "$HOME/.$fname" "$gitlab"
        fi
        if [ -e "$HOME/.$fname" ] ; then
            sudo bash -c "cp '$HOME/.$fname' '$mifile' && chmod -w '$mifile'"
            rm -f "$HOME/.$fname"
        else
            rm -f "$HOME/.$fname"
            DIE "downloading $fname failed"
        fi
    fi

    if [ -e "$mifile" ] ; then
        source "$mifile"
    fi
}

RunFixesIfNeeded() {
    local count=${#MI_func_names[@]}
    local ix mifunc descr

    for ((ix=0; ix < count; ix+=2)) ; do
        mifunc="${MI_func_names[$ix]}"
        descr="${MI_func_names[$((ix+1))]}"
        if IsOk "$mifunc" ; then
            echo2 "$mifunc:\talready OK"
        else
            echo2 "$mifunc: $descr"
            if $mifunc ; then
                MarkOk "$mifunc"
            else
                return 1
            fi
        fi
    done
}

NewsPage() {
    local bb
    for bb in exo-open kde-open xdg-open firefox ; do
        if [ -x /bin/$bb ] ; then
            /bin/$bb https://archlinux.org/news &
            break
        fi
    done
    [ "$1" ] && exit $1
}

CheckPacmanConf() {
    local -r conf=/etc/pacman.conf
    local lines="$(grep -n "^[ \t]*IgnorePkg[ \t]*=[ \t]*[a-zA-Z0-9]" $conf)"
    if [ "$lines" ] ; then
        cat <<EOF >&2
==> $progname: warning:
==> file $conf contains IgnorePkg line(s). This *may* affect manual interventions.
EOF
        printf "      %s\n" "$lines" >&2
    fi
}

Help() {
    cat <<EOF >&2
Purpose: Execute and manage essential manual interventions.
Usage:   $progname [options]
Options: -h, --help            This help.
         -n, --show-arch-news  Show the Arch news page in a browser.
EOF
    [ "$1" ] && exit $1
}

Options() {
    local arg
    for arg in "$@" ; do
        case "$arg" in
            -h | --help)           Help 0 ;;
            -n | --show-arch-news) NewsPage 0 ;;
        esac
    done
}

Main() {
    local -r progname=${0##*/}
    local -r dir=/etc/$progname
    local -r mifile="$dir/$progname.interventions"
    local -r handled_fixes="$dir/handled.txt"
    local MI_func_names=()

    Options "$@"
    CheckPacmanConf
    FetchHotfixFile
    RunFixesIfNeeded
}

Main "$@"
