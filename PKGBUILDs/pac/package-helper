#!/bin/bash

# Helper for package managers.
#
# Generally,
#   - check pacman database lock
#   - sync after update
#
# For pacman operations
#   - use elevated privileges only when needed
#
# On update, check that
#   - nvidia vs. kernel updates
#   - keyring packages will be updated before other packages
#
# Tip: add these functions to your ~/.bashrc:
#    yay()    { package-helper $FUNCNAME "$@" ; }
#    paru()   { package-helper $FUNCNAME "$@" ; }
#    pacman() { package-helper $FUNCNAME "$@" ; }
#    pac()    { pacman "$@" ; }   # change 'pacman' to 'yay' or 'paru' if you want

DIE() {
    echo "$progname: error: $1" >&2
    Usage
    exit 1
}

Usage() {
    cat <<EOF

Usage: $progname helper [helper-options]
  helper            One of: pacman paru yay
  helper-options    Valid options for the given helper
EOF
}

Cmd() {
    echo "==>" "$@" >&2
    "$@"
}

Pacman-CheckElevatedPrivileges() {
    local rooterr="error: you cannot perform this operation unless you are root."
    local errfile=$(mktemp)
    local errlog
    local retval

    LANG=C /usr/bin/pacman "$@" 2> "$errfile"
    retval=$?
    errlog="$(cat "$errfile")"
    /usr/bin/rm -f "$errfile"

    case "$errlog" in
        "$rooterr")
            LockCheck || return 1
            Cmd su-c_wrapper bash -c "/usr/bin/pacman $* && sync"
            ;;
        "")
            return $retval
            ;;
        *)
            echo2 "$errlog"
            return $retval
            ;;
    esac
}

UpdateCheckKeyrings() {
    local cmd1="/usr/bin/pacman -Sy --needed --noconfirm archlinux-keyring endeavouros-keyring && /usr/bin/pacman -Su"
    local cmd2="/usr/bin/pacman -Syu"
    local cmd="$cmd2"
    local pkg

    if [ -n "$1" ] ; then
        for pkg in "$@" ; do
            case "$pkg" in
                archlinux-keyring | endeavouros-keyring)
                    cmd="$cmd1"
                    break
                    ;;
            esac
        done
    else
        cmd="$cmd1"
    fi
    Cmd su-c_wrapper bash -c "$cmd && sync"
}

LockCheck() {
    echo ":: Checking pacman lock..."
    local lck=/var/lib/pacman/db.lck
    if [ -e $lck ] ; then
        local pid=$(fuser "$lck" | awk '{print $NF}')
        if [ -n "$pid" ] ; then
            echo2 "Pacman lock file $lck is currently used by another process:"
            ps -ef | grep -w "$pid" | grep -v "grep -w $pid" | Indent
            echo2 "Please wait until the process has ended (or kill that process if you can)."
            return 1
        else
            echo2 "Pacman lock file $lck exists but not used by another process."
            echo2 "Deleting $lck now:"
            sudo rm -i $lck
            if [ -e $lck ] ; then
                return 1
            fi
        fi
    fi
}

Update-Syu() {
    # Update all packages, including AUR.
    # Make also various checks.

    LockCheck || return 1
    echo ":: Checking for repository updates..."
    local updates=$(checkupdates | awk '{print $1}')

    if [ -n "$updates" ] ; then
        if lsmod|grep nvidia ; then
            eos-kernel-nvidia-update-check $updates || DIE "update failed"
        fi
        UpdateCheckKeyrings $updates
    else
        echo " there is nothing to do"
    fi

    if [ "$helper" != "/usr/bin/pacman" ] ; then
        Cmd $helper -Sua
        Cmd sync
    fi
}

Main2() {
    if [ -z "$2" ] ; then
        case "$1" in
            "" | -Syu)
                Update-Syu
                return
                ;;
        esac
    fi
    case "$helper" in
        /usr/bin/pacman)
            Pacman-CheckElevatedPrivileges "$@"
            ;;
        *)
            LockCheck || return 1
            Cmd $helper "$@"                    # AUR helper
            Cmd sync
            ;;
    esac
}

Main() {
    local helper="$1"
    shift
    local progname="$(basename "$0")"

    case "$helper" in
        pacman | paru | yay) helper=/usr/bin/$helper ;;
        *) DIE "given helper '$helper' is not supported" ;;
    esac

    Main2 "$@"
}

Main "$@"
