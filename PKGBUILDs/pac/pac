#!/bin/bash
#
# Author: manuel (see https://forum.endeavouros.com)
#
# Wrapper for pacman. Knows when to have root permissions.
# Usage: pacmanwrapper [pacman-parameters]

_sudo() {
    local sudo=""

    if [ $EUID -eq 0 ] ; then
        sudo=""
    elif [ -n "$(/usr/bin/groups | /usr/bin/grep -w wheel)" ] ; then
        sudo=/usr/bin/sudo
    else
        for xx in su-c_wrapper pkexec2 pkexec ; do
            if [ -x /usr/bin/$xx ] ; then
                sudo=/usr/bin/$xx
                break
            fi
        done
    fi
    echo "$sudo"
}

_pac2()
{
    local pacman=/usr/bin/pacman
    local xx sudo="$(_sudo)"

    case "$needs_privileges" in
        no) $pacman "$@" ; return $? ;;
        yes) $sudo $pacman "$@" ; return $? ;;
        "") ;;
    esac

    local rooterrorstring="error: you cannot perform this operation unless you are root."
    local retpacman
    local log=$(mktemp)

    LANG=C $pacman "$@" >& $log
    retpacman=$?

    case "$retpacman" in
        0) cat $log ;;
        1)
            if [ "$(cat $log)" = "$rooterrorstring" ] ; then
                $sudo $pacman "$@"
            else
                cat $log
            fi
            ;;
        *) cat $log ; echo "Warning: pacman returned error code $retpacman." >&2 ;;
    esac
    rm -f $log
    return $retpacman
}

_GitHub_is_ok() {
    if [ -e /etc/pac-no-ghc.cnf ] ; then
        return 0
    fi
    local has_github_mirror=no

    if [ -n "$(grep "^Server = https://github.com/" /etc/pacman.conf)" ] ; then
        has_github_mirror=yes
    else
        local list
        for list in $(grep "^Include = /etc/pacman.d/" /etc/pacman.conf | uniq | awk '{print $NF}') ; do
            if [ -r "$list" ] ; then
                if [ -n "$(grep "^Server = " $list | head -n 2 | grep github)" ] ; then    # 2 is an ad hoc value...
                    has_github_mirror=yes
                fi
            else
                echo "Error: file '$list' does not exist. Check /etc/pacman.conf." >&2
            fi
        done
    fi

    if [ "$has_github_mirror" = "yes" ] ; then
        local url=https://github.com/endeavouros-team/repo-testing/releases/download/x86_64/endeavouros-testing-dev.db
        wget -q -O /dev/null $url
    fi
}

_pac1() {
    # workaround for github problems
    local opt=""
    local conf=""
    local need_check_github=yes
    local needs_privileges=no
    local arg

    for arg in "$@" ; do
        case "$arg" in
            -Si* | -Sg* | -Sl* | -Ss* | -Dk* | -Fl*)
                need_check_github=no
                break
                ;;
            -U | -Q* | -R* | -Sc* | -V | -h | --help)
                need_check_github=no
                break
                ;;
        esac
    done

    if [ -n "$needs_privileges" ] ; then
        for arg in "$@" ; do
            case "$arg" in
                -Si* | -Sg* | -Sl* | -Ss* | -Dk* | -Fl*)
                    break
                    ;;
                -U* | -S* | -R* | -D* | -y* | -u* | --refresh | -Fy*)
                    needs_privileges=yes
                    break
                    ;;
            esac
        done
    fi

    if [ "$need_check_github" = "yes" ] ; then
        _GitHub_is_ok || {
            echo "GitHub has problems, using local db." >&2
            conf="$HOME/pacman.conf.tmp"
            rm -f "$conf"
            opt="--config '$conf'"
            cp /etc/pacman.conf "$conf"
            sed -i "$conf" \
                -e 's|^\(Server = https://github.com/.*\)$|#\1|' \
                -e 's|^\(Include = /etc/pacman.d/mirrorlist-m\)$|#\1|'
        }
    fi

    _pac2 $opt "$@"
}

_pac1 "$@"
