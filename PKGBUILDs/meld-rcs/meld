#!/bin/bash

DIE() {
    source /etc/bash-colors.conf
    [ "$RED" ]   || local -r RED=""
    [ "$RESET" ] || local -r RESET=""
    local -r progname="${0##*/}"
    echo -e "${RED}$progname: error: $1${RESET}" >&2
    exit 1
}

MELD() {
    /bin/meld "$@"  &> /dev/null &
}

Modify2para() {
    local -n _ff="$1"   # file
    local -n _dd="$2"   # folder

    [ "${_ff//\//}" = "$_ff" ] && _ff="./$_ff"     # if no dir in the file, add ./ in front
    [ "$_dd" != "/" ]          && _dd="${_dd%/}"   # remove possible trailing slash
    _dd="$_dd/${_ff##*/}"                          # add file name after the folder name
}

MELD2PARA() {
    # Handle two parameters.
    # A special case: if the two parameters are (in either order):
    #    - FolderA/file
    #    - FolderB
    # compare FolderA/file with FolderB/file.

    local aa="$1"
    local bb="$2"

    if [ -d "$aa" ] && [ -f "$bb" ] ; then
        Modify2para bb aa
    elif [ -f "$aa" ] && [ -d "$bb" ] ; then
        Modify2para aa bb
    fi

    MELD "$aa" "$bb"
}

InGitTree() {
    local dir="$PWD"
    while [ "$dir" ] ; do
        [ -d "$dir/.git" ] && return 0
        dir="${dir%/*}"
    done
    return 1
}

MeldRcs() { [ "$1" ] && meldrcs "$@" || DIE "RCS detected, meld needs parameters" ; }

Meld() {
    # Changing meld operation:
    # - plain 'meld' means 'meld .'
    # - compare two files when one parameter is a folder

    local has_git=no
    local has_rcs=no
    # Limit instances to $max_meld_instances
    local -r max_meld_instances=4
    local linecount=$(/bin/ps -C meld | tail -n+2 | wc -l)
    [ $linecount -gt $((max_meld_instances+1)) ] && DIE "sorry, only $max_meld_instances 'meld' instances are allowed to run."

    InGitTree  && has_git=yes
    [ -d RCS ] && has_rcs=yes

    case "$1" in
        -R) shift; MeldRcs "$@" ;;
        -G) shift; meldgit "$@" ;;
        *)
            # handle special case of 2 file or folder parameters
            local args=("$@")
            if [ ${#args[@]} -eq 2 ] ; then
                local aa="${args[0]}" bb="${args[1]}"
                if [ -d "$aa" ] && [ -f "$bb" ] ; then
                    MELD2PARA bb aa
                    return
                elif [ -f "$aa" ] && [ -d "$bb" ] ; then
                    MELD2PARA aa bb
                    return
                fi
            fi
            # figure out either GIT or RCS comparison
            case "$has_git$has_rcs" in
                nono)   MELD "$@" ;;
                yesno)  meldgit "$@" ;;
                noyes)  MeldRcs "$@" ;;
                yesyes) case "$(printf "GIT\nRCS\n"  | fzf)" in
                            GIT) meldgit "$@" ;;
                            RCS) MeldRcs "$@" ;;
                        esac
                        ;;
            esac
            ;;
    esac
}

Meld "$@"
