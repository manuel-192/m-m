#!/bin/bash

DIE() {
    local progname="$(basename "$0")"
    echo "$progname: error: $1" >&2
    exit 1
}

_meld_do() {
    setsid /usr/bin/meld "$@" &> /dev/null
}

meld() {
    # Adding support for 'meld' with
    # - git and hub
    # - RCS
    # - comparing two files when one of the args is a folder name
    local xx
    local parents="$PWD"
    local has_git=no

    # Is this a git tree?

    while [ -n "$parents" ] ; do
        if [ -d "$parents/.git" ] ; then
            has_git=yes
            break
        fi
        [ "$parents" = "/" ] && break
        parents="$(dirname "$parents")"
    done

    if [ "$has_git" = "yes" ] ; then
        if [ -z "$1" ] ; then
            # meld for the current folder in git tree
            _meld_do .
            return
        fi
    else
        # no git tree
        if [ -d RCS ] ; then
            # We have RCS folder here, so check if this requires RCS comparison.
            # Suffices to have an existing file parameter.
            for xx in "$@" ; do
                if [ -r "$xx" ] ; then
                    meld-rcs-helper "$@" &
                    return
                fi
            done
        fi
        DIE "RCS comparison requires file parameters."
    fi

    if [ -n "$1" ] && [ -n "$2" ] && [ -z "$3" ] && [ -e "$1" ] && [ -e "$2" ] ; then
        # Two args, files or folders.
        # If one of them is a folder, meld needs help to use the file in the folder.
        local f1="$1"
        local f2="$2"
        if [ -d "$f1" ] && [ ! -d "$f2" ] ; then
            f1="${f1%/}"                             # remove possible trailing slash
            f1="$f1/$(basename "$f2")"               # add file name after the folder name
        elif [ -d "$f2" ] && [ ! -d "$f1" ] ; then
            f2="${f2%/}"
            f2="$f2/$(basename "$f1")"
        fi
        _meld_do "$f1" "$f2"
    else
        # Other cases
        _meld_do "$@"
    fi
}

meld "$@"
