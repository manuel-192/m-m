#!/bin/bash

DIE() {
    local progname="$(basename "$0")"
    echo "$progname: error: $1" >&2
    exit 1
}

_meld_do() {
    /usr/bin/meld "$@" &> /dev/null &
}

ConcludeVCS() {
    GetAvailableVCS() {
        # Is this a git tree? Or just RCS? Or both?
        local parents="$PWD"

        while [ -n "$parents" ] ; do
            if [ -d "$parents/.git" ] ; then
                has_git=yes
                break
            fi
            [ "$parents" = "/" ] && break
            parents="${parents%/*}"
        done
        [ -d RCS ] && has_rcs=yes
    }
    local has_git=no
    local has_rcs=no
    
    GetAvailableVCS                # get values for 'has_{git,rcs}'

    case "$has_git $has_rcs" in
        "yes no")   prefer=GIT; return ;;  # obvious
        "no yes")   prefer=RCS; return ;;  # obvious
        "no no")    prefer=GIT; return ;;  # just comparing local files/folders? GIT is better!
        "yes yes")
            prefer=GIT
            local rcs_found=no
            for arg in "$@" ; do
                case "$arg" in
                    -*) ;;
                    *)
                        [ -d "$arg" ] && return                           # RCS does not handle folders
                        if [ -f "$arg" ] && [ -f RCS/"$arg",v ] ; then
                            rcs_found=yes                                 # RCS file found
                        fi
                        ;;
                esac
            done
            [ $rcs_found = yes ] && prefer=RCS
            return
            ;;
    esac
    DIE "cannot conclude the preferred VCS"
}

meld() {
    # Adding support for 'meld' with
    # - git and hub
    # - RCS
    # - comparing two files when one of the args is a folder name
    local arg
    local prefer=""

    case "$1" in                  # value for 'prefer'
        -R) prefer=RCS; shift ;;
        -G) prefer=GIT; shift ;;
        *)  ConcludeVCS "$@" ;;
    esac

    case "$prefer" in
        RCS)
            echo "==> RCS comparison." >&2
            meld-rcs-helper "$@" &
            return
            ;;
        GIT)
            echo "==> GIT comparison." >&2
            case "$1" in
                "")
                    _meld_do .        # meld for the current folder in git tree
                    ;;
                *)
                    if [ -n "$1" ] && [ -n "$2" ] && [ -z "$3" ] && [ -e "$1" ] && [ -e "$2" ] ; then
                        # Two args, files or folders.
                        # If one of them is a folder, meld needs help to use the file in the folder.
                        local f1="$1"
                        local f2="$2"
                        if [ -d "$f1" ] && [ ! -d "$f2" ] ; then
                            f1="${f1%/}"                             # remove possible trailing slash
                            f1="$f1/$(basename "$f2")"               # add file name after the folder name
                        elif [ -d "$f2" ] && [ ! -d "$f1" ] ; then
                            f2="${f2%/}"
                            f2="$f2/$(basename "$f1")"
                        fi
                        _meld_do "$f1" "$f2"
                    else
                        # Other cases
                        _meld_do "$@"
                    fi
                    ;;
            esac
            ;;
    esac
}

meld "$@"
