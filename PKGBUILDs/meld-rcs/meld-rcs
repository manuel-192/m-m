#!/bin/bash

DIE() {
    local progname="$(basename "$0")"
    echo "$progname: error: $1" >&2
    exit 1
}

_meld_do() {
    /usr/bin/meld "$@" &> /dev/null &
}

meld() {
    # Adding support for 'meld' with
    # - git and hub
    # - RCS
    # - comparing two files when one of the args is a folder name

    local comparison=""

    case "$1" in                                 # try set value for 'comparison'
        -R | --rcs) comparison=RCS; shift ;;
        -G | --git) comparison=GIT; shift ;;
        "")         comparison=GIT ;;
    esac

    case "$comparison" in
        RCS)
            printf "==> $comparison comparison.\n" >&2
            [ "$1" ] || DIE "no parameters for RCS diff"
            meld-rcs-helper "$@" &
            ;;
        GIT)
            local diffs code=0
            diffs="$(git diff 2>/dev/null)" || code=$?
            case "$code" in
                0) ;;
                129) DIE "'git diff' problem, code $code. $PWD is not git directory?" ;;
                *)   DIE "'git diff' problem, code $code" ;;
            esac
            if [ "$diffs" ] ; then
                printf "==> $comparison comparison.\n" >&2
                case "$1" in
                    "")
                        _meld_do .        # meld for the current folder in git tree
                        ;;
                    *)
                        if [ -n "$1" ] && [ -n "$2" ] && [ -z "$3" ] && [ -e "$1" ] && [ -e "$2" ] ; then
                            # Two args, files or folders.
                            # If one of them is a folder, meld needs help to use the file in the folder.
                            local f1="$1"
                            local f2="$2"
                            if [ -d "$f1" ] && [ ! -d "$f2" ] ; then
                                f1="${f1%/}"                             # remove possible trailing slash
                                f1="$f1/$(basename "$f2")"               # add file name after the folder name
                            elif [ -d "$f2" ] && [ ! -d "$f1" ] ; then
                                f2="${f2%/}"
                                f2="$f2/$(basename "$f1")"
                            fi
                            _meld_do "$f1" "$f2"
                        else
                            # Other cases
                            _meld_do "$@"
                        fi
                        ;;
                esac
            else
                echo "No diffs." >&2
            fi
            ;;
        *)
            # ad hoc determination of GIT or RCS using parameters
            local arg
            local argdir argfile

            for arg in "$@" ; do
                case "$arg" in
                    -*) ;;
                    *)  if [ -d "$arg" ] ; then
                            $FUNCNAME -G "$@"                      # folder -> GIT
                            exit
                        fi
                        ;;
                esac
            done

            for arg in "$@" ; do
                case "$arg" in
                    -*) ;;
                    *)  if [ -f "$arg" ] ; then
                            argdir=${arg%/*}
                            argfile=${arg##*/}
                            if [ -f "$argdir/RCS/$argfile",v ] ; then
                                $FUNCNAME -R "$@"                                 # RCS file exists -> RCS
                                exit
                            fi
                        fi
                        ;;
                esac
            done
            DIE "sorry, parameters '$*' don't help determining GIT or RCS"
            ;;
    esac
}

meld "$@"
