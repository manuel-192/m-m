#!/bin/bash
#
# meld with RCS support (file has RCS/file,v):
#     meld [-rX [-rY]] file
# where
#    X and Y are a normal revision numbers or a negative number: -1 = previous from HEAD, -2 = second previous, ...

DIE() { echo "$progname: error: $1" >&2 ; exit 1 ; }

RCSdir() { echo "$(dirname "$1")"/RCS ; }

FileHasRCS() {
    local file="$1"
    test -r "$(RCSdir "$file")"/"$(basename "$file")",v && return 0 || return 1
}

RevFix() {
    # 3.45 + -1 = 3.44
    local rev="$1"
    local head="${HEAD##*.}"   # get the rightmost digit after dot
}

MELD() {
    /bin/meld "$@"  &> /dev/null &
}

CheckRevisions() {
    local rev
    for rev in "$@" ; do
        if [ -z "$(printf "%s\n" "${existing_revisions[@]}" | grep "$rev")" ] ; then
            rm -f RCS
            DIE "revision '$rev' does not exist"
        fi
    done
}

Main()
{
    local progname=${0##*/}
    local arg args=()
    local revs=() rev1 rev2
    local filepath rcsdir filename

    case "$1" in
        "") [ -d RCS ] && args=($(fzf)) ;;
    esac

    # look for RCS related stuff
    for arg in "$@" ; do
        case "$arg" in
            -r*)
                revs+=("${arg:2}")      # -r is an rcsdiff option
                ;;
            *)
                args+=("$arg")          # args may contain the file that has RCS
                ;;
        esac
    done

    # check if RCS stuff was found
    if [ "${#args[@]}" = "1" ] ; then                    # only one file as arg?
        filepath="$(realpath "${args[0]}")"              # absolute path
        if [ -r "$filepath" ] ; then
            if FileHasRCS "$filepath" ; then             # is an RCS file?
                filename="$(basename "$filepath")"
                local tmpdir="$HOME/.cache/$progname"
                mkdir -p "$tmpdir"                       # tmpdir for the file to be checked out for comparison
                rcsdir="$(RCSdir "$filepath")"           # path to the RCS dir

                pushd $tmpdir >/dev/null
                ln -s $rcsdir                            # symlink to the $rcsdir

                local existing_revisions=($(rlog -b "$filepath" | grep "^revision " | awk '{print $2}'))

                # Note: removing old files below *may* conflict with other $progname instances !!!

                case "${#revs[@]}" in
                    0)  # FORM: meld file
                        rm -f "$filename".head                           # possible conflict ??
                        co "$filename" 2>/dev/null                       # RCS head
                        mv "$filename" "$filename".head
                        MELD "$filepath" "$filename".head
                        ;;
                    1)  # FORM: meld -rX file
                        # HEAD1=$(head -n1 "$rcsdir/$filename" | awk '{print $2}' | sed 's|;$||')
                        rev1="${revs[0]}"
                        CheckRevisions "$rev1"
                        rm -f "$filename.$rev1"                          # possible conflict ??
                        co -r"$rev1" "$filename" 2>/dev/null
                        mv "$filename" "$filename.$rev1"
                        MELD "$filepath" "$filename.$rev1"
                        ;;
                    2)  # FORM: meld -rX -rY file
                        rev1="${revs[0]}"
                        rev2="${revs[1]}"
                        CheckRevisions "$rev1" "$rev2"
                        rm -f "$filename"."$rev1" "$filename"."$rev2"    # possible conflict ??
                        co -r"$rev1" "$filename" 2>/dev/null
                        mv "$filename" "$filename"."$rev1"
                        co -r"$rev2" "$filename" 2>/dev/null
                        mv "$filename" "$filename"."$rev2"
                        MELD "$filename"."$rev1" "$filename"."$rev2"
                        ;;
                    *)
                        rm -f RCS
                        DIE "there can be zero, one or two -r options"
                        ;;
                esac
                sleep 2                      # precaution!
                rm -f RCS                    # remove symlink
                popd >/dev/null
                return                       # rcsdiff stuff is done now, nothing more to see here...
            fi
        fi
    fi

    # no RCS stuff, so continue as normal meld
    MELD "$@"
}

Main "$@"
