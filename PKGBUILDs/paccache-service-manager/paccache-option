#!/bin/bash

DIE()  { echo "$progname: error:"   "$1"; exit 1; }
WARN() { echo "$progname: warning:" "$1"; }

HasPara() {
    local -r optname="$1"
    if [ ${#optname} -eq 1 ] ; then
        [ "${SOPTS/${optname}:/}" != "$SOPTS" ] && return 0
    else
        [ "${LOPTS/${optname}:/}" != "$LOPTS" ] && return 0
    fi
    return 1
}
Paccache_option_value() {
    local progname=${0##*/}
    local opts=""

    opts="$(/usr/bin/getopt -o="$SOPTS" --longoptions "$LOPTS" --name "$progname" -- "$@")" || {
        $OptFunc -h
        return 1
    }
    eval set -- "$opts"

    local option_name=""

    while true ; do
        option_name=${1//-/}
        case "$1" in
            --) shift; break ;;
            -*) if HasPara "$option_name" ; then
                    case "$2" in
                        -*) WARN "option '$1' with option-like parameter '$2' looks suspicious" ;;
                    esac
                    VALUES[$option_name]="$2"
                    shift
                else
                    VALUES[$option_name]=yes
                fi
                ;;
        esac
        shift
    done
}

DoKeys() {
    lo=${LOPTS//,/ }
    lo=${lo//:/}
    so=${SOPTS//:/}
    so=${so//?/ &}
    [ "${so:0:1}" = " " ] && so=${so:1}
}
GenerateValues() {
    local item lo so
    DoKeys
    for item in $lo $so ; do
        echo $item '""'
    done
}
ShowValues() {
    local item lo so
    DoKeys
    for item in $lo $so ; do
        [ "${VALUES[$item]}" ] && echo "$item=${VALUES[$item]}"
    done
}

Main() {
    local -r LOPTS="dryrun,move:,remove,arch:,cachedir:,force,help,ignore:,keep:,min-atime:,min-mtime:,nocolor,null,quiet,uninstalled,verbose,version"
    local -r SOPTS="dm:ra:c:i:fhk:zquvV"
    declare -A VALUES=(
        $(GenerateValues)
    )
    VALUES[k]=3
    VALUES[keep]=3

    Paccache_option_value "$@"
    ShowValues
}

Main "$@"
