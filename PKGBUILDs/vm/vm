#!/bin/bash

# Very simple interface to qemu & virt-manager.

Main()
{
    local op="$1"
    local shiftcount=0
    local yes=false

    Options "$@"
    shift $shiftcount

    local progname=vm
    local imagedir="$HOME/.local/share/libvirt/images"
    local qemu_conf=/etc/libvirt/qemu.conf
    local log=/tmp/$progname.log

    case "$op" in
        create) VMcreate "$@" ;;
        import) VMimport "$@" ;;
        start)  VMstart "$@" ;;
        remove) VMremove "$@" ;;
        info)   VMinfo "$@" ;;
        *)      VMusage ;;
    esac
}

Options() {
    local xx

    ((shiftcount++))    # op

    for xx in "$@" ; do
        case "$xx" in
            -[yY]* | --[yY]*) yes=true ; ((shiftcount++)) ;;
            -*) WNusage ; exit 1 ;;
        esac
    done
}

VMusage() {
    local name=$(whoami)
    local group=$(grep $(grep ^$name: /etc/passwd | cut -d ':' -f 4) /etc/group | cut -d ':' -f 1)

    cat <<EOF
Usage: $progname [options] [command]
Options:
    --yes       Automatically answer "yes" to all questions.
Commands:
    create      Creates a new VM.
    import      Imports a VM from an existing image.
    start       Starts an inactive VM.
    remove      Deletes all VM related files. No turning back!
    info        Show the location of the VM image file.

Note: before creating any VMs, please edit file $qemu_conf
      and change 
      - user to your user name ($name)
      - group to your main group ($group)
EOF
}

VMcreate() {
    local vmname="$1"
    local isofile="$2"
    local disksize="$3"
    local memsize="$4"

    test -n "$vmname"   ||  vmname=$(GiveText "Name of the new VM: ")
    test -n "$isofile"  ||  isofile=$(GiveFile "ISO file name: ")
    test -n "$disksize" ||  disksize=$(GiveNumber "Disk size for the VM [GB]: ")
    test -n "$memsize"  ||  memsize=$(GiveNumber "Memory size for the VM [MB]: ")

    if [ "$yes" = "false" ] ; then
        read -p "Create the VM (Y/n) "
        case "$REPLY" in
            [yY]* | "") ;;
            *) return ;;
        esac
    fi

    Cmd --quiet \
        virt-install \
        --name $vmname \
        --disk size=$disksize \
        --memory $memsize \
        -c $isofile \
        --os-variant=archlinux
}

VMimport() {
    # Convert existing VDI file to QEMU:
    #   qemu-img convert -p img.vdi img.qcow2

    echo2 "Sorry, import does not work yet!"
    return 1

    local imgfile=$(GiveFile "Image file name: ")
    local memsize=$(GiveNumber "Memory size for the VM [MB]: ")

    Cmd virt-install --import --memory $memsize --disk $imgfile --os-variant archlinux
}

NonExistingVM() {
    local vmname="$1"
    local file="$2"
    echo2 "Sorry, no VM with name '$vmname' exists."
    test -n "$file" && echo2 "Image file '$file' not found."
    echo2 "Existing VMs:"
    virsh list --all
}

VMstart() {
    local vmname=$(GiveText "Name of the VM: ")
    local info="$(LANG=C virsh list --all | grep -w "$vmname")"

    if [ -z "$info" ] ; then
        NonExistingVM "$vmname"
        return
    fi

    if [ -n "$(echo "$info" | grep "shut off")" ] ; then
        Cmd --quiet virsh start $vmname
    fi
    Cmd --quiet virt-viewer $vmname
}

VMremove() {
    local vmname="$(GiveText "Name of the VM to delete: ")"
    local info="$(LANG=C virsh list --all | grep -w "$vmname")"
    local imagefile="$imagedir/$vmname.qcow2"

    if [ -z "$info" ] ; then
        NonExistingVM "$vmname"
        return
    fi
    if [ ! -r "$imagefile" ] ; then
        NonExistingVM "$vmname" "$imagefile"
        return
    fi

    read -p "Delete VM '$vmname' (y/N) "
    case "$REPLY" in
        [yY]*) ;;
        *) return ;;
    esac

    VMIsRunning "$vmname" && Cmd virsh destroy "$vmname" --graceful
    Cmd virsh managedsave-remove "$vmname"
    Cmd virsh undefine "$vmname" --remove-all-storage
}

VMinfo() {
    ls -lh ~/.local/share/libvirt/images
}

VMIsRunning() {
    local vmname="$1"
    local info="$(LANG=C virsh list --all | grep -w "$vmname")"
    if [ "$(echo "$info" | awk '{print $3}')" = "running" ] ; then
        return 0
    else
        return 1
    fi
}



echo2() { echo "$@" >&2 ; }

GiveTextCommon() {
    local type="$1"
    local prompt="$2"

    while true ; do
        read -p "$prompt" >&2
        case "$REPLY" in
            "")
                echo2 "Sorry, answer cannot be empty." ;;
            *)
                case "$type" in
                    text)
                        break ;;
                    file)
                        test -r "$REPLY" && break
                        echo2 "Sorry, file '$REPLY' does not exist."
                        ;;
                    number)
                        test -z "$(echo "$REPLY" | tr -d '0-9')" && break
                        echo2 "Sorry, '$REPLY' is not a number."
                        ;;
                esac
                ;;
        esac
    done
    echo "$REPLY"
}
GiveText() { GiveTextCommon text "$1" ; }
GiveFile() { GiveTextCommon file "$1" ; }
GiveNumber() { GiveTextCommon number "$1" ; }

Cmd() {
    if [ "$1" = "--quiet" ] ; then
        shift
        echo "[$progname]-$ $@"
        "$@" >& /dev/null
    else
        echo "[$progname]-$ $@"
        "$@"
    fi
}

Main "$@"
