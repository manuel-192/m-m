#!/bin/bash

echo2()       { echo "$@" >&2; }
DIE()         { echo2 -e "==> $progname: error:\n    $1"; Usage; exit 1; }
WARN()        { echo2 -e "==> $progname: warning: $1"; }

GetCurrentCountry() { cc="$(show-location-info country)"; [ "$cc" ] ; }

GetContinentOfCountry() {
    local countrycode="${1^^}"   # uppercase
    GetContinentsData
    local out=$(echo "$countries_continents" | grep -w "$countrycode" | awk '{print $2}')
    echo "$out"
}
GetContinentsData() {
    [ "$countries_continents" ] || countries_continents=$(location list-countries --show-continent)
}
ShowContinents() {
    [ "$continents" ] || GetContinentsData
    echo "$countries_continents" | awk '{print $NF}' | sort -u
}
ShowContinentsCountries() {
    local continents="$1"
    local continent=""
    local tmp=$(
    for continent in $continents ; do
        ShowContinentCountries "$continent" code
    done)
    tmp=$(echo $tmp | tr ' ' '\,' | sed 's|\,\,|\,|g')
    echo "$tmp"
}
ShowContinentCountries() {
    local continent="$1"
    local show="$2"       # name or code
    if [ -x /bin/location ] ; then
        [ "$cc" ] || GetCurrentCountry
        GetContinentsData
        local cont_country_codes=$(echo "$countries_continents" | grep "$continent" | awk '{print $1}')
        local code 
        GetCountriesData
        case "$show" in
            code)
                local out
                for code in $cont_country_codes ; do
                    out=$(echo "$reflector_list_countries" | grep "$code" | awk '{print $(NF-1)}')
                    if [ "$ignored_country_codes" ] ; then
                        echo "$out" | grep -Pv "${ignored_country_codes//,/|}"
                    else
                        echo "$out"
                    fi
                done
                ;;
            name)
                local name
                for code in $cont_country_codes ; do
                    name=$(echo "$reflector_list_countries" | grep "$code" | sed -E 's|([A-Z].+[a-z]) .*|"\1"|')
                    [ "$name" ] && echo "$name"
                done
                ;;
        esac
        return 0
    else
        WARN "package 'python-location' is required for this operation"
        return 1
    fi
}
ListCountryCodes() {
    GetCountriesData
    echo "$reflector_list_countries" | awk '{print $(NF-1)}'
}
ListCountryNames() {
    GetCountriesData
    echo "$reflector_list_countries" | sed -E 's|([A-Z].+[a-z]) .*|"\1"|'
}
ListCountryCodesNames() {
    GetCountriesData
    echo "$reflector_list_countries" | sed -E 's/([A-Z].+[a-z])[ ]+([A-Z][A-Z]) .*/\2  \1/'
}
GetCountriesData() {
    UpdateCompletionFiles
}
GetTimeInfo() { date +%j; }

UpdateCompletionFiles() {
    local -r completion_files=($(ShowCompletionFiles))

    local -r dir="${completion_files[0]}"
    local -r timefile="${completion_files[1]}"
    local -r countrycodes="${completion_files[2]}"
    local -r countrynames="${completion_files[3]}"
    local -r optionsfile="${completion_files[4]}"
    # local -r continents=(${completion_files[5]//,/ } )
    local -r now=$(GetTimeInfo)
    local prevtime=""

    mkdir -p "$dir"

    [ -e "$timefile" ] && prevtime=$(< "$timefile")
    if [ "$now" != "$prevtime" ] ; then
        echo "$now"                 > "$timefile"
        $progname --list-country-codes > "$countrycodes"
        $progname --list-country-names > "$countrynames"
        $progname --dump-options       > "$optionsfile"
        # printf "%s\n" "$dir"/*.txt | sed "s|^$HOME|  ~|"
    fi
    if [ -z "$reflector_list_countries" ] || [ "$now" != "$prevtime" ] ; then
        reflector_list_countries=$(reflector --list-countries) || DIE "cannot get list of countries"
        reflector_list_countries=$(echo "$reflector_list_countries" | tail -n +3)
    fi
}

ShowCompletionFiles() {
    local -r dir="$HOME/.cache/$progname"
    echo "$dir" "$dir/timeinfo.txt" "$dir/countrycodes.txt" "$dir/countrynames.txt" "$dir/optionsfile.txt" \
         "${all_continents// /,}"   # ShowContinents
}
ResetCompletionFiles() {
    local xx=($(ShowCompletionFiles))
    rm -f ${xx[0]}/*.txt
}

TraverseMirrors-parallel() {
    echo2 "==> $progname: ranking mirrors in parallel"
    local mirrors_with_statefiles=$(echo "$mirrors" | sed "s|/\$repo/os/\$arch|/$syncfile|")
    echo "$mirrors_with_statefiles" | parallel "$progname_helper {} $timeout_rank $distro $time_as_datetime"
}

TraverseMirrors-sequential() {
    echo2 "==> $progname: ranking mirrors in sequence"
    local mirror
    local ix=1
    local count=$(echo "$mirrors" | wc -l)

    for mirror in $mirrors ; do
        mirror="${mirror%%/\$repo/os/\$arch}/$syncfile"
        printf "\r==> ranking %s/$count" $((ix++)) >&2
        $progname_helper "$mirror" $timeout_rank $distro $time_as_datetime
    done
    echo2 ""
}

DumpOptions() {
    if [ "$lopts" ] ; then
        lopts=${lopts//:/}          # remove all : chars
        lopts="--${lopts//,/ --}"   # make all words as options with prefix "--"
    fi
    if [ "$sopts" ] ; then
        sopts=${sopts//:/}          # remove all : chars
        sopts=${sopts//?/ -&}       # make all letters as options with prefix "-"
        sopts=${sopts:1}            # remove the first space
    fi

    [ "$lopts$sopts" ] && echo $lopts $sopts
}

Usage() {
#Usage: $progname [options] [URLs]
#URLs:                          URL(s) of mirrors to rank.
#    --list-country-codes           Show available country codes. See also: 'reflector --list-countries'.
#    --list-country-names           Show available country names. See also: 'reflector --list-countries'.
#    --show-continent-countries     Show the country codes of a continent based on given country code.
    cat <<EOF
Rank Arch mirrors and display them.

Usage: $progname [options]

Options:
    -A, --all                        Rank all available mirrors on all continents.
    -C, --continent                  Rank all available countries of the current continent.
    -c, --country <list>             A comma separated list of country code(s) for ranking their mirrors.
                                     Codes are case insensitive. Example: "--country de,gb".
    -t, --country-current            Include current country to be ranked.
    -i, --ignored-countries <list>   A pipe separated list of country codes to ignore.
    -l, --list-country-codes-names   List all available country codes and names.
    -r, --ranking-data               Show ranking data too.
    --timeout-rank                   Max timeout in seconds for ranking a mirror.
    --timeout                        Max timeout in seconds for other than ranking.
    -h, --help                       This help.

Configuration file $config_file can include all supported options in variable CONFIG_OPTIONS.
Examples:
    CONFIG_OPTIONS="--country DE,US --country-current --ranking-data"
    CONFIG_OPTIONS="--continent --ranking-data"
    CONFIG_OPTIONS="--country-current"
Command line options override configuration file options.
EOF
}
Options() {
    local opts
    local lopts=""
    lopts+="all,continent,country:,country-current,distro:,dump-completion-files,dump-options,help"
    lopts+=",list-country-codes,list-country-codes-names,list-country-names,ranking-data"
    lopts+=",reset-completion-files,show-continent-countrycodes:,show-continent-countrynames:,update-completion-files"
    lopts+=",show-current-continent-countrycodes,show-current-continent-countrynames,get-time-info"
    lopts+=",ignored-countries:,timeout:,timeout-rank:"
    # lopts+=",save:"
    local sopts="ACc:d:hi:lrt"

    opts="$(/bin/getopt -o=$sopts --longoptions $lopts --name "$progname" -- "$@")" || DIE "getopt error"
    eval set -- "$opts"

    while true ; do
        case "$1" in
            --)                                     shift; break ;;
            -h | --help)                            Usage; exit 0 ;;
            -A | --all)                             local tmp1=$(ShowContinentsCountries "$all_continents")
                                                    Options -c $tmp1
                                                    ;;
            -C | --continent)                       Options -c $(echo $(Options --show-current-continent-countrycodes) | tr ' ' ',') ;;
            -c | --country)                         local tmp="${2^^}"; countries+=( ${tmp//,/ } ); shift ;;   # must be country codes!
            -d | --distro)                          distro="$2"; shift ;;
            -i | --ignored-countries)               [ "$ignored_country_codes" ] || ignored_country_codes="$2" && ignored_country_codes+=",$2"; shift ;;
            -l | --list-country-codes-names)        ListCountryCodesNames; exit 0 ;;
            -t | --country-current)                 GetCurrentCountry && countries+=($cc) ;;
            -r | --ranking-data)                    ranking_data=yes ;;
            --dump-options)                         DumpOptions; exit 0 ;;
            --dump-completion-files)                ShowCompletionFiles; exit 0 ;;
            --update-completion-files)              UpdateCompletionFiles; exit 0 ;;
            --get-time-info)                        GetTimeInfo; exit 0 ;;
            --reset-completion-files)               ResetCompletionFiles; exit 0 ;;
            --list-country-codes)                   ListCountryCodes; exit 0 ;;
            --list-country-names)                   ListCountryNames; exit 0 ;;
            --show-continent-countrycodes)          ShowContinentCountries "$2" code; exit ;;
            --show-continent-countrynames)          ShowContinentCountries "$2" name; exit ;;
            --show-current-continent-countrycodes)  GetCurrentCountry && ShowContinentCountries "$(GetContinentOfCountry $cc)" code; exit ;;
            --show-current-continent-countrynames)  GetCurrentCountry && ShowContinentCountries "$(GetContinentOfCountry $cc)" name; exit ;;
            --timeout)                              timeout="$2"; shift ;;
            --timeout-rank)                         timeout_rank="$2"; shift ;;
            # --save)                                 savefile="$2"; shift ;;
        esac
        shift
    done
    urls+=("$@")
}

Main() {
    local -r progname=${0##*/}
    local -r progname_helper=${progname%2}-helper
    local distro=""             # arch or endeavouros
    local urls=() url
    local timeout=10
    local timeout_rank=20
    local syncfile=""
    local mirrors
    local mirrorlist=""
    local time_as_datetime=no
    local ranking_data=no
    local countries=()                  # contains only uppercase country codes
    local cc=""                         # current country
    local countries_continents=""
    local tmp
    local savefile=""                   # not supported currently, if ever
    local suffix=""
    local reflector_list_countries=""
    local has_parallel=yes
    local ignored_country_codes=""
    local CONFIG_OPTIONS=""
    local -r config_file="$HOME/.config/$progname.conf"
    local -r all_continents="AF AN AS EU NA OC SA"

    [ -x /bin/parallel ] || has_parallel=no

    [ -e "$config_file" ] && source "$config_file"

    Options "${CONFIG_OPTIONS[@]}" "$@"

    case "$distro" in
        "" | arch)
            distro=arch
            if [ ${#countries[@]} -eq 0 ] ; then
                echo2 "==> option --country not used -> automatically adding the current country for ranking, if possible"
                GetCurrentCountry && countries+=($cc) && echo2 "==> added: $cc" || DIE "no countries given for ranking."
            fi
            mirrorlist=/etc/pacman.d/mirrorlist
            syncfile=lastupdate
            time_as_datetime=yes
            suffix='/$repo/os/$arch'
            url="https://archlinux.org/mirrorlist/?protocol=https&ip_version=4&use_mirror_status=on"
            for tmp in "${countries[@]}" ; do
                url+="&country=$tmp"
            done
            mirrors=$(curl -Lsm $timeout "$url" | grep "^#Server = " | awk '{print $NF}')
            ;;
        endeavouros)
            DIE "sorry, waiting for implementation!"
            mirrorlist=/etc/pacman.d/endeavouros-mirrorlist
            syncfile=state
            suffix='/$repo/$arch'
            # TODO: fetch endeavouros-mirrorlist !!
            mirrors=$(grep "^Server[ \t]*=[ \t]*" "$mirrorlist" | awk '{print $NF}')
            ;;
        *)  DIE "distro $distro not supported." ;;
    esac

    local msg=""
    case "$has_parallel" in
        yes) result=$(TraverseMirrors-parallel); msg="in parallel" ;;
        no)  result=$(TraverseMirrors-sequential); msg="sequentially" ;;
    esac

    local ranked=$(echo "$result" | column -t -s'|' | LC_ALL=C sort -k2rb,2 -k3b,3)   # sort: age

    CreateMirrorlistFile "$@"

    #if [ -z "$savefile" ] ; then
    #    CreateMirrorlistFile "${args[@]}"
    #elif [ -w ${savefile%/*} ] && [ -w "$savefile" ] ; then
    #    CreateMirrorlistFile "${args[@]}" | tee "$savefile"
    #else
    #    CreateMirrorlistFile "${args[@]}" | sudo tee "$savefile"
    #fi
}

CreateMirrorlistFile() {
    ShowMirrorlist    "\n### ${distro^} mirror list, ranked $msg by command:\n### $progname ${CONFIG_OPTIONS[*]} $*\n"
    ShowRankingData
}

ShowMirrorlist()    { echo -e "$1"; echo "$ranked" | awk '{print $1}' | sed -E "s|(.*)|Server = \1$suffix|"; }
ShowRankingData() {
    if [ $ranking_data = yes ] ; then
        local -r count=$(echo "$ranked" | wc -l)
        echo -e "\n### Ranking data ($count mirrors):"
        echo "$ranked" | sed -E "s|^([^ ]+)|### \1$suffix|"
    fi
}

Main  "$@"
