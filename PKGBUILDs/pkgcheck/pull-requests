#!/bin/bash

echo2() { echo -e "$@" >&2; }
DIE()   { echo2 "$progname: error: $1"; exit 1; }

Red()     { echo -en $'\e[0;91m' ; }
Green()   { echo -en $'\e[0;92m' ; }
Blue()    { echo -en $'\e[0;94m' ; }
Magenta() { echo -en $'\e[0;95m' ; }
Reset()   { echo -en $'\e[0m' ; }

Result() {
    local first="$1"
    case "$first" in
        yes) printf "%s\n" "$2" ;;
        no)  printf "%${space}s+ %s\n" "" "$2" ;;
    esac
}

Main3()
{
    local url="$1"
    local file="$2"
    local pagedata retval
    local item=$(echo "$url" | sed 's|https://github\.com/||')
    local -r space="-45"
    local mode

    case "$url" in
        */issues) mode=issues ;;
        */pulls)  mode=pull-requests ;;
    esac

    pagedata="$(< "$file")"
    retval=$?
    [ $retval -ne 0 ] && { echo2 "curl '$url' failed with code $retval"; return; }
    local issue_numbers="$(echo "$pagedata" | sed 's| href=|\nhref=|g' | grep "$item/" | sed -E "s|.+$item/([0-9]+).+|\1|")"
    local nr

    printf "%${space}s: " "$item"

    if [ -z "$issue_numbers" ] ; then
        Result yes "-"
        return
    fi

    local first=yes
    local payload comments

    for nr in $issue_numbers ; do
        interesting_urls+=("$url/$nr")
        payload="$(curl -Lsm 20 "$url/$nr" | grep '"payload"')"
        comments="$(echo "$payload" | sed -E 's|[^{]+(\{.*\}).+|\1|' | jq)"
        if echo "$comments" | grep userInteractionCount >/dev/null ; then
            comments="$(echo "$comments" | grep userInteractionCount | awk '{print $NF}')"
        else
            comments="$(echo "$comments" | grep "$nr#issuecomment" | wc -l)"
        fi
        if true ; then
            Result $first "${mode:: -1} #$nr: $comments comments"
        else
            # currently not working...
            case "$comments" in
                "") Result $first "#$nr: no comments yet"    ;;
                *)  Result $first "#$nr: $comments comments" ;;
            esac
        fi
        first=no
    done
}

AtomicCurl() {
    local pid=$(pgrep curl)
    [ "$pid" ] && echo ${pid} | pidwait -F -
    curl "$@"
}

MsgHandle() {
    local url="$1"
    local type
    local msg
    declare -A msgs
    local dir=${url##*/}

    cd "$dir" >/dev/null
    msgs[issue]=""
    msgs[pr]=""
    Green
    echo "======================================= ${PWD##*/} =========================================" >&2
    Reset
    for type in issue pr ; do
        case "$type" in
            issue) echo "Issues:" ;;
            pr)    echo "Pulls:"  ;;
        esac
        gh $type list --json title,updatedAt | jq -c .[] | sed -E -e 's/^\{"title"://' -e 's/"updatedAt"://' -e 's/}$//' -e 's/","/"|"/' | tr -d '"' | sed 's|^|    |'
    done | column -t -s'|'
}

Main2_old() {
    local ix=0
    local urls=() url

    for url in "$@" ; do
        urls+=(-o "$targetdir/$((ix++))" "$url/issues")
        urls+=(-o "$targetdir/$((ix++))" "$url/pulls")
    done

    AtomicCurl --parallel --fail -Lsm 60 "${urls[@]}"

    ix=0
    for url in "$@" ; do
        Main3 "$url/issues" "$targetdir/$((ix++))"
        Main3 "$url/pulls"  "$targetdir/$((ix++))"
    done
}

Main2() {
    local url msg
    for url in "$@" ; do
        MsgHandle "$url"
    done
}

Main1() {
    local who="$1"
    shift

    case "$who" in
        e)
            Main2 "${urls_e[@]}" "$@"
            ;;
        m)
            Main2 "${urls_m[@]}" "$@"
            ;;
        b)
            Main1 e "$@"
            Main1 m "$@"
            ;;
    esac
}

Main() {
    local -r progname=${0##*/}
    local -r targetdir=$(mktemp -d)
    local interesting_urls=()
    local show_interesting_urls=yes
    local url
    local br
    local who=b

    source ~/.config/$progname.conf

    while [ "$1" ] ; do
        case "$1" in
            -h | --help)
                cat <<EOF
Usage: $progname [options]
Options:
    -h, --help      This help.
    -s, --show      Show interesting URLs. Default.
    --no-show       Don't show interesting URLs.
EOF
                ;;
            -s | --show)
                show_interesting_urls=yes ;;
            --no-show)
                show_interesting_urls=no ;;
            -e | -m | -b)
                who=${1:1} ;;
        esac
        shift
    done

    Main1 "$who" "$@"

    if [ $show_interesting_urls = yes ] && [ ${#interesting_urls[@]} -gt 0 ] ; then
        # About browser fallbacks:
        # - kde-open will open only the first url
        # - xdg-open fails with 2 or more urls
        # for br in firefox-developer-edition firefox exo-open kde-open xdg-open
        for br in exo-open kde-open xdg-open
        do
            if [ -x /bin/$br ] ; then
                # $br "${interesting_urls[@]}"      # not working...
                break
            fi
        done
    fi

    rm -rf "$targetdir"
}

Main "$@"
