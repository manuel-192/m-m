#!/bin/bash

# - help build endeavouros and other packages
# - help update sources


echo2()   { echo "$@" >&2 ; }
printf2() { printf "$@" >&2 ; }
RequireApp() { which "$1" &>/dev/null || DIE "this operation needs '$1' installed." ; }

DIE() {
    echo2 "$progname: error (line ${BASH_LINENO[0]}): $1"
    WaitToQuit 1
    exit 1
}
DIEF() {
    printf2 "%s: error:\n" "$progname"
    printf2 "%s\n" "$@"
    WaitToQuit 1
    exit 1
}

WaitToQuit() {
    if [ "$WaitToQuit" = "yes" ] ; then
        read -pr "Press ENTER to quit: " >&2
        exit "$1"
    fi
}

tar-name-components() {
    # show components of names as of the output of:
    #     tar -tf "db-file" | grep -v /desc$ | sed 's|/$||'
    sed -E 's/([a-zA-Z0-9@_+][a-zA-Z0-9@._+-]+)-([0-9:]*[^:/\-\ \t]+)-([0-9\.]+)/\1|\2-\3/'
    #          name...........................   epoch..pkgver......   pkgrel..
}

AskFolder() {
    RequireApp fzf
    repodir=$(printf "%s\n" $(_pb --reponames) --assets.conf-check --assets.conf-e --assets.conf-m --pulls --extras | sort -V | fzf)
    case "$repodir" in
        "") ;;
        -*) _pb "$repodir" ;;
        *) _pb2
    esac
    WaitToQuit
    exit
}

ChangeLog() {
    local pkgname="$1"
    local url=${PKG_CHANGELOGS["$pkgname"]}

    if [ -n "$url" ] ; then
        firefox "$url"
    else
        echo2 "$progname: no changelog for $pkgname."
    fi
}

AskCommitPush() {
    # assume cd "$repodir"
    local msg=""
    local commit_files=()
    local ret=0

    GetChangedFiles

    if [ ${#commit_files[@]} -eq 0 ] ; then
        echo "==> No files to commit under $PWD!" >&2
        return 1
    fi
    echo -e "\n==> Files to commit: ${commit_files[*]}\n" >&2

    read -p "Commit message: " msg

    [ "$msg" ] || msg="Changed files: ${commit_files[*]}"

    CmdTest git add "${commit_files[@]}"
    CmdTest git commit -m "$msg"
    CmdTest git push
    return 0
}

CmdTest() {
    local code=0

    case "$1" in
        --show-cmd) shift; echo2 "$@" ;;
        -*) DIE "$FUNCNAME: option '$1' not supported" ;;
    esac

    "$@" || {
        code=$?
        DIE "'$*' failed, code $code, line ${BASH_LINENO[0]})"
    }
}

Edit() {
    local file="$1"
    local editor show

    case "$1" in
        --show-cmd) show="CmdTest --show-cmd"; file="$2" ;;
        -*) DIE "$FUNCNAME: option '$1' not supported" ;;
        *) show="" ;;
    esac

    for editor in "/bin/emacs --reverse-video" codium exo-open ; do
        if which "${editor%% *}" >/dev/null ; then
            $show $editor "$file"
            return
        fi
    done
    DIE "no editor found!"
}

GetChangedFiles() {
    [ -r PKGBUILD ] || echo -n " [sorry, ./PKGBUILD needed!] " >&2

    CheckHardLink

    commit_files=($(/bin/git diff | /bin/grep "^+++ b/" | sed 's|^+++ b/.*/||'))
    if [ ${#commit_files[@]} -ne 0 ] ; then
        echo -e "\n==> Check version info in the editor:\n" >&2
        Edit --show-cmd PKGBUILD
        echo "==> updating pkgsums"
        updpkgsums 2>/dev/null || DIE "updpkgsums failed"               # this may be needed!
        commit_files=($(/bin/git diff | /bin/grep "^+++ b/" | sed 's|^+++ b/.*/||'))
    fi
}

CheckHardLink() {
    # Some PKGBUILD files need to be hardlinks for easier handling.

    local path="$(realpath .)"

    case "$path" in
        */eos-pkgbuild-setup | */eos-bash-shared | */welcome)
            case "$path" in
                */PKGBUILDS/eos-pkgbuild-setup | */PKGBUILDS/eos-bash-shared | */PKGBUILDS/welcome) ;;
                *)
                    # Check hard link count of PKGBUILD
                    local linkcount=$(/bin/ls -l PKGBUILD | /bin/awk '{print $2}')
                    [ "$linkcount" = "1" ] && DIE "file $PWD/PKGBUILD is not a hardlink!"
                    ;;
            esac
            ;;
    esac
}

RunIfExists() {
    local app
    for app in "$@" ; do
        which "${app## *}" >/dev/null && { echo2 "==> $app:"; "$app"; }
    done
}

_pb() {
    local -r RED=$'\e[0;91m'
    local -r GREEN=$'\e[0;92m'
    local -r BLUE=$'\e[0;94m'
    local -r MAGENTA=$'\e[0;95m'
    local -r RESET=$'\e[0m'

    pb_IsSupportedFolderName() {
        local sf
        local folder=""
        case "$1" in
            "" | ".") folder="${PWD}" ;;
            *)        folder="${1}" ;;
        esac
        for sf in $supported_folders ; do
            if [ "${folder##*/}" = "$sf" ] ; then
                repodir=$folder  #"${folder##*/}"
                return 0
            fi
        done
        return 1
    }
    local progname=${0##*/}
    local WaitToQuit=no

    [ -n "$CODEDIR" ] || DIE "variable CODEDIR cannot be empty."

    local MAN="$CODEDIR/MAN" ; [ -d "$MAN" ] || DIE "folder $MAN does not exist."
    local EOS="$CODEDIR/EOS" ; [ -d "$EOS" ] || DIE "folder $EOS does not exist."

    local folder="$PWD"
    local repodir=""
    local repodirs=()
    local op="-n"
    local dir1 dir2 dirs
    local supported_folders
    local pkgnames_para=""
    local changelogfor=""
    local cmd_options=""
    local commit=no

    supported_folders="MAN EOS $(pacconf --repo-list | grep -P '^endeavouros|^m-|^local-repo' | tr '\n' ' ')"

    while [ -n "$1" ] ; do
        case "$1" in
            -h | --help)
                cat <<EOF >&2

Build packages if needed.

Usage: ${FUNCNAME[0]} [options] [params]

Params:
    repodir
        - "": uses current folder
        - One of: $supported_folders
    --pulls
        Show potential pull requests and issues. Options ignored.
    --check-all
        Check all supported folders.
    --quick-check
        Check just EOS and endeavouros.
    --assets.conf-check
        Check for changes of file assets.conf for all.
    --assets.conf-e
        Check for changes of file assets.conf for EndeavourOS.
    --assets.conf-m
        Check for changes of file assets.conf for others.
    --pkgdb <db-filename>
        Show the contents of the given package database (*.db.tar.xz).
    --mirrorlist-arch
        Download a generated mirrorlist from the Arch web page. Useful for testing only.
    --local-repo
        Check and build local repo packages.
    --extras
        Run some extra tests.

Options:
    -b                       Directly try to build packages.
    --editme                 Edit this file.
    -h, --help               This help.
    -n, ""                   Check if build is needed, using local packages.
    -nn                      Check if build is needed, using remote packages.
    -p, --pkgnames "X"       X is a comma separated list of packages to build.
    --reponames              Show names of supported repos and folders.
    -c, --changelog          Show the changelog of a package, if available.
    -T, --fetch-timeout "X"  X is a timeout (in seconds) for starting to fetch packages.
    -C, --commit             Does: git {add,commit,push} to github. Asks possible comment for 'commit', otherwise defaults.
                             Note: make sure PKGBUILD is a hardlink if needed!
EOF
                WaitToQuit
                return
                ;;
            -C | --commit)
                commit=yes
                ;;
            --editme)
                Edit --show-cmd "$0"
                return
                ;;
            --extras)
                RunIfExists arch-audit cookbook
                return
                ;;
            --dump-options)
                op="-p --pkgnames --dryrun --dryrun-local --build --repoup --allow-downgrade"
                op+=" -n -nn -b"
                op+=" --dump-options --dump-options-single --editme --help -h --reponames --pulls"
                op+=" --check-all --quick-check --assets.conf-check --assets.conf-e --assets.conf-m"
                op+=" --extras --pkgdb --changelog --changelog-modified --mirrorlist-arch"
                op+=" -T --fetch-timeout -C --commit --local-repo"
                echo "$op"
                return
                ;;
            --fetch-timeout | -T)
                cmd_options+=" -T=$2"
                shift
                ;;
            --fetch-timeout=* | -T=*)
                cmd_options+=" -T=${1#*=}"
                ;;
            -T*)
                cmd_options+=" -T=${1:2}"
                ;;
            --local-repo)
                local-repo-manager --verbose
                return
                ;;
            --changelog | -c)
                # example: pb -c rate-mirrors endeavouros
                # Note: 'endeavouros' can be skipped if: 1) $PWD == */endeavouros 2) pb will ask the repodir
                changelogfor="$2"
                shift
                ;;
            --changelog=* | -c=*)
                changelogfor="${1#*=}"
                ;;
            --changelog-modified)
                op="--pkgdiff"
                ;;
            --wait-to-quit)
                WaitToQuit=yes
                ;;
            -p | --pkgnames)
                pkgnames_para="$2"
                shift
                ;;
            -p=* | --pkgnames=*)
                pkgnames_para="${1#*=}"
                ;;
            --reponames)
                echo "$supported_folders"
                return
                ;;
            --pulls)   # | pull)
                pull-requests
                WaitToQuit
                return
                ;;
            --mirrorlist-arch)
                # firefox "https://archlinux.org/mirrorlist/?country=all&protocol=https&ip_version=4"
                CmdTest --show-cmd curl -Lsm 10 -o/tmp/mirrorlist2 \
                        "https://archlinux.org/mirrorlist/?country=all&protocol=https&ip_version=4"
                grep -v "//mirror1\.sl-chat\.ru/" /tmp/mirrorlist2 > /tmp/mirrorlist
                return
                ;;
            --check-all*)                  # supports also: --check-all="-n"
                local tinyopt="-nn"
                [ "${1/=/}" != "$1" ] && tinyopt="-${1#*=-}"
                for folder in $supported_folders \
                              --assets.conf-check --pulls    # NOTE: additional commands!
                do
                    printf2 "\n${GREEN}==> %s %s${RESET}\n" "$progname" "$folder"
                    # echo2 "==> $progname $folder"
                    $progname $tinyopt "$folder" || DIE "'$progname $tinyopt $folder' failed."
                    sleep 1
                done
                WaitToQuit
                return
                ;;
            --quick-check)
                printf2 "\nPKGBUILDS: "
                RunInDir EOS/PKGBUILDS git pull
                pb -n endeavouros
                return
                ;;
            --assets.conf-e)
                local folders=("$EOS/eos-pkgbuild-setup")
                AssetsConfCheck
                return $?
                ;;
            --assets.conf-m)
                local folders=("$MAN/b-assets")
                AssetsConfCheck
                return $?
                ;;
            --assets.conf-check)
                local folders=("$EOS/eos-pkgbuild-setup" "$MAN/b-assets")
                AssetsConfCheck
                return $?
                ;;
            --pkgdb=* | --pkgdb)
                local pkgdb
                case "$1" in
                    --pkgdb) pkgdb="$2" ; shift ;;
                    *)       pkgdb=${1#*=} ;;
                esac
                [ -e "$pkgdb" ] || DIE "option --pkgdb: file '$pkgdb' cannot be read."
                tar -tf "$pkgdb" | grep -v /desc$ | sed 's|/$||' | tar-name-components | column -t -s"|"
                WaitToQuit
                return
                ;;
            --repoup | -n | -nn | -nl | --dryrun-local | -nr | --dryrun | --pkgdiff | -ad | --allow-downgrade)
                op="$1" ;;
            -b | --build) op="" ;;
            -*) DIE "option '$1' not supported" ;;
            *)  repodirs+=("$1") ;;
        esac
        shift
    done

    if [ ${#repodirs[@]} -eq 0 ] ; then
        if pb_IsSupportedFolderName "." ; then
            repodirs+=(.)   # or use the current working folder
        else
            AskFolder
        fi
    fi

    for repodir in "${repodirs[@]}" ; do
        _pb2
    done
}

AssetsConfCheck() {
    local ret=0
    local len=0

    for folder in "${folders[@]}" ; do
        [ ${#folder} -gt $len ] && len=${#folder}
    done
    for folder in "${folders[@]}" ; do
        printf2 "%-*s : " "$len" "$folder"
        pushd "$folder" >/dev/null || DIE "folder '$folder' does not exist."
        if [ -n "$(git diff)" ] ; then
            echo2 "Diffs detected"
            ret=1
            meld
        else
            echo2 "OK"
        fi
        popd >/dev/null || DIE "popd from '$folder' failed"
    done
    WaitToQuit $ret
    return $ret
}

RunInDir() {
    local dir="$1"
    local curdir="$PWD"
    local log="/tmp/$progname.tmp"
    shift
    cd "$dir" > "$log" || { cat "$log"; return 1; }
    "$@"
    cd "$curdir"
}

_banner() { printf "\n============================ %s ============================\n" "$repodir"; }

_pb2() {
    case "$repodir" in
        man)
            for repodir in m-m m-more2 m-aur2 ; do
                _pb3
            done
            return
            ;;
        eos)
            for repodir in endeavouros endeavouros-testing-dev ; do
                _pb3
            done
            return
            ;;
        MAN | EOS | */MAN | */EOS)
            # special for UpdateSources
            _banner
            pushd "$repodir" >/dev/null || DIE "'pushd $repodir' failed"
            UpdateSources
            popd >/dev/null || DIE "popd from '$repodir' failed"
            WaitToQuit
            return
            ;;
        local-repo)
            _banner
            #pushd "$repodir" >/dev/null || DIE "'pushd $repodir' failed"
            local-repo-manager
            #popd >/dev/null || DIE "popd from '$repodir' failed"
            #WaitToQuit
            return
            ;;
        *)
            if pb_IsSupportedFolderName "$repodir" && [ $commit = no ] ; then
                _pb3
            else
                AskFolder
            fi
            ;;
    esac
}

_pb3() {
    for dir1 in "${CDPATH_ARR[@]}" ; do
        case "$dir1" in
            */_BUILD_)
                dirs=("$dir1"/*)
                for dir2 in "${dirs[@]}" ; do
                    case "$repodir" in
                        "" | .) repodir="$PWD" ;;
                    esac
                    case "$repodir" in
                        /*)
                            if [ "$repodir" -ef "$dir2" ] ; then
                                repodir="$dir2"
                                break 2
                            fi
                            ;;
                        *)
                            case "$dir2" in
                                */"$repodir")
                                    repodir="$dir2"
                                    break 2
                                    ;;
                            esac
                            ;;
                    esac
                done
                ;;
        esac
    done

    if [ -n "$changelogfor" ] ; then
        pushd "$repodir" >/dev/null || DIE "'pushd $repodir' failed"
        # shellcheck disable=SC1091
        source "assets.conf" || DIE "cannot find assets.conf in '$repodir'"
        ChangeLog "$changelogfor"
        popd >/dev/null || DIE "popd from '$repodir' failed"
        exit
    fi

    _banner

    local cwd="$PWD"
    local exit_code=0

    if [ -n "$repodir" ] ; then
        cd "$repodir" || {
            WaitToQuit
            return 1
        }
        if [ ! -L .git ] && [ $commit = no ] ; then
            echo2 "${FUNCNAME[0]}: '$PWD/.git' does not exist or is not a symlink."
            cd "$cwd" || DIE "'cd $cwd' failed"
            WaitToQuit 1
            return 1
        fi
    fi

    if [ $commit = yes ] ; then
        AskCommitPush
        exit
    fi

    if [ -n "$pkgnames_para" ] ; then
        /bin/assets.make "$op" --pkgnames="${pkgnames_para//,/ }"
    else
        /bin/assets.make "$op" $cmd_options
    fi
    exit_code=$?
    cd "$cwd" || DIE "'cd $cwd' failed"
    case $exit_code in
        100 | 0) ;;
        *)
            WaitToQuit $exit_code
            return $exit_code
            ;;
    esac
    WaitToQuit
}

_pb "$@"
