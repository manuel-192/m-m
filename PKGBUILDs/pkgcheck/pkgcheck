#!/bin/bash

# Check if package rebuilds are needed.

DIE() {
    local progname="$(basename "$0")"
    echo "$progname: error: $1" >&2
    Options -h
    exit 1
}

Options() {
    local progname="$(/usr/bin/basename "$0")"
    local opts

    opts="$(/usr/bin/getopt -o=h --longoptions help,build,dryrun-local,dryrun,allow-downgrade,repoup,reponames --name "$progname" -- "$@")" || {
        Options -h
        return 1
    }

    eval set -- "$opts"

    while true ; do
        case "$1" in
            --dryrun-local | --dryrun | --allow-downgrade | --repoup)
                opt="$1"
                ;;
            --build)
                opt=""
                ;;
            --reponames)
                echo "${repoitems[*]}"
                exit 0
                ;;

            -h | --help)
                cat <<EOF >&2

Usage: $progname [operation] [options] [reponame]

Operations:
  --dryrun-local       Dryrun, don't download assets from remote (minimal dryrun).
                       Without a given operation this is the default.
  --dryrun             Dryrun, download assets from remote first (full dryrun).
  --repoup             Update only the database files (advanced).
  --build              Build and release updated packages (advanced).

Options:
  --allow-downgrade    New package is allowed to get a smaller version number (advanced).
                       By default updated packages must have a bigger version number.
Params:
  reponame             A name of a repository in /etc/pacman.conf.
                       Also repo groups are accepted.
                       Default: $default_reponame

EOF
                exit 0
                ;;
            
            --) shift ; break ;;
        esac
        shift
    done

    if [ -n "$1" ] ; then
        reponame="$1"
    else
        folder="$(basename "$PWD")"
        local rname="${dir_repo[$folder]}"
        case "$rname" in
            local-repo) reponame="$rname" ;;
            "")         reponame="$default_reponame" ;;
            *)
                if [ -L .git ] && [ -r .git/config ] ; then
                    local gitname="$(basename "$(grep "url = " .git/config | awk '{print $NF}')" .git)"
                    gitname="${git_repo[$gitname]}"
                    if [ "$gitname" = "$rname" ] ; then
                        reponame="$rname"
                    else
                        echo2 "==> current folder $PWD is not a supported repo folder, using defaults"
                        reponame="$default_reponame"
                    fi
                else
                    echo2 "==> current folder $PWD is not a supported repo folder, using defaults"
                    reponame="$default_reponame"
                fi
                ;;
        esac
        if false ; then
        if [ -n "$rname" ] ; then
            if [ "$rname" = "local-repo" ] ; then
                reponame="$rname"
            elif [ -L .git ] && [ -r .git/config ] ; then
                local gitname="$(basename "$(grep "url = " .git/config | awk '{print $NF}')" .git)"
                gitname="${git_repo[$gitname]}"
                if [ "$gitname" = "$rname" ] ; then
                    reponame="$rname"
                else
                    echo2 "==> current folder $PWD is not a supported repo folder, using defaults"
                    reponame="$default_reponame"
                fi
            else
                echo2 "==> current folder $PWD is not a supported repo folder, using defaults"
                reponame="$default_reponame"
            fi
        else
            reponame="$default_reponame"
        fi
        fi
    fi

    if ! printf "%s\n" "${repoitems[@]}" | grep "$reponame" >/dev/null ; then
        [ -n "$1" ] && echo2 "==> Reponame or group '$reponame' is not supported."
        reponame="$default_reponame"
    fi
    case "$reponame" in
        EOS) ;;
        MAN) ;;
        *)   [ -n "$reponame" ] || DIE "sorry, cannot determine repo name" ;;
    esac
}

HandleRepo() {
    folder="${repo_dir[$reponame]}"

    echo2 "==> Reponame     = $reponame"
    echo2 "==> Build folder = $folder"
    echo2 ""

    pushd ~/ >/dev/null
    pushd $folder >/dev/null
    case "$folder" in
        local-repo)
            if [ -x /usr/bin/local-repo-manager ] ; then
                /usr/bin/local-repo-manager $opt --verbose
            elif [ -x ./local-repo-manager ] ; then
                ./local-repo-manager $opt
            else
                DIE "local-repo-manager app not found!"
            fi
            ;;
        *)
            assets.make $opt
            count_to_build=$?
            ;;
    esac
    popd >/dev/null
    popd >/dev/null
}

HandleRepos() {
    local reponame
    for reponame in "$@" ; do
        HandleRepo
    done
}

pkgcheck() {
    local -r default_reponame="endeavouros"
    local -r default_opt="--dryrun-local"

    local reponame=""
    local folder=""
    local opt="$default_opt"
    local REPO_GROUPS=()
    local KNOWN_REPONAMES=()
    local KNOWN_BUILD_FOLDERS=()
    local repoitems=()

    source /etc/pkgcheck.conf || return $?

    repoitems=("${KNOWN_REPONAMES[@]}" "${REPO_GROUPS[@]}")

    declare -A repo_dir
    declare -A dir_repo
    declare -A git_repo

    local reponames=("${KNOWN_REPONAMES[@]}")
    local folders=("${KNOWN_BUILD_FOLDERS[@]}")
    local ix
    local count=${#reponames[@]}

    local rn bf fi

    [ $count -gt 0 ] || DIE "no known repo names"

    for ((ix=0; ix<count; ix++)) ; do
        bf="${folders[$ix]}"
        rn="${reponames[$ix]}"
        fi=${folders[$ix]}

        repo_dir[${reponames[$ix]}]="$bf"
        dir_repo[$fi]="$rn"
        git_repo[${KNOWN_REPO_FOLDERS[$ix]}]="${reponames[$ix]}"
    done

    source $HOME/.config/cd.conf || return $?
    source /etc/skel/cd.bash || return $?

    Options "$@" || return $?

    case "$reponame" in
        EOS) HandleRepos "${REPO_GROUP_EOS[@]}" ;;
        MAN) HandleRepos "${REPO_GROUP_MAN[@]}" ;;
        ALL) HandleRepos "${REPO_GROUP_EOS[@]}" "${REPO_GROUP_MAN[@]}" ;;
        *)
            local count_to_build=0
            HandleRepo
            case "$opt" in
                --dryrun | --dryrun-local)
                    return $((count_to_build + 0))
                    ;;
            esac
            ;;
    esac
}

pkgcheck "$@"
