#!/bin/bash

# - help build endeavouros and other packages
# - help update sources

echo2() { echo "$@" >&2 ; }

DIE() {
    local progname=${0##*/}
    echo2 "$progname: error: $1"
    exit 1
}

pc() {
    pc_IsSupportedFolderName() {
        local folder sf
        case "$1" in
            "" | ".") folder="${PWD}" ;;
            *)        folder="${1}" ;;
        esac
        for sf in $supported_folders ; do
            if [ "${folder##*/}" = "$sf" ] ; then
                repodir=$folder  #"${folder##*/}"
                return 0
            fi
        done
        printf "${FUNCNAME[1]}: repo/folder '$folder' is not supported.\nSupported: $supported_folders\n" >&2
        return 1
    }

    [ -n "$CODEDIR" ] || DIE "variable CODEDIR cannot be empty."

    local MAN="$CODEDIR/MAN" ; [ -d "$MAN" ] || DIE "folder $MAN does not exist."
    local EOS="$CODEDIR/EOS" ; [ -d "$EOS" ] || DIE "folder $EOS does not exist."

    local repodir=""
    local op=""
    local dir1 dir2 dirs
    local supported_folders="$(pacconf --repo-list | grep -P '^endeavouros|^m-' | tr '\n' ' ') MAN EOS"
    local pkgnames_para=""

    while [ -n "$1" ] ; do
        case "$1" in
            -h | --help)
                cat <<EOF >&2

Build packages if needed.

Usage: $FUNCNAME [options] [params]

Params:
    repodir
        - "": uses current folder
        - One of: $supported_folders
    --pull
        Show potential pull requests and issues. Options ignored.
    --check-all
        Check all supported folders.
    --check-assets-conf
        Check for changes of file assets.conf.

Options:
    -h, --help        This help.
    -n, ""            Check if build is needed, using local packages.
    -nn               Check if build is needed, using remote packages.
    -b                Directly try to build packages.
    --pkgnames="X"    X is a space separated list of packages to build.
    --reponames       Show names of supported repos and folders.
EOF
                return
                ;;
            --pkgnames=*)
                pkgnames_para="${1#*=}"
                ;;
            --reponames)
                echo "$supported_folders"
                return
                ;;
            --pull)
                pull-requests
                return
                ;;
            --check-all)
                for folder in $supported_folders pull
                do
                    echo2 "==> pc $folder"
                    pc $folder || DIE "'pc $folder' failed."
                done
                return
                ;;
            --check-assets-conf)
                local ret=0
                for folder in "$EOS/PKGBUILDS/eos-pkgbuild-setup" "$MAN/b-assets"
                do
                    pushd $folder >/dev/null || DIE "folder '$folder' does not exist."
                    if [ -n "$(git diff)" ] ; then
                        ret=1
                        meld-rcs
                    fi
                    popd >/dev/null
                done
                case $ret in
                    0) echo2 "No changes in assets.conf(s)." ;;
                    1) echo2 "Changes detected in assets.conf(s)." ;;
                esac
                return $ret
                ;;
            -*) op="$1" ;;
            *)  repodir="$1" ;;
        esac
        shift
    done

    pc_IsSupportedFolderName "$repodir" || return 1

    case "$repodir" in
        MAN | EOS | */MAN | */EOS)
            # special for UpdateSources
            pushd "$repodir" >/dev/null
            UpdateSources
            popd >/dev/null
            return
            ;;
    esac

    for dir1 in "${CDPATH_ARR[@]}" ; do
        case "$dir1" in
            */_BUILD_)
                dirs=("$dir1"/*)
                for dir2 in "${dirs[@]}" ; do
                    case "$repodir" in
                        "" | .) repodir="$PWD" ;;
                    esac
                    case "$repodir" in
                        /*)
                            if [ "$repodir" -ef "$dir2" ] ; then
                                repodir="$dir2"
                                break 2
                            fi
                            ;;
                        *)
                            case "$dir2" in
                                */"$repodir")
                                    repodir="$dir2"
                                    break 2
                                    ;;
                            esac
                            ;;
                    esac
                done
                ;;
        esac
    done
    case "$op" in
        "") op="-n" ;;                # ""  = check local
        -n | -nn) ;;                  # -n  = check local
        # -nn = check remote
        -b) op="" ;;                  # -b  = build
        *)
            echo2 "$FUNCNAME: unsupported option '$op'"
            $FUNCNAME -h
            return 1
            ;;
    esac

    local cwd="$PWD"
    local exit_code=0

    if [ -n "$repodir" ] ; then
        cd "$repodir" || return 1
        if [ ! -L .git ] ; then
            echo2 "$FUNCNAME: '$PWD/.git' does not exist or is not a symlink."
            cd "$cwd"
            return 1
        fi
    fi

    echo2 "params = $op $pkgnames_para"

    if [ -n "$pkgnames_para" ] ; then
        /bin/assets.make $op --pkgnames="$pkgnames_para"
    else
        /bin/assets.make $op
    fi
    exit_code=$?
    cd "$cwd"
    case $exit_code in
        100 | 0) ;;
        *)       return $exit_code ;;
    esac
}

pc "$@"
