#!/bin/bash

source $HOME/.config/cd-extended.conf || exit 1

if [ ${#CDPATH_ARR[@]} -eq 0 ] ; then
    echo "==> $(basename "$0"): error: no CDPATH_ARR" >&2
    exit 1
fi

cd-extended() {
    # Enhances 'cd' by refusing to go to specified folder(s).
    # Uses variables
    #    CDPATH_ARR          Array of paths to search for a matching folder.
    #    CDPATH_REJECT       Array of paths to reject.
    # and file
    #    .no-cd              File in a folder that rejects cd into it.
    # When called with only one parameter (=the target folder), adds
    #  - rejection of a target folder with
    #     - array variable CDPATH_REJECT
    #     - file $REJECTOR_FILE inside the target folder
    #  - note: direct child folder will not be rejected

    _IsAllowedDir() {
        local msg=""

        if [ -f $REJECTOR_FILE ] ; then
            msg="Sorry, target folder rejected by file '$REJECTOR_FILE'. Use '$bcd' instead."
        else
           local dir
           for dir in "${CDPATH_REJECT[@]}" ; do
               if [ "$dir" -ef "$PWD" ] ; then
                   msg="Sorry, target folder rejected by variable 'CDPATH_REJECT'. Use '$bcd' instead."
                   break
               fi
           done
        fi
        # $newdir was rejected above, but still may allow direct child folder.
        if [ -n "$msg" ] && [ ! "$PWD" -ef "$startdir/$newdir" ] ; then
            echo "$msg" >&2
            return 1
        fi
    }
    _SetNewMultiDir() {
        local nextix="$1"
        newdir="${matches[$nextix]}"

        local match mark
        echo "==> Matches:" >&2
        for str in "${matches[@]}" ; do
            [ "$str" = "$newdir" ] && mark="->" || mark="  "
            printf "    $mark %s\n" "$str" >&2
        done
    }
    _HandleMultiMatch() {
        _UniqueMatch() {
            local dir="$1"
            local ff
            for ff in "${matches[@]}" ; do
                [ "$ff" -ef "$dir" ] && return 1
            done
        }
        _MultiDirStore() {
            local count=${#matches[@]}
            local nextix

            # If $PWD is one of the multiple matches, go to the next match.
            for ((nextix=0; nextix < count; nextix++)) ; do
                if [ "${matches[$nextix]}" -ef "$PWD" ] ; then
                    ((nextix++)) ; [ $nextix -eq $count ] && nextix=0
                    _SetNewMultiDir $nextix
                    return
                fi
            done

            # $PWD is not a matched folder, so select the first of the multiple matches.
            _SetNewMultiDir 0
        }

        # Change $newdir in case of multiple matches.

        # Find all unique matches for the given $newdir.
        local ix matches=()
        for ((ix=0; ix < ${#CDPATH_ARR[@]}; ix++)) ; do
            if [ -d "${CDPATH_ARR[$ix]}/$newdir" ] ; then
                if _UniqueMatch "${CDPATH_ARR[$ix]}/$newdir" ; then
                    matches+=("${CDPATH_ARR[$ix]}/$newdir")      # rejected folders are handled elsewhere
                fi
            fi
        done
        case "${#matches[@]}" in
            0) return 1 ;;                     # no match, later code will handle it
            1) newdir="${matches[0]}" ;;       # exactly one match
            *) _MultiDirStore ;;               # multiple matches, choose where to go next
        esac
    }
    _HandleRelativeRejects() {
        local ix msg=""
        for ((ix=0; ix < ${#CDPATH_REJECT_RELATIVE[@]}; ix++)) ; do
            if [ "$newdir" = "${CDPATH_REJECT_RELATIVE[$ix]}" ] ; then
                msg="Sorry, target folder rejected by variable 'CDPATH_REJECT_RELATIVE'. Use e.g. prefix ./ instead."
                break
            fi
        done
        # $newdir was rejected, but still may allow direct child folder.
        if [ -n "$msg" ] && [ ! -d "$startdir/$newdir" ] ; then
            echo "$msg" >&2
            return 1
        fi
    }

    _cd_is_echo() { echo "$@" ; }

    local newdir="$1"
    local funcname="$FUNCNAME"
    local REJECTOR_FILE=".no-cd"
    local bcd="builtin cd"
    local startdir="$PWD"

    case "$newdir" in
        ?*/) newdir=${newdir%/} ;;             # remove trailing /
    esac

    _HandleRelativeRejects || return $?        # reject some relative paths

    case "$newdir" in
        -* | /* | .*)
            _cd_is_echo "$@"
            ;;
        "")
            _cd_is_echo "$HOME"
            ;;
        *)
            case "$2" in
               "")          # extensions start here!
                   _HandleMultiMatch                             # if multiple matches, select a (round robin) value for newdir
                   $bcd "$newdir" >/dev/null || return $?        # optimistically cd to the given dir, check rejections below
                   _IsAllowedDir || return "$?"                  # check if the dir is somehow rejected
                   _cd_is_echo "$PWD"                            # OK, just echo the new folder name
                   ;;
               *)
                   _cd_is_echo "$@"
                   ;;
           esac
           ;;
    esac
}

cd-extended "$@"
