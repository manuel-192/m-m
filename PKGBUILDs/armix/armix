#!/bin/bash

# TODO:
# - favorite mirrors
# - long time statistics?
# - less failure output
# - add country to ranking data

echo2()       { echo "$@" >&2; }
DIE()         { echo2 -e "==> $progname: error:\n    $1"; Usage; exit 1; }
DIE2()        { echo2 -e "==> $progname: error:\n    $1"; exit 1; }
WARN()        {
    local app="$progname"
    [ "$app" ] || app="${FUNCNAME[1]}"
    echo2 -e "==> $app: warning: $1"
}

GetCurrentCountry() { cc="$(show-location-info country)"; [ "$cc" ] ; }

GetContinentOfCountry() {
    local countrycode="${1^^}"   # uppercase
    GetContinentsData
    local out=$(echo "$countries_continents" | grep -w "$countrycode" | awk '{print $2}')
    echo "$out"
}
GetContinentsData() {
    [ "$countries_continents" ] || countries_continents=$(location list-countries --show-continent)
}
ShowContinents() {
    [ "$continents" ] || GetContinentsData
    echo "$countries_continents" | awk '{print $NF}' | sort -u
}
ShowContinentsCountries() {
    local continents="${1//,/ }"
    local continent=""
    local result=()
    local result_all=()

    if true ; then
        for continent in $continents ; do
            ShowContinentCountries "$continent" code yes
            [ ${#result[@]} -gt 0 ] && result_all+=("${result[@]}")
            result=()
        done
        echo "${result_all[*]}" | sed 's| |,|g'
    else
        local tmp=$(
            for continent in $continents ; do
                ShowContinentCountries "$continent" code result
            done)
        tmp=$(echo $tmp | tr ' ' '\,' | sed 's|\,\,|\,|g')
        echo "$tmp"
    fi
}
ShowContinentCountries() {
    local continent="$1"
    local show="$2"       # name or code
    local var="$3"
    if [ -x /bin/location ] ; then
        [ "$cc" ] || GetCurrentCountry
        GetContinentsData
        local cont_country_codes=$(echo "$countries_continents" | grep "$continent" | awk '{print $1}')
        local code 
        GetCountriesData
        case "$show" in
            code)
                local out
                for code in $cont_country_codes ; do
                    out=$(echo "$reflector_list_countries" | grep "$code" | awk '{print $(NF-1)}')
                    if [ "$out" ] ; then
                        if [ "${#ignored_country_codes[@]}" -gt 0 ] ; then
                            local tmp="${ignored_country_codes[*]}"
                            tmp="${tmp// /|}"
                            if [ "$var" = yes ] ; then
                                result+=($(echo "$out" | grep -Pv "$tmp"))
                            else
                                echo "$out" | grep -Pv "$tmp"
                            fi
                        else
                            if [ "$var" = yes ] ; then
                                result+=("$out")
                            else
                                echo "$out"
                            fi
                        fi
                    fi
                done
                ;;
            name)
                local name
                for code in $cont_country_codes ; do
                    name=$(echo "$reflector_list_countries" | grep "$code" | sed -E 's|([A-Z].+[a-z]) .*|"\1"|')
                    [ "$name" ] && echo "$name"
                done
                ;;
        esac
        return 0
    else
        WARN "package 'python-location' is required for this operation"
        return 1
    fi
}
ListCountryCodes() {
    GetCountriesData
    echo "$reflector_list_countries" | awk '{print $(NF-1)}'
}
ListCountryNames() {
    GetCountriesData
    echo "$reflector_list_countries" | sed -E 's|([A-Z].+[a-z]) .*|"\1"|'
}
ListCountryCodesNames() {
    GetCountriesData
    echo "$reflector_list_countries" | sed -E 's/([A-Z].+[a-z])[ ]+([A-Z][A-Z]) .*/\2  \1/'
}
GetCountriesData() {
    [ "$reflector_list_countries" ] || UpdateCompletionFiles
}
GivenContinent() {
    local continent1="$1"
    local tmp1=$(ShowContinentsCountries "$continent1")
    printf "%s\n" $all_continents | grep "^$continent1$" >/dev/null || DIE2 "continent '$continent1' not found"
    [ "$tmp1" ] || DIE2 "no mirrors found in: $continent1"
    Options --country $tmp1
}
AllContinents() {
    local tmp1=$(ShowContinentsCountries "$all_continents")
    [ "$tmp1" ] || DIE "no mirrors found in: $all_continents"
    Options --country $tmp1
}
IgnoreContinents() {
    local list="$1"
    local tmp1=$(ShowContinentsCountries "$list")
    [ "$tmp1" ] || DIE "no mirrors found in: $list"
    Options --ignore-countries ${tmp1// /,}
}
IgnoreCountries() {
    if [ $prevent_ignoring_countries = no ] ; then
        local code="$1"
        code="${code//,/ }"
        case "$code" in
            /*) ignored_country_codes=(${code:1}) ;;    # overwrite the ignore list if $code has a leading /
            *)  ignored_country_codes+=($code) ;;       # append $code the ignore list
        esac
    fi
}
IgnoreMirrors() {
    local codes="$1"
    codes="${codes//,/ }"
    case "$codes" in
        /*) ignored_mirrors=(${codes:1}) ;;
        *)  ignored_mirrors+=($codes) ;;
    esac
}
AddCountries() {
    local list="${1^^}"                     # make country codes uppercase
    list=${list//,/ }                       # change commas to spaces
    case "$list" in
        /*) countries=(${list:1}) ;;        # leading / replaces the country list
        *)  countries+=($list) ;;           # append to the country list
    esac
}

GetTimeInfo() { date +%j; }

UpdateCompletionFiles() {
    local -r completion_files=($(ShowCompletionFiles))

    local -r dir="${completion_files[0]}"
    local -r timefile="${completion_files[1]}"
    local -r countrycodes="${completion_files[2]}"
    local -r countrynames="${completion_files[3]}"
    local -r optionsfile="${completion_files[4]}"
    # local -r continents=(${completion_files[5]//,/ } )
    local -r reflector_countries_file="$dir/reflectorcountries.txt"
    local -r now=$(GetTimeInfo)
    local prevtime=""

    [ "$dir" ] || DIE "no folder name for the completion files"

    mkdir -p "$dir"

    # [ -e "$timefile" ] && rm -f "$timefile" "$reflector_countries_file" "$countrycodes" "$countrynames" "$optionsfile"

    reflector_list_countries=$(reflector --list-countries) || DIE "cannot get list of countries"
    reflector_list_countries=$(echo "$reflector_list_countries" | tail -n +3)

    echo "$reflector_list_countries" > "$reflector_countries_file"
    echo "$now"                      > "$timefile"
    ListCountryCodes                 > "$countrycodes"
    ListCountryNames                 > "$countrynames"
    DumpOptions                      > "$optionsfile"
}

ShowCompletionFiles() {
    local -r dir="$HOME/.cache/$progname"
    local -r continents=(
        "$dir"
        "$dir/timeinfo.txt"
        "$dir/countrycodes.txt"
        "$dir/countrynames.txt"
        "$dir/optionsfile.txt"
        "${all_continents// /,}"
        "$dir/reflectorcountries.txt"
    )
    echo "${continents[@]}"
}
ResetCompletionFiles() {
    local xx=($(ShowCompletionFiles))
    local item

    for item in "${xx[@]}" ; do
        case "$item" in
            *.txt) echo2 "rm -f $item"; rm -f "$item" ;;
        esac
    done
    
}

TraverseMirrors-parallel() {
    echo2 "==> $progname: ranking mirrors in parallel"
    echo "$mirrors_with_statefiles" | parallel "$progname_helper {} '$timeout_rank' '$distro' '$time_as_datetime'"
}

TraverseMirrors-sequential() {
    echo2 "==> $progname: ranking mirrors in sequence"
    local mirror
    local ix=1
    local count=$(echo "$mirrors_with_statefiles" | wc -l)

    for mirror in $mirrors_with_statefiles ; do
        printf "\r==> ranking %s/$count" $((ix++)) >&2
        $progname_helper "$mirror" $timeout_rank $distro $time_as_datetime
    done
    echo2 ""
}

DumpOptions() {
    if [ "$LOPTS" ] ; then
        LOPTS=${LOPTS//:/}          # remove all : chars
        LOPTS="--${LOPTS//,/ --}"   # make all words as options with prefix "--"
    fi
    if [ "$SOPTS" ] ; then
        SOPTS=${SOPTS//:/}          # remove all : chars
        SOPTS=${SOPTS//?/ -&}       # make all letters as options with prefix "-"
        SOPTS=${SOPTS:1}            # remove the first space
    fi

    [ "$LOPTS$SOPTS" ] && echo $LOPTS $SOPTS
}

Edit() {
    local file="$1"
    local editors=( exo-open xdg-open kde-open emacs kate gnome-text-editor xed mousepad )
    local editor
    for editor in "${editors[@]}" ; do
        if which $editor &>/dev/null ; then
            if [ ! -e "$file" ] ; then
                touch "$file" || DIE2 "cannot create file '$file'"
            fi
            $editor "$file"
            return
        fi
    done
    DIE2 "no text editor found!"
}

Usage() {
#Usage: $progname [options] [URLs]
#URLs:                          URL(s) of mirrors to rank.
#    --list-country-codes           Show available country codes. See also: 'reflector --list-countries'.
#    --list-country-names           Show available country names. See also: 'reflector --list-countries'.
#    --show-continent-countries     Show the country codes of a continent based on given country code.
    cat <<EOF

Rank Arch mirrors and display them.

Usage: $progname [options]

Options:
    -A, --all                        Rank all available mirrors on all continents.
    -C, --continent                  Rank all available countries of the current continent.
    -c, --country <list>             A comma separated list of country code(s) for ranking their mirrors.
                                     Codes are case insensitive. Leading / in the value replaces the existing list.
                                     Examples:
                                        --country de,gb          # adds DE and GB for ranking
                                        --country /de,dk         # sets DE and DK for ranking
    -t, --country-current            Include current country to be ranked.
    -e, --edit-config                Edit your configuration file.
    -i, --ignore-mirrors <list>      A comma separated list of mirrors to ignore.
                                     A mirror can be a unique part of the mirror address.
    -x, --ignore-countries <list>    A comma separated list of country codes to ignore.
    -X, --ignore-continents <list>   A comma separated list of continent codes to ignore.
    -l, --list-country-codes-names   List all available country codes and names.
    --list-continent-codes           List all available continent codes.
    -r, --ranking-data               Show ranking data too.
    -u                               Update mirror info first.
    --timeout-rank                   Max timeout in seconds for ranking a mirror.
    --timeout                        Max timeout in seconds for other than ranking.
    -h, --help                       This help.

Configuration file $config_file can include all supported options in variable CONFIG_OPTIONS.
Examples:
    CONFIG_OPTIONS=(--country DE,US --country-current --ranking-data)
    CONFIG_OPTIONS=(--continent --ranking-data)
    CONFIG_OPTIONS=(--country-current)
Command line options override configuration file options.

Note: there are additional options available, see them with option --dump-options
      and the source code at $(which $progname).
EOF
}
Options() {
    local opts

    opts="$(/bin/getopt -o=$SOPTS --longoptions $LOPTS --name "$progname" -- "$@")" || DIE "getopt error"
    eval set -- "$opts"

    while true ; do
        case "$1" in
            --)                                     shift; break ;;
            -h | --help)                            ;;   # already handled in OptionsPreHandle()
            --no-config)                            ;;   # already handled in OptionsPreHandle()
            -I | --no-ignore-countries)             ;;   # already handled in OptionsPreHandle()
            -l | --list-country-codes-names)        ;;   # already handled in OptionsPreHandle()
            -i | --ignore-mirrors)                  shift ;;   # already handled in OptionsPreHandle()
            --dump-options)                         ;;   # already handled in OptionsPreHandle()
            -A | --all)                             AllContinents ;;
            -C | --continent)                       Options --country $(echo $(Options --show-current-continent-countrycodes) | tr ' ' ',') ;;
            -c | --country)                         AddCountries "$2"; shift ;;                         # must be country codes!
            --continent-given)                      GivenContinent "$2"; shift ;;
            -d | --distro)                          distro="$2"; shift ;;
            -e | --edit-config)                     exit 0 ;; # already handled
            -x | --ignore-countries)                IgnoreCountries "$2"; shift ;;
            -X | --ignore-continents)               IgnoreContinents "$2"; shift ;;
            -t | --country-current)                 GetCurrentCountry && countries+=($cc) ;;
            -r | --ranking-data)                    ranking_data=yes ;;
            --full-data)                            full_data=yes ;;
            --no-parallel)                          has_parallel=no ;;
            -u)                                     update_mirrordata_first=yes ;;
            --dump-completion-files)                ShowCompletionFiles; exit 0 ;;
            --update-completion-files)              UpdateCompletionFiles; exit 0 ;;
            --get-time-info)                        GetTimeInfo; exit 0 ;;
            --reset-completion-files)               ResetCompletionFiles; exit 0 ;;
            --list-continent-codes)                 echo "$all_continents"; exit 0 ;;
            --list-country-codes)                   ListCountryCodes; exit 0 ;;
            --list-country-names)                   ListCountryNames; exit 0 ;;
            --show-continent-countrycodes)          ShowContinentCountries "$2" code; exit ;;
            --show-continent-countrynames)          ShowContinentCountries "$2" name; exit ;;
            --show-current-continent-countrycodes)  GetCurrentCountry && ShowContinentCountries "$(GetContinentOfCountry $cc)" code; exit ;;
            --show-current-continent-countrynames)  GetCurrentCountry && ShowContinentCountries "$(GetContinentOfCountry $cc)" name; exit ;;
            --timeout)                              timeout_distro="$2"; shift ;;
            --timeout-rank)                         timeout_rank="$2"; shift ;;

            # --save)                                 savefile="$2"; shift ;;                 # option --save likely will not be supported
        esac
        shift
    done
    RemoveIgnoredFromCountries
    urls+=("$@")
}

OptionsPreHandle0() {
    local arg
    for arg in "$@" ; do
        case "$arg" in
            --no-config) read_config=no; break ;;
        esac
    done
}
OptionsPreHandle() {
    # - handle some special options
    # - collect args array to be handled later
    while [ "$1" ] ; do
        case "$1" in
            -h | --help)                       Usage; exit 0 ;;
            -e | --edit-config)                Edit "$config_file"; exit 0 ;;
            -i | --ignore-mirrors)             IgnoreMirrors "$2"; shift ;;
            --dump-completion-files)           ShowCompletionFiles; exit 0 ;;
            -l | --list-country-codes-names)   ListCountryCodesNames; exit 0 ;;
            --dump-options)                    DumpOptions; exit 0 ;;
            --no-config)                       ;;   # already handled in OptionsPreHandle0()
            -I | --no-ignore-countries)        prevent_ignoring_countries=yes ;;
            *) args+=("$1") ;;
        esac
        shift
    done
}
RemoveIgnoredFromCountries() {
    local code
    local countries_orig=("${countries[@]}")

    countries=()
    for code in "${countries_orig[@]}" ; do
        printf "%s\n" "${ignored_country_codes[@]}" | grep "^$code$" >/dev/null || countries+=("$code")
    done
}
Main() {
    local -r progname=${0##*/}

    case "$1" in
        --time) shift
                if [ -x /bin/time ] ; then
                    local tmpfile=$(mktemp)
                    /bin/time --output=$tmpfile -p $progname "$@"
                    echo -e "\n#### Total measurement time (seconds):"
                    sed 's|^|####   |' < $tmpfile
                    rm -f $tmpfile
                    exit
                else
                    DIE "package 'time' is required for option --time"
                fi
                ;;
    esac

    local -r progname_helper=${progname}-helper  # ${progname%2}-helper
    local distro=arch                             # arch (maybe later: endeavouros)
    local urls=() url
    local timeout_distro=30
    local timeout_rank=20
    local syncfile=""
    local mirrors
    local time_as_datetime=no
    local ranking_data=no
    local full_data=no
    local ignored_mirrors=()
    local ignored_country_codes=()
    local countries=()                  # contains only uppercase country codes
    local cc=""                         # current country
    local countries_continents=""
    local tmp
    local savefile=""                   # not supported currently, if ever
    local suffix=""
    local reflector_list_countries=""
    local has_parallel=yes
    local read_config=yes
    local update_mirrordata_first=no
    local prevent_ignoring_countries=no       # if yes, then forget option --ignore-countries
    local CONFIG_OPTIONS=()
    local ecode=0
    local -r config_file="$HOME/.config/$progname.conf"
    local -r all_continents="AF AN AS EU NA OC SA"
    local args=() args_orig=("$@")
    local completion_files_updated=no

    local SOPTS="ACc:d:ehi:x:lrtu"
    SOPTS+="I"

    local LOPTS=""
    LOPTS+="all,continent,country:,country-current,distro:,dump-completion-files,dump-options,full-data,help"
    LOPTS+=",list-country-codes,list-country-codes-names,list-country-names,ranking-data"
    LOPTS+=",reset-completion-files,show-continent-countrycodes:,show-continent-countrynames:,update-completion-files"
    LOPTS+=",show-current-continent-countrycodes,show-current-continent-countrynames,get-time-info"
    LOPTS+=",ignore-countries:,timeout:,timeout-rank:,no-parallel,continent-given:,list-continent-codes,ignore-continents:"
    LOPTS+=",no-ignore-countries,no-config,ignore-mirrors:,edit-config"
    # LOPTS+=",save:"

    [ -x /bin/parallel ] || has_parallel=no

    OptionsPreHandle0 "$@"
    if [ $read_config = yes ] && [ -e "$config_file" ] ; then
        source "$config_file"
    fi

    OptionsPreHandle "${CONFIG_OPTIONS[@]}" "$@"

    Options "${args[@]}"

    case "$distro" in
        arch)
            if [ ${#countries[@]} -eq 0 ] ; then
                echo2 "==> option --country not used -> automatically adding the current country for ranking, if possible"
                GetCurrentCountry && countries+=($cc) && echo2 "==> added: $cc" || DIE "no countries given for ranking."
            fi
            syncfile=lastupdate
            time_as_datetime=yes
            suffix='/$repo/os/$arch'
            local countries2="${countries[*]}"
            local update=""
            [ $update_mirrordata_first = yes ] && update="-u"
            mirrors=$(${progname}-status -c ${countries2// /,} -t $timeout_distro $update) || exit 1
            ;;
        endeavouros)
            DIE "sorry, support for EndeavourOS not yet implemented."
            syncfile=state
            suffix='/$repo/$arch'
            local mirrorlist=""    # TODO: fetch endeavouros-mirrorlist !!
            mirrors=$(grep "^Server[ \t]*=[ \t]*" "$mirrorlist" | awk '{print $NF}')
            ;;
        *)  DIE "sorry, distro '$distro' not supported." ;;
    esac

    local mirrors_with_statefiles=$(echo "$mirrors" | sed "s|/\$repo/os/\$arch|/$syncfile|")
    SkipIgnoredMirrors

    local mode=""
    case "$has_parallel" in
        yes) result=$(TraverseMirrors-parallel); mode="in parallel" ;;
        no)  result=$(TraverseMirrors-sequential); mode="sequentially" ;;
    esac

    local ranked=$(echo "$result" | column -t -s'|' | LC_ALL=C sort -k2rb,2 -k3b,3)   # sort: age
    local ranked_full=""

    CreateMirrorlistFile

    #if [ -z "$savefile" ] ; then
    #    CreateMirrorlistFile "${args[@]}"
    #elif [ -w ${savefile%/*} ] && [ -w "$savefile" ] ; then
    #    CreateMirrorlistFile "${args[@]}" | tee "$savefile"
    #else
    #    CreateMirrorlistFile "${args[@]}" | sudo tee "$savefile"
    #fi
}

SkipIgnoredMirrors() {
    if [ ${#ignored_mirrors[@]} -gt 0 ] ; then
        local ign=${ignored_mirrors[*]}
        ign=${ign// /|}
        mirrors_with_statefiles=$(echo "$mirrors_with_statefiles" | grep -Pv "$ign")
    fi
}

CreateMirrorlistFile() {
    ShowMirrorlist    "\n### ${distro^} mirror list, ranked $mode by command:\n### $progname ${CONFIG_OPTIONS[*]} ${args_orig[*]}\n"
    ShowRankingData
    ShowFullData
}

ShowFullData()    {
    if [ $full_data = yes ] ; then
        echo -e "\n### Full data:"
        echo "$ranked"
    fi
}
ShowMirrorlist()  {
    echo -e "$1"
    echo "$ranked" | awk '{print $1}' | sed -E "s|(.*)|Server = \1$suffix|"
}
ShowRankingData() {
    if [ $ranking_data = yes ] ; then
        local -r count=$(echo "$ranked" | wc -l)
        echo -e "\n### Ranking data ($count mirrors):"
        echo "$ranked" | sed -E "s|^([^ ]+)|### \1$suffix|"
    fi
}

Main  "$@"
