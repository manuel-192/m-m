#!/bin/bash

echo2()   { echo   "$@" >&2 ; }
printf2() { printf "$@" >&2 ; }

DIE() {
    local msg="$1"

    echo2 "Error: $msg"

    if [ -n "$2" ] ; then
        # run a command after the message
        shift
        "$@"
    fi
    Usage 1
}

WARN() { echo2 "    Warning: $1" ; }
INFO() { echo2 "    Info: $1" ; }

REFLECTOR_COUNTRIES="$(echo "Worldwide WW 0" ; reflector --list-countries 2>/dev/null | /usr/bin/sed -n '/^-----/,//'p | /usr/bin/sed '1d')"
CodeToCountry() {  # convert country code to country name
    local code="$1"
    local country="$(echo "$REFLECTOR_COUNTRIES" | grep -w "$code" | sed 's|^\(.*[a-z]\)[ ]*[A-Z][A-Z].*$|\1|')"
    echo "$country"
}

ShowCountryCodes() {
    case "$1" in
        full)
            echo2 "Supported country names and country codes:"
            reflector --list-countries | sed 's| [ ]*[0-9]*$||' | /usr/bin/sed -n '/^-----/,//'p | /usr/bin/sed '1d'
            ;;
        simple)
            echo2 "Supported country codes:"
            reflector --list-countries | awk '{print $(NF-1)}' | tr '\n' ' '
            echo2 ""
            ;;
    esac
}

GetYourCountryCode() {
    local code="$(curl -s https://ipinfo.io/country)"

    case "$code" in
        [A-Z][A-Z])
            if [ -n "$(CodeToCountry "$code")" ] ; then
                echo "$code"
                return 0                                   # country code is supported by reflector
            fi
            ;;
    esac
    return 1  # fail
}

# gettime fetchurl (e.g gettime http://foo.com/core/os/i686/core.db.tar.gz)
# returns the fetching time, or timeout, or unreachable
GetTime() {
    local url="$1"           # input url
    local file="$2"          # output file
    local MAX_TIME=10
    local output=(99 99)
    local result2="" errcode
    local tt

    IFS=' ' output=( $(curl -s -m $MAX_TIME -w "%{time_total} %{http_code}" "$url" -o$file) )
    errcode=$?

    case $errcode in
        0) ;;
        28) echo timeout ; return ;;
        *)  echo unreachable ; return ;;
    esac

    case "${output[1]}" in
        ""|301|302)
            echo unreachable
            return
            ;;
        *)
            if [ "${output[1]}" -ge "400" ] ; then
                echo unreachable
                return
            fi
            ;;
    esac

    tt="${output[0]}"

    case "$tt" in
        "")
            echo unreachable
            ;;
        *)
            # is $tt in seconds or in microseconds ???

            case "$tt" in
                *.*) echo "$tt"   # seconds
                     ;;
                *)   result2="$(echo "scale=6; $tt / 1000000" | bc -l)"
                     [ "${result2::1}" = "." ] && result2="0$result2"
                     echo "$result2"
                     ;;
            esac
            ;;
    esac
}

GetLatestMirrorlistFile() {
    local latest="https://archlinux.org/mirrorlist/?country=all&protocol=http&protocol=https&ip_version=4"
    local mlfile=$(mktemp)
    curl -s -m 10 "$latest" -o$mlfile
    echo $mlfile
}

AddToCountries() {
    local arg="$1"

    case "$arg" in
        [A-Z][A-Z])
            local country="$(CodeToCountry "$arg")"
            if [ -z "$country" ] ; then
                DIE "country code '$arg' not supported." ShowCountryCodes simple
            fi
            countries+=("$country")
            ;;
        *)
            countries+=("$arg")
            ;;
    esac
}

Options_help_old() {
    for arg in "$@" ; do
        cmdline+=" '$arg'"
        case "$arg" in
            --speed | -s)  sortbase1=speed ;;
            --age   | -a)  sortbase1=age ;;
            --one   | -1)  bundle1=yes ;;
            --help  | -h)  Usage 0 ;;
            --save)        save1=yes ;;
            --ls)          savefile1=lastsync ;;
            --lu)          savefile1=lastupdate ;;
            --show-codes)  ShowCountryCodes full ; exit 0 ;;
            --show-config) less $conffile ; exit 0 ;;
            -*)            DIE "unsupported option '$arg'" ;;
            *)             AddToCountries "$arg" ;;
        esac
    done
}

Options_help() {
    local opts retcode arg

    opts="$(getopt -o=abhs1 --longoptions age,both-protocols,speed,one,help,local,save,ls,lu,show-codes,show-config --name "$progname" -- "$@")"

    retcode=$?
    [ $retcode -eq 0 ] || Usage $retcode

    eval set -- "$opts"

    while true ; do
        arg="$1"
        cmdline+=" '$arg'"
        case "$arg" in
            --speed | -s)  sortbase1=speed ;;
            --age   | -a)  sortbase1=age ;;
            --one   | -1)  bundle1=yes ;;
            --help  | -h)  Usage 0 ;;
            --save)        save1=yes ;;
            --ls)          savefile1=lastsync ;;
            --lu)          savefile1=lastupdate ;;
            --both-protocols | -b) use_both_protocols=yes ;;
            --local)       use_local_country=yes ;;
            --show-codes)  ShowCountryCodes full ; exit 0 ;;
            --show-config) less $conffile ; exit 0 ;;
            --) shift ; break ;;
            -*) DIE "unsupported option '$arg'" ;;       # executed only if getopt params conflict with this while loop
        esac
        shift
    done
    for arg in "$@" ; do
        AddToCountries "$arg"
    done
}

Options() {
    local arg
    local country
    # Use temporary variables because the Usage function shows defaults.
    local sortbase1="$sortbase"
    local savefile1="$savefile"
    local save1="$save"
    local bundle1="$bundle"

    Options_help "$@"

    test -n "$countries" || DIE "country spec(s) required"
    save="$save1"
    bundle="$bundle1"
    sortbase="$sortbase1"
    savefile="$savefile1"
}

Usage() {
    local def="yes    "
    local emp="no     "
    local aaa="Default"   # dummy to get the measure for the strings above

    cat <<EOF >&2
Usage: $progname [options] country-specs
Options:
    Long                Short  Active? Description
    ====                =====  ======= ===========
    --speed             -s     $(Default $sortbase speed) Sort output by speed
    --age               -a     $(Default $sortbase age) Sort output by the time of latest updates
    --one               -1     $(Default $bundle yes) List all mirrors in one list
    --save                     $(Default $save yes) Save file to \$HOME/mirrorlist
    --lu                       $(Default $savefile lastupdate) Age: use lastupdate file
    --ls                       $(Default $savefile lastsync) Age: use lastsync file
    --both-protocols    -b     no      Use both https and http. Default is https only.
    --local                    no      Include local country automatically.
    --show-codes                       Show available country names and country codes
    --show-config                      Show the configuration file $conffile
    --help              -h             This help

Country-specs is a space separated list of country names or country codes.
Use quotes with a name that contains spaces (e.g. "United Kingdom").

Examples:
    $progname --show-codes
    $progname FR DE "United Kingdom"

EOF
    test -n "$1" && exit "$1"
}

Default() { test "$1" = "$2" && printf "$def" || printf "$emp" ; }

OneCountry() {
    # echo2 "$country:"
    local synctime
    local excluded
    local mirrorpart

    for mirror in $mirrors_of_country ; do
        rm -f $savefile
        excluded=no
        for mirrorpart in "${excluded_mirrors[@]}" ; do
            [[ $mirror =~ $mirrorpart ]] && { excluded=yes ; break ; }
        done
        test "$excluded" = "yes" && continue

        time="$(GetTime $mirror/$savefile $savefile)"
        case "$time" in
            timeout|unreachable) WARN "$mirror: $time" ; continue ;;
        esac
        if [ ! -r $savefile ] ; then
            WARN "$mirror: $savefile not found"
            continue
        fi

        # "Store" the mirror info to this line! Fields are:
        #     mirror-url age fetchtime
        synctime="$(cat $savefile)"
        if [ -z "$synctime" ] ; then
            WARN "$mirror: $savefile is empty!"
            continue
        fi
        if [ $synctime -gt $now ] ; then
            INFO "$mirror clock seems ahead of time by $((synctime - now)) seconds. Resetting the difference."
            synctime=now                  # mirror's clock is ahead of time !?
        fi
        echo "$mirror/\$repo/os/\$arch $((now - synctime)) $time $country"  # country should be the last because of 'column' below!
        rm -f $savefile
    done
}

ReadConfig() {
    local ix xx
    source $conffile
    if [ -n "${use_countries[$local_country_code]}" ] ; then
        # limit to less than 100 countries!
        for ((ix=1; ix<100; ix++)) ; do
            xx="$(echo "${use_countries[$local_country_code]}" | cut -d '|' -f $ix)"
            test -n "$xx" || break
            countries+=("$xx")
        done
    fi
    if [ -n "${exclude_mirrors[$local_country_code]}" ] ; then
        # limit to less than 200 mirrors!
        for ((ix=1; ix<200; ix++)) ; do
            xx="$(echo "${exclude_mirrors[$local_country_code]}" | cut -d '|' -f $ix)"
            test -n "$xx" || break
            excluded_mirrors+=("$xx")
        done
    fi
}

Main()
{
    # local mirrorlist=/etc/pacman.d/mirrorlist.pacnew   # or get the latest at Arch
    local progname="$(basename "$0")"
    local repo=core
    local arch=x86_64
    local save=no                     # no or yes
    local sortbase=age                # age or speed
    local sf1=2                       # sort field, based on age
    local sf1=3                       # sort field, based on age
    local savefile=lastupdate         # lastupdate or lastsync (Arch says lastsync...)
    local use_both_protocols=no       # no=only https, yes=both https and http
    local use_local_country=no
    local mirror
    local country mirrors_of_country unsorted
    local countries=()
    local excluded_mirrors=()
    local bundle=no
    local agehdr=Age
    local conffile=/etc/mirror-countries.conf   # list of countries to use in a particular country
    local targetfile=$HOME/mirrorlist    #-$(date +%Y%m%d-%H%M)
    local tmpfile1=$(mktemp)
    local tmpfile=$(mktemp)
    local cmdline="$progname"
    local local_country_code="$(GetYourCountryCode)"
    local local_country=""

    if [ -n "$local_country_code" ] ; then
        test -r $conffile && ReadConfig            # may not find anything here...
        if [ "$use_local_country" = "yes" ] ; then
            if [ ${#countries[@]} -eq 0 ] ; then
                # make sure your country is included (provided it is supported by the Arch mirroring system)
                local_country="$(CodeToCountry $local_country_code)"
                countries=("$local_country")
            fi
        fi
    fi

    Options "$@"

    local now=$(date +%s)             # date --date='@2147483647'
    local mirrorlist=$(GetLatestMirrorlistFile)

    case "$sortbase" in
        age)    sf1=2 ; sf2=3 ;;
        speed)  sf1=3 ; sf2=2 ;;
        *) DIE "unsupported sort base '$sortbase'" ;;
    esac
    if [ "$savefile" = "lastsync" ] ; then
        # ((now+=200))                          # trick to mitigate problem of negative time diffs
        agehdr=Lastsync
    fi

    if [ "$bundle" = "yes" ] ; then
        local all_results=""
    else
        declare -A all_results
    fi

    if [ "$bundle" = "yes" ] ; then
        echo2 "Result as one list."
    else
        echo2 "Result as per country."
    fi
    echo2 "Note: this may take several minutes!"
    echo2 ""

    for country in "${countries[@]}" ; do
        echo2 "$country"
        if [ "$use_both_protocols" = "yes" ] ; then
            mirrors_of_country=$(sed -n '/^## '"$country"'$/,/^$/p' $mirrorlist | sed '1d;$d' | grep -P "^#Server = https://|^#Server = http://" | awk '{print $3}' | sed 's|/$repo/os/$arch||')
        else
            mirrors_of_country=$(sed -n '/^## '"$country"'$/,/^$/p' $mirrorlist | sed '1d;$d' | grep "^#Server = https://" | awk '{print $3}' | sed 's|/$repo/os/$arch||')
        fi
        unsorted=$(OneCountry)
        if [ "$bundle" = "yes" ] ; then
            all_results+="$unsorted"
            all_results+=$'\n'             # may cause extra lines in output!
        else
            all_results[$country]="$unsorted"
        fi
    done
    echo2 ""
    rm -f $mirrorlist

    rm -f $targetfile
    echo "# Generated by $progname at $(date -u '+%Y-%m-%d %H:%M') UTC" >> $targetfile
    echo "# Command line: $cmdline" >> $targetfile
    if [ -r $conffile ] ; then
        echo "# Config file $conffile read." >> $targetfile
    else
        if [ -n "$local_country" ] ; then
            echo "# Current country '$local_country' added automatically." >> $targetfile
        fi
    fi
    echo "" >> $targetfile

    cat $targetfile >&2

    if [ "$bundle" = "yes" ] ; then
        # show to user
        echo "${all_results}" | sort -V -k$sf1,$sf2 | column -o " " -t -N "Mirror-url,$agehdr(sec),Fetch-time(sec),Country" > $tmpfile1
        cat $tmpfile1
        # store for the final result
        cat $tmpfile1 >> $tmpfile
        # write the mirrorlist defs
        echo "${all_results}" | sort -V -k$sf1,$sf2 | awk '{print "Server = " $1}' | grep -v "^Server = $" >> $targetfile
    else
        for country in "${countries[@]}" ; do
            echo "## $country" > $tmpfile1
            echo "${all_results[$country]}" | sort -V -k$sf1,$sf2 | column -H - -o " " -t -N "Mirror-url,$agehdr(sec),Fetch-time(sec)" >> $tmpfile1
            cat $tmpfile1
            cat $tmpfile1 >> $tmpfile
            echo "## $country" >> $targetfile
            echo "${all_results[$country]}" | sort -V -k$sf1,$sf2 | awk '{print "Server = " $1}'  | grep -v "^Server = $" >> $targetfile
        done
    fi
    if [ -r $HOME/mirrorlist ] ; then
        echo "" >> $targetfile
        echo "# Gathered ranking data:" >> $targetfile
        echo "" >> $targetfile
        cat $tmpfile | sed 's|^|## |' >> $targetfile

        echo ""
        echo "File $targetfile saved."
        echo ""
        echo "Note: you need to copy $targetfile to /etc/pacman.d/mirrorlist"
        echo "      (as root) to actually use it."
    fi
    rm -f $tmpfile $tmpfile1
}

Main "$@"
