#!/bin/bash

RepoType() {
    test -z "$(grep "^\[testing\]$" /etc/pacman.conf)" && echo "Stable" || echo "Testing"
}

Header() {
    local fname="${FUNCNAME[1]}"
    case "$fname" in
        KernelOrg) fname="kernel.org"
    esac
    local hdr="<b>$fname</b>"

    if [ "$fname" = "$(RepoType)" ] ; then
        hdr+=" (current)"
    fi
    echo "$hdr"
}

LocalVersion() { /usr/bin/pacman -Q "$1" 2>/dev/null | /usr/bin/awk '{print $2}' ; }
Exist()        { test -n "$version" && echo TRUE || echo FALSE ; }

Installed() {
    local version exist
    cmd+=(--field="$(Header)":LBL "")
    for xx in "${kernels[@]}" ; do
        version="$(LocalVersion "$xx")"
        exist="$(Exist)"
        cmd+=(--field="$xx $version":CHK $exist)
    done
}

StableVersion() {
    local pkg="$1"
    local repo

    case "$pkg" in
        linux | linux-headers | linux-lts*) repo=core ;;
        linux-zen* | linux-hardened*)       repo=extra ;;
    esac
    LANG=C pacman -Si $repo/"$pkg" | grep ^Version | awk '{print $3}'
}

Stable() {
    local version exist
    cmd+=(--field="$(Header)":LBL "")
    for xx in "${kernels[@]}" ; do
        version="$(StableVersion "$xx")"
        exist="$(Exist)"
        cmd+=(--field="$xx $version":LBL $exist)
    done
}

TestingVersion() {
    local pkg="$1"
    echo "$testinginfo" | grep -A2 /packages/testing/x86_64/$pkg/ | tail -n 1 | sed 's|^[ ]*<td>\([0-9a-z\.\-]*\)<.*$|\1|'
}

Testing() {
    local testinginfo="$(curl -s "https://www.archlinux.org/packages/?sort=&repo=Testing")"
    local version exist
    cmd+=(--field="$(Header)":LBL "")
    for xx in "${kernels[@]}" ; do
        version="$(TestingVersion "$xx")"
        test -n "$version" || version="$na"
        exist="$(Exist)"
        cmd+=(--field="$xx $version":LBL $exist)
    done
}

KernelOrgVersion() {
    local type="$1"
    echo "$kernelorg" | grep -A2 $type: | head -n 2 | grep strong | sed -e 's|^.*<strong>||' -e 's|</strong>.*$||' | grep -v rc
}

KernelOrg() {
    local version
    local kernelorg="$(curl -s https://www.kernel.org)"
    local org_kernels=(mainline stable longterm linux-next)
    local stableversion="$(KernelOrgVersion stable)"
    cmd+=(--field="$(Header)":LBL "")
    for xx in "${org_kernels[@]}" ; do
        version="$(KernelOrgVersion "$xx")"
        case "$xx" in
            mainline)
                if [[ $version > $stableversion ]] ; then
                    cmd+=(--field="$xx $version":LBL "")
                else
                    cmd+=(--field="$xx $na":LBL "")
                fi
                ;;
            *) cmd+=(--field="$xx $version":LBL "") ;;
        esac
    done
    org_kernels=($na $na $na $na)
    for xx in "${org_kernels[@]}" ; do
        cmd+=(--field="$xx":LBL "")
    done
}

Main()
{
    local na="--"
    local kernels=(
        linux             linux-headers
        linux-lts         linux-lts-headers
        linux-zen         linux-zen-headers
        linux-hardened    linux-hardened-headers
    )
    local xx
    local t1="Installed = currently installed packages and their versions.\n"
          t1+="Stable = versions available from the stable repos.\n"
          t1+="Testing = versions available from the testing repos.\n"
          t1+="kernel.org = latest kernel versions at kernel.org.\n"
          t1+="Your current repos are either Stable or Testing (see /etc/pacman.conf).\n\n"
          t1+="Check/uncheck to install/uninstall.\n"
          t1+="Marking '$na' means: info not available.\n"
    local cmd=(
        /usr/bin/yad
        --form --title="Simple kernel manager" --columns=4
        --text="$t1"
        --image=system-software-update
        --window-icon=applications-system
    )

    Installed

    Stable
    Testing

    KernelOrg

    local ix installed install=() uninstall=() pkg
    local result="$("${cmd[@]}")"
    test -z "$result" && return

    result="${result:1}"                               # skip first LBL field !!

    #echo "result = $result" >&2

    for ((ix=0; ix < ${#kernels[@]}; ix++)) ; do
        pkg="${kernels[$ix]}"
        installed="$(LocalVersion "$pkg")"
        case "$(echo "$result" | cut -d '|' -f $((ix+1)))" in
            TRUE)   test -z "$installed" && install+=("$pkg") ;;
            FALSE)  test -n "$installed" && uninstall+=("$pkg") ;;
        esac
    done

    cmd=()
    test -n "$uninstall" && cmd+=(pacman -Rsn ${uninstall[*]} ";")
    test -n "$install"   && cmd+=(pacman -S ${install[*]} ";")

    test -n "$cmd" && {
        cmd="terminator -x bash -c \"echo '${cmd[*]}' ; sudo bash -c '${cmd[*]}' ; read -p 'Press ENTER to close: '\""
        $cmd
    }
}

Main "$@"
