#!/bin/bash

# Easy help to run a C or C++ language file by adding one of lines
#      #!/usr/bin/run-gcc
#      #!/usr/bin/run-g++
#      #!/usr/bin/run-clang
#      #!/usr/bin/run-clang++
# as the first line to that source file and making it executable.
#
# Then you can run the file, e.g.
#      ./hello.c
#
# You can also add compiler options after the file, e.g.
#      ./hello.c -O2
#

DIE() {
    local progname="$(basename "$0")"
    printf "==> %s error: %s\n" "$progname" "$1" >&2
    exit 1
}

Main() {
    local file="$1"
    [ -n "$file" ] || DIE "no file as a parameter!"
    [ -r "$file" ] || DIE "cannot read file '$file'"
    shift
    local prefix="exe"
    local filetmp=""
    local a_out=""
    local line=$(head -n1 "$file")
    local helper=$(echo "$line" | sed -E 's|#!([^ ]+)[ ]*.*|\1|')
    local compiler="$(basename $helper | sed "s|^${prefix}-||")"

    # echo "cmd line = $*" >&2

    case "$compiler" in
        gcc | g++ | clang | clang++)
            [ -x $helper ] || DIE "sorry, $helper not found"
            [ -x /usr/bin/$compiler ] || DIE "sorry, $compiler not found"
            ;;
        *)
            DIE "helper line '$line' unsupported"
            ;;
    esac

    case "$line" in
        "#!$helper"*)
            a_out=$(mktemp "$HOME/.cache/XXXXXXXX")
            filetmp="$a_out"-"$(basename "$file")"
            tail -n +2 "$file" > "$filetmp"
            $compiler "$@" -o "$a_out" "$filetmp" || DIE "compilation failed"
            "$a_out"
            rm -f "$a_out" "$filetmp"
            ;;
    esac
}

Main "$@"
