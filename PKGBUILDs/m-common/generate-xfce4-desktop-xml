#!/bin/bash

DIE() { echo "$progname: error: $1" >&2; exit 1; }

Start() {
    cat <<EOF
<?xml version="1.1" encoding="UTF-8"?>

<channel name="xfce4-desktop" version="1.0">
EOF
}
End() {
    cat <<EOF
  <property name="last" type="empty">
    <property name="window-width" type="int" value="$win_width"/>
    <property name="window-height" type="int" value="$win_height"/>
  </property>
  <property name="desktop-icons" type="empty">
    <property name="file-icons" type="empty">
      <property name="show-home" type="bool" value="false"/>
      <property name="show-filesystem" type="bool" value="false"/>
      <property name="show-trash" type="bool" value="false"/>
      <property name="show-removable" type="bool" value="false"/>
    </property>
  </property>
  <property name="desktop-menu" type="empty">
    <property name="show" type="bool" value="true"/>
    <property name="show-icons" type="bool" value="true"/>
  </property>
  <property name="windowlist-menu" type="empty">
    <property name="show-icons" type="bool" value="true"/>
    <property name="show-workspace-names" type="bool" value="true"/>
    <property name="show-submenus" type="bool" value="false"/>
  </property>
</channel>
EOF
}

Monitors() {
    case "$mode" in
        monster)
            local monitors=(0 1
                            HDMI{0..5} HDMI-{0..5} HDMI-A-{0..5} HDMI-1-{0..5}
                            DP-{0..5}
                            eDP-{0..5} eDP-1-{0..5}
                            LVDS-{0..5}
                            DVI-D-{0..5} DVI-D-1-{0..5} DVI-1-{0..5}
                            VGA-{0..5} VGA-1-{0..5}
                           )
            monitors="${monitors[*]}"
            ;;
        detected)
            local monitors=""

            case "$XDG_SESSION_TYPE" in
                wayland)
                    [ -x /bin/wlr-randr ] || DIE "package wlr-randr is required but not installed"
                    monitors=$(echo $(/bin/wlr-randr | grep "^[A-Za-z]" | awk '{print $1}'))
                    ;;
                x11)
                    [ -x /bin/xrandr ] || DIE "package xorg-xrandr is required but not installed"
                    monitors=$(echo $(/bin/xrandr | grep connected | awk '{print $1}'))
                    ;;
                *)
                    DIE "sorry, cannot determine system's monitors"
                    ;;
            esac
            [ "$monitors" ] || DIE "no monitors found!"
            monitors="0 1 $monitors"
            ;;
    esac
    monitors=monitor${monitors// / monitor}
    echo $monitors
}

Usage() {
    cat <<EOF >&2
Purpose: generate the contents of file xfce4-desktop.xml to standard output.
Usage:   $progname [options]
Options: --wall=X           X = full path to the desired wallpaper file.
         --width=X          X = window width property.
         --height=X         X = window height property.
EOF
    [ "$1" ] && exit $1
}

Main() {
    local -r progname=${0##*/}
    local wallpaper="/usr/share/endeavouros/backgrounds/endeavouros-wallpaper.png"   # png -> avif  ??
    local win_width="1229"
    local win_height="1011"
    local monitors=""

    local mode="monster"     # "monster" (=default) or "detected"

    for arg in "$@" ; do
        case "$arg" in
            --help     | -h) Usage 0 ;;
            --detected | -d) mode=detected ;;
            --monster  | -m) mode=monster ;;
            --wall=*)        wallpaper=${arg#*=} ;;
            --width=*)       win_width=${arg#*=} ;;
            --height=*)      win_height=${arg#*=} ;;
            -*) DIE "unsupported option '$arg'" ;;
            *)  DIE "unsupported parameter '$arg'" ;;
        esac
    done

    monitors=$(Monitors) || return 1

    Start

    echo '  <property name="backdrop" type="empty">'
    echo '    <property name="screen0" type="empty">'
    for monitor in $monitors ; do
        echo "      <property name=\"$monitor\" type=\"empty\">"
        for workspace in workspace{0..5} ; do
            echo "        <property name=\"$workspace\" type=\"empty\">"
            echo '          <property name="color-style" type="int" value="0"/>'
            echo '          <property name="image-style" type="int" value="5"/>'
            echo "          <property name=\"last-image\" type=\"string\" value=\"$wallpaper\"/>"
            echo "        </property>"
        done
        echo "      </property>"
    done
    echo '    </property>'
    echo '  </property>'

    End
}

Main "$@"
