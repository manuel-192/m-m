#!/bin/bash

echo2()     { echo -e "$@" >&2; }
DIE()       { echo2 "$progname: error: $1"; exit 1; }
MakeSound() {
    [ "$sound_file" ] || DIE "no sound file"
    [ -r "$sound_file" ] || DIE "sound file $sound_file cannot be used"
    gsound-play -f $sound_file
}

GetSoundFile() {
    local -n _file_ret="$1"
    local ret=0

    case "$2" in
        "" | -*)
            local -r files=$(/bin/ls -1 --indicator-style slash /usr/share/sounds | grep -v /$)
            local -r f=$(printf "%s\n" "${files[@]}" | fzf)
            [ "$f" ] || DIE "no sound file"
            _file_ret="$f"
            return 0
            ;;
        *)
            _file_ret="$2"
            return 1
            ;;
    esac
}
GetPowerDevice() {
    local -n _file_ret="$1"
    local ret=0

    case "$2" in
        "")
            local -r files=($(/bin/ls /sys/class/power_supply/BAT*/uevent 2>/dev/null))
            [ "$files" ] || DIE "no power device file found"
            local -r f=$(printf "%s\n" "${files[@]}" | fzf)
            [ "$f" ] || DIE "power device file not selected"
            _file_ret="$f"
            return 0
            ;;
        -*) DIE "option --power-device-info without a device path"
            ;;
        *)
            _file_ret="$2"
            return 1
            ;;
    esac
}

DumpOptions() {
    if [ "$lopts" ] ; then
        local out=${lopts//:/}
        out="--${out//,/ --}"
        printf "%s\n" $out
    fi
    # don't show short options
}

Options() {
    local lopts="charge-sleep:,discharge-sleep:,dump-options,edit-config,help,is-running,keep-showing-max,max:,min:"
    lopts+=",no-reread-conf,power-device-info:,cycles,sound-file:"
    local sopts="h"
    local opts

    opts="$(/bin/getopt -o=$sopts --longoptions $lopts --name "$progname" -- "$@")" || { Usage; exit 1; }
    eval set -- "$opts"

    while [ "$1" ] ; do
        case "$1" in
            # these use $2
            --charge-sleep)       sleeptime_charging="$2";            shift ;;
            --discharge-sleep)    sleeptime_discharging="$2";         shift ;;
            --max)                max="$2";                           shift ;;
            --min)                min="$2";                           shift ;;
            --power-device-info)  GetPowerDevice power_device "$2" || shift ;;
            --sound-file)         GetSoundFile   sound_file   "$2" || shift ;;

            # these just set a value
            --keep-showing-max)   max_show_always=yes ;;
            --no-reread-conf)     reread_conf=no ;;
            --is-running)         check_is_running=yes ;;

            # these exit:
            --edit-config)        EditConfig; exit 0 ;;
            --dump-options)       DumpOptions; exit 0 ;;
            --cycles)             grep POWER_SUPPLY_CYCLE_COUNT /sys/class/power_supply/BAT1/uevent | cut -d'=' -f2
                                  exit 0
                                  ;;
            --help | -h)          Usage; exit 0 ;;
            --)                   shift; break ;;
            *)                    DIE "unsupported parameter '$1'" ;;
        esac
        shift
    done
}

Usage() {
    cat <<EOF
$progname: show recurring notifications when battery reaches the given max or min level.

Usage: $progname [flags]

Flags: --charge-sleep      Sets sleep time (seconds) between checks when charging.
       --discharge-sleep   Sets sleep time (seconds) between checks when discharging.
       --dump-options      Show all flags.
       --edit-config       Edit the user configuration file $conf2.
       --is-running        Only check if this app is running already.
       --max               Start notifications when battery reaches this percentage while charging.
       --min               Start notifications when battery reaches this percentage while discharging.
       --no-reread-conf    Read the config file only at start.
       --power-device-info File path for the power device info.
       --keep-showing-max  Keep notifying after reaching the max charge.
       --cycles            Show charging cycle count.
       --sound-file        Set the sound file path for the notification.
EOF
}

CreateConfigIfNeeded() {
    if [ ! -e "$conf" ] ; then
        cat <<EOF > "$conf"
#!/bin/bash

## BATTNOT_CONFIG_CMDS lists the options configured by the user.
## See also: $progname --help
## Tip: to re-create the config file, remove file $conf2.
#
BATTNOT_CONFIG_CMDS=(
    --max                  90     # %
    --min                  22     # %
    --charge-sleep         60     # seconds
    --discharge-sleep      120    # seconds
    --power-device-info    /sys/class/power_supply/BAT1/uevent
    --sound-file           /usr/share/sounds/Oxygen-Sys-Question.ogg
    # --keep-showing-max
)

## BATTNOT_EDITORS sets the editor command for editing the config file.
#
BATTNOT_EDITORS=(exo-open xdg-open kde-open)

EOF
    fi
}
EditConfig() {
    local editors=(exo-open xdg-open kde-open)
    local ed

    [ "${BATTNOT_EDITORS[0]}" ] && editors=("${BATTNOT_EDITORS[@]}")

    for ed in "${editors[@]}" ; do
        if which ${ed%% *} &> /dev/null ; then
            $ed "$conf"
            return 0
        fi
    done
    DIE "editor not found"
}

GetTheOtherPid() {
    ps -ef | grep battnot | grep -w '?' | awk '{print $2}'
}

IsRunning() {
    local -r pids=$(pgrep $progname)

    if [ $(echo "$pids" | wc -l) -gt 1 ] ; then
        local orig_pid=$(ps -ef | grep $progname | grep -w '?' | awk '{print $2}')
        [ "$(echo "$pids" | grep "^$orig_pid$")" ] && orig_pid=" (PID $orig_pid)" || orig_pid=""
        echo2 "$progname already running$orig_pid"
        exit 1
    else
        if [ $check_is_running = yes ] ; then
            echo2 "$progname not running"
            exit 0
        fi
    fi
}

Main() {
    local -r progname=${0##*/}
    local -r conf="$HOME/.config/$progname.conf"
    local -r conf2='~/.config/'"$progname"'.conf'
    local max                   #=90
    local min                   #=22
    local power_device          #=/sys/class/power_supply/BAT1/uevent
    local sound_file            #=/usr/share/sounds/Oxygen-Sys-Question.ogg
    local sleeptime_charging    #=60
    local sleeptime_discharging #=600
    local max_show_always=no
    local reread_conf=yes
    local check_is_running=no
    local BATTNOT_CONFIG_CMDS=()
    local BATTNOT_EDITORS=()
    local cmd=(notify-send --icon=battery --urgency=normal --expire-time=30000 --app-name=$progname)
    local percent
    local percent_prev=""
    local status
    local status_prev=""
    local -r sleeptime_def=10
    local sleeptime=$sleeptime_def
    local arg

    CreateConfigIfNeeded
    source "$conf"

    for arg in "$@" ; do
        case "$arg" in
            --help | -h)           Options $arg ;;
            --edit-config)         Options $arg ;;
            --cycles)              Options $arg ;;
            --no-reread-conf)      Options $arg ;;
            --is-running)          Options $arg ;;
            --dump-options)        Options $arg ;;
        esac
    done

    IsRunning

    Options "${BATTNOT_CONFIG_CMDS[@]}" "$@"

    echo2 "Starting $progname"

    while true ; do
        percent=$(grep ^POWER_SUPPLY_CAPACITY= $power_device | cut -d'=' -f2)
        [ "$percent" ] || DIE "cannot determine battery level"

        status=$(grep ^POWER_SUPPLY_STATUS= $power_device | cut -d'=' -f2)
        [ "$status" ] || DIE "cannot determine charging status"

        if [ "$status" != "$status_prev" ] ; then
            # "${cmd[@]}" "Status: $status" "${percent}%"
            "${cmd[@]}" "$percent% ${status,,}"
            [ "$status_prev" ] && sleeptime=$sleeptime_def
        fi

        case "$status" in
            Charging)
                if [ $percent -ge $max ] ; then
                    if [ "$percent" != "$percent_prev" ] || [ $max_show_always = yes ] ; then
                        "${cmd[@]}" "Battery high" "${percent}%, charging"
                        MakeSound
                        sleeptime=$sleeptime_charging
                    fi
                fi
                ;;
            Discharging)
                if [ $percent -le $min ] ; then
                    if [ "$percent" != "$percent_prev" ] ; then
                        # no need to test $min_show_always since the battery will run out
                        "${cmd[@]}" "Battery low" "${percent}%, not charging"
                        MakeSound
                        sleeptime=$sleeptime_discharging
                    fi
                fi
                ;;
        esac
        sleep $sleeptime
        percent_prev=$percent
        status_prev=$status

        if [ $reread_conf = yes ] && [ -r "$conf" ] ; then
            source "$conf"
            Options "${BATTNOT_CONFIG_CMDS[@]}"
        fi
    done
}

Main "$@"
