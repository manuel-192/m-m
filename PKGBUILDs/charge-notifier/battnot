#!/bin/bash

echo2()     { echo -e "$@" >&2; }
DIE()       { echo2 "$progname: error: $1"; exit 1; }
MakeSound() {
    [ "$sound_file" ] || DIE "no sound file"
    [ -r "$sound_file" ] || DIE "sound file $sound_file cannot be used"
    gsound-play -f $sound_file
}

GetSoundFile() {
    local -n _file_ret="$1"
    local ret=0

    case "$2" in
        "" | -*)
            local -r files=$(/bin/ls -1 --indicator-style slash /usr/share/sounds | grep -v /$)
            local -r f=$(printf "%s\n" "${files[@]}" | fzf)
            [ "$f" ] || DIE "no sound file"
            _file_ret="$f"
            return 0
            ;;
        *)
            _file_ret="$2"
            return 1
            ;;
    esac
}
GetPowerDevice() {
    local -n _file_ret="$1"
    local ret=0

    case "$2" in
        "" | -*)
            local -r files=(/sys/class/power_supply/BAT*/uevent)
            local -r f=$(printf "%s\n" "${files[@]}" | fzf)
            [ "$f" ] || DIE "no power device file"
            _file_ret="$f"
            return 0
            ;;
        *)
            _file_ret="$2"
            return 1
            ;;
    esac
}

Options() {
    while [ "$1" ] ; do
        case "$1" in
            --charge-sleep)    sleeptime_charging="$2";    shift ;;
            --discharge-sleep) sleeptime_discharging="$2"; shift ;;
            --min)             min="$2";                   shift ;;
            --power-device)    GetPowerDevice power_device "$2" || shift ;;
            --sound-file)      GetSoundFile   sound_file   "$2" || shift ;;
            --max)             max="$2";                   shift ;;

            --no-reread-conf)  ;;
            --dump-options)    ;;                                   # handled already
            *)                 DIE "unsupported parameter '$1'" ;;
        esac
        shift
    done
}

Usage() {
    cat <<EOF
$progname: show reoccurring notifications when battery reaches given max or min level.

Usage: $progname [flags]
Flags: --charge-sleep      Sets sleep time (seconds) between checks when charging.
       --discharge-sleep   Sets sleep time (seconds) between checks when discharging.
       --dump-options      Show all flags.
       --edit-config       Edit the user configuration file.
       --is-running        Only check if this app is running already.
       --max               Start notifications when battery reaches this percentage while charging.
       --min               Start notifications when battery reaches this percentage while discharging.
       --no-reread-conf    Read the config file only at start.
       --power-device      Set the power device info file path.
       --sound-file        Set the sound file path for the notification.
EOF
}

EditConfig() {
    if [ ! -e "$conf" ] ; then
        cat <<EOF > "$conf"
#!/bin/bash

CONFIG_CMDS=(
    --max             90
    --min             22
    --power-device    /sys/class/power_supply/BAT1/uevent
    --sound-file      /usr/share/sounds/Oxygen-Sys-Question.ogg
    --charge-sleep    60
    --discharge-sleep 120
)
EOF
    fi
    local editors=(exo-open xdg-open kde-open)
    local ed
    for ed in "${editors[@]}" ; do
        if [ -x /bin/${ed%% *} ] ; then
            /bin/$ed "$conf"
            exit 0
        fi
    done
    DIE "editor not found"
}

GetTheOtherPid() {
    ps -ef | grep battnot | grep -w '?' | awk '{print $2}'
}

Main() {
    local -r progname=${0##*/}
    local -r conf="$HOME/.config/$progname.conf"
    local reread_conf=yes
    local check_is_running=no
    local arg

    for arg in "$@" ; do
        case "$arg" in
            --edit-config)         EditConfig ;;
            --help | -h)           Usage; exit 0 ;;
            --is-running)          check_is_running=yes ;;
            --no-reread-conf)      reread_conf=no ;;
            --dump-options)
                local -r FLAGS=(
                    --charge-sleep
                    --discharge-sleep
                    --dump-options
                    --edit-config
                    --is-running
                    --max
                    --min
                    --no-reread-conf
                    --power-device
                    --sound-file
                )
                printf "%s\n" "${FLAGS[@]}"
                exit 0
                ;;
        esac
    done

    local power_device=/sys/class/power_supply/BAT1/uevent
    local max=90
    local min=22
    local sleeptime_charging=60
    local sleeptime_discharging=600
    local sound_file=/usr/share/sounds/Oxygen-Sys-Question.ogg
    local CONFIG_CMDS=()

    local -r pids=$(pgrep $progname)

    if [ $(echo "$pids" | wc -l) -gt 1 ] ; then
        local orig_pid=$(ps -ef | grep $progname | grep -w '?' | awk '{print $2}')
        [ "$(echo "$pids" | grep "^$orig_pid$")" ] && orig_pid=" (PID $orig_pid)" || orig_pid=""
        echo2 "$progname already running$orig_pid"
        exit 1
    else
        if [ $check_is_running = yes ] ; then
            echo2 "$progname not running"
            exit 0
        fi
    fi
    local cmd=(notify-send --icon=battery --urgency=normal --expire-time=30000 --app-name=$progname)
    local percent
    local percent_prev=""
    local status
    local status_prev=""
    local -r sleeptime_def=10
    local sleeptime=$sleeptime_def

    [ -r "$conf" ] && source "$conf"

    Options "${CONFIG_CMDS[@]}" "$@"

    echo2 "Starting $progname"

    while true ; do
        percent=$(grep ^POWER_SUPPLY_CAPACITY= $power_device | cut -d'=' -f2)
        [ "$percent" ] || DIE "cannot determine battery level"

        status=$(grep ^POWER_SUPPLY_STATUS= $power_device | cut -d'=' -f2)
        [ "$status" ] || DIE "cannot determine charging status"

        if [ "$status" != "$status_prev" ] ; then
            "${cmd[@]}" "Charging status: $status" "${percent}%"
            [ "$status_prev" ] && sleeptime=$sleeptime_def
        fi

        case "$status" in
            Charging)
                if [ $percent -ge $max ] && [ "$percent" != "$percent_prev" ] ; then
                    "${cmd[@]}" "Battery high" "${percent}%, charging"
                    MakeSound
                    sleeptime=$sleeptime_charging
                fi
                ;;
            Discharging)
                if [ $percent -le $min ] && [ "$percent" != "$percent_prev" ] ; then
                    "${cmd[@]}" "Battery low" "${percent}%, not charging"
                    MakeSound
                    sleeptime=$sleeptime_discharging
                fi
                ;;
        esac
        sleep $sleeptime
        percent_prev=$percent
        status_prev=$status

        if [ $reread_conf = yes ] && [ -r "$conf" ] ; then
            source "$conf"
            Options "${CONFIG_CMDS[@]}"
        fi
    done
}

Main "$@"


# AssertIsNumber() {
#     if [ -z "$1" ] || [ "${1//[0-9]/}" ] ; then
#         DIE "value '$val' is not a number"
#     fi
# }
# AssertCanRead() {
#     if [ -z "$1" ] || [ ! -r "$1" ] ; then
#         DIE "cannot read file '$1'"
#     fi
# }
